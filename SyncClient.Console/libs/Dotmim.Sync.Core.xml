<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Dotmim.Sync.Core</name>
    </assembly>
    <members>
        <member name="T:Dotmim.Sync.ApplyChangesConflictOccuredArgs">
            <summary>
            Raised as an argument when an apply is failing. Waiting from user for the conflict resolution.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.ApplyChangesConflictOccuredArgs.#ctor(Dotmim.Sync.ScopeInfo,Dotmim.Sync.SyncContext,Dotmim.Sync.BaseOrchestrator,Dotmim.Sync.SyncRow,Dotmim.Sync.SyncTable,Dotmim.Sync.Enumerations.ConflictResolution,System.Nullable{System.Guid},System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <inheritdoc cref="T:Dotmim.Sync.ApplyChangesConflictOccuredArgs"/>
        </member>
        <member name="P:Dotmim.Sync.ApplyChangesConflictOccuredArgs.Resolution">
            <summary>
            Gets or Sets the action to be taken when resolving the conflict.
            If you choose MergeRow, FinalRow will be merged in both sources.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.ApplyChangesConflictOccuredArgs.ProgressLevel">
            <summary>
            Gets the Progress level used to determine if message is output.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.ApplyChangesConflictOccuredArgs.SenderScopeId">
            <summary>
            Gets or Sets the scope id who will be marked as winner.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.ApplyChangesConflictOccuredArgs.FinalRow">
            <summary>
            Gets or sets if we have a merge action, the final row represents the merged row.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.ApplyChangesConflictOccuredArgs.GetSyncConflictAsync">
            <summary>
            Get the conflict that occurs by selecting the local conflict row.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.ApplyChangesConflictOccuredArgs.Message">
            <inheritdoc />
        </member>
        <member name="P:Dotmim.Sync.ApplyChangesConflictOccuredArgs.EventId">
            <inheritdoc />
        </member>
        <member name="T:Dotmim.Sync.InterceptorsExtensions">
            <summary>
            Interceptors extensions.
            </summary>
            <summary>
            Interceptors extensions.
            </summary>
            <summary>
            Interceptors extensions.
            </summary>
            <summary>
            Interceptors extensions.
            </summary>
            <summary>
            Interceptor extension methods.
            </summary>
            <summary>
            Interceptors extensions.
            </summary>
            <summary>
            Interceptors extensions.
            </summary>
            <summary>
            Partial Interceptors extensions.
            </summary>
            <summary>
            Interceptor called before and after getting the local timestamp from the current provider.
            </summary>
            <summary>
            Interceptors extensions.
            </summary>
            <summary>
            Interceptor extension methods.
            </summary>
            <summary>
            Interceptor extension methods.
            </summary>
            <summary>
            Interceptors extensions.
            </summary>
            <summary>
            Interceptors extensions.
            </summary>
            <summary>
            Interceptor called before and after applying a batch of rows to the local (client or server) database.
            </summary>
            <summary>
            Interceptor extension methods.
            </summary>
            <summary>
            Partial Interceptors extensions.
            </summary>
            <summary>
            Interceptor extension methods.
            </summary>
            <summary>
            Interceptor extension methods.
            </summary>
            <summary>
            Interceptors extensions.
            </summary>
            <summary>
            Interceptors extensions.
            </summary>
            <summary>
            Partial Interceptors extensions.
            </summary>
            <summary>
            Partial Interceptors extensions.
            </summary>
            <summary>
            Intercept the provider action when a all changes have been applied on a datasource table.
            </summary>
            <summary>
            Intercept the changes selected from the database.
            </summary>
            <summary>
            Intercept the provider action when a table is reset due to Reinitialize call.
            </summary>
            <summary>
            Partial Interceptors extensions.
            </summary>
            <summary>
            Partial Interceptors extensions.
            </summary>
            <summary>
            Interceptors extensions.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnApplyChangesConflictOccured(Dotmim.Sync.BaseOrchestrator,System.Action{Dotmim.Sync.ApplyChangesConflictOccuredArgs})">
            <summary>
            Intercept the provider when a conflict is happening.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnApplyChangesConflictOccured(Dotmim.Sync.BaseOrchestrator,System.Func{Dotmim.Sync.ApplyChangesConflictOccuredArgs,System.Threading.Tasks.Task})">
            <summary>
            Intercept the provider when a conflict is happening.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnApplyChangesErrorOccured(Dotmim.Sync.BaseOrchestrator,System.Action{Dotmim.Sync.ApplyChangesErrorOccuredArgs})">
            <summary>
            Intercept the provider when an apply change is failing.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnApplyChangesErrorOccured(Dotmim.Sync.BaseOrchestrator,System.Func{Dotmim.Sync.ApplyChangesErrorOccuredArgs,System.Threading.Tasks.Task})">
            <summary>
            Intercept the provider when an apply change is failing.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnBatchChangesApplying(Dotmim.Sync.BaseOrchestrator,System.Action{Dotmim.Sync.BatchChangesApplyingArgs})">
             <summary>
             Occurs when a batch for a particular table is about to be applied on the local data source.
             <example>
             <code>
             agent.LocalOrchestrator.OnBatchChangesApplying(async args =>
             {
                 if (args.BatchPartInfo != null)
                 {
                     Console.WriteLine($"FileName:{args.BatchPartInfo.FileName}. RowsCount:{args.BatchPartInfo.RowsCount} ");
                     Console.WriteLine($"Applying rows from this batch part info:");
            
                     var table = await agent.LocalOrchestrator.LoadTableFromBatchPartInfo(args.BatchInfo,
                                       args.BatchPartInfo, args.State, args.Connection, args.Transaction);
            
                     foreach (var row in table.Rows)
                         Console.WriteLine(row);
            
                 }
             });
             </code>
             </example>
             </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnBatchChangesApplying(Dotmim.Sync.BaseOrchestrator,System.Func{Dotmim.Sync.BatchChangesApplyingArgs,System.Threading.Tasks.Task})">
            <inheritdoc cref="M:Dotmim.Sync.InterceptorsExtensions.OnBatchChangesApplying(Dotmim.Sync.BaseOrchestrator,System.Action{Dotmim.Sync.BatchChangesApplyingArgs})"/>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnBatchChangesApplied(Dotmim.Sync.BaseOrchestrator,System.Action{Dotmim.Sync.BatchChangesAppliedArgs})">
             <summary>
             Occurs when a batch for a particular table has been applied on the local data source.
             <example>
             <code>
             agent.LocalOrchestrator.OnBatchChangesApplied(async args =>
             {
                 if (args.BatchPartInfo != null)
                 {
                     Console.WriteLine($"FileName:{args.BatchPartInfo.FileName}. RowsCount:{args.BatchPartInfo.RowsCount} ");
                     Console.WriteLine($"Rows applied from this batch part info:");
            
                     var table = await agent.LocalOrchestrator.LoadTableFromBatchPartInfo(args.BatchInfo,
                                       args.BatchPartInfo, args.State, args.Connection, args.Transaction);
            
                     foreach (var row in table.Rows)
                         Console.WriteLine(row);
            
                 }
             });
             </code>
             </example>
             </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnBatchChangesApplied(Dotmim.Sync.BaseOrchestrator,System.Func{Dotmim.Sync.BatchChangesAppliedArgs,System.Threading.Tasks.Task})">
            <inheritdoc cref="M:Dotmim.Sync.InterceptorsExtensions.OnBatchChangesApplied(Dotmim.Sync.BaseOrchestrator,System.Action{Dotmim.Sync.BatchChangesAppliedArgs})"/>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnBatchChangesCreated(Dotmim.Sync.BaseOrchestrator,System.Action{Dotmim.Sync.BatchChangesCreatedArgs})">
             <summary>
             Occurs when a batch for a particular table has been applied on the local data source.
             <example>
             <code>
             agent.LocalOrchestrator.OnBatchChangesApplied(async args =>
             {
                 if (args.BatchPartInfo != null)
                 {
                     Console.WriteLine($"FileName:{args.BatchPartInfo.FileName}. RowsCount:{args.BatchPartInfo.RowsCount} ");
                     Console.WriteLine($"Rows applied from this batch part info:");
            
                     var table = await agent.LocalOrchestrator.LoadTableFromBatchPartInfoAsync(args.BatchInfo,
                                       args.BatchPartInfo, args.State, args.Connection, args.Transaction);
            
                     foreach (var row in table.Rows)
                         Console.WriteLine(row);
            
                 }
             });
             </code>
             </example>
             </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnBatchChangesCreated(Dotmim.Sync.BaseOrchestrator,System.Func{Dotmim.Sync.BatchChangesCreatedArgs,System.Threading.Tasks.Task})">
            <inheritdoc cref="M:Dotmim.Sync.InterceptorsExtensions.OnBatchChangesCreated(Dotmim.Sync.BaseOrchestrator,System.Action{Dotmim.Sync.BatchChangesCreatedArgs})"/>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnConflictingSetup(Dotmim.Sync.BaseOrchestrator,System.Action{Dotmim.Sync.ConflictingSetupArgs})">
            <summary>
            Intercept the provider if the local setup is conflicting with the remote setup.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnConflictingSetup(Dotmim.Sync.BaseOrchestrator,System.Func{Dotmim.Sync.ConflictingSetupArgs,System.Threading.Tasks.Task})">
            <summary>
            Intercept the provider if the local setup is conflicting with the remote setup.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnDatabaseChangesApplying(Dotmim.Sync.BaseOrchestrator,System.Action{Dotmim.Sync.DatabaseChangesApplyingArgs})">
             <summary>
             Intercept the provider action when changes are going to be applied on local database.
             <example>
             <code>
             localOrchestrator.OnDatabaseChangesApplying(args =>
             {
               Console.WriteLine($"Directory: {args.ApplyChanges.Changes.DirectoryName}. " +
                 $"Number of files: {args.ApplyChanges.Changes.BatchPartsInfo?.Count()} ");
            
               Console.WriteLine($"Total: {args.ApplyChanges.Changes.RowsCount} ");
             });
             </code>
             </example>
             </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnDatabaseChangesApplying(Dotmim.Sync.BaseOrchestrator,System.Func{Dotmim.Sync.DatabaseChangesApplyingArgs,System.Threading.Tasks.Task})">
            <inheritdoc cref="M:Dotmim.Sync.InterceptorsExtensions.OnDatabaseChangesApplying(Dotmim.Sync.BaseOrchestrator,System.Action{Dotmim.Sync.DatabaseChangesApplyingArgs})"/>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnDatabaseChangesApplied(Dotmim.Sync.BaseOrchestrator,System.Action{Dotmim.Sync.DatabaseChangesAppliedArgs})">
            <summary>
            Intercept the provider action when changes are applied on each table defined in the configuration schema.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnDatabaseChangesApplied(Dotmim.Sync.BaseOrchestrator,System.Func{Dotmim.Sync.DatabaseChangesAppliedArgs,System.Threading.Tasks.Task})">
            <summary>
            Intercept the provider action when changes are applied on each table defined in the configuration schema.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnDatabaseChangesSelecting(Dotmim.Sync.BaseOrchestrator,System.Action{Dotmim.Sync.DatabaseChangesSelectingArgs})">
            <summary>
            Occurs when changes are going to be queried from the underline database.
            <example>
            <code>
            var localOrchestrator = new LocalOrchestrator(clientProvider);
            localOrchestrator.OnDatabaseChangesSelecting(args => {
              Console.WriteLine($"Getting changes from local database:");
              Console.WriteLine($"Batch directory: {args.BatchDirectory}. Batch size: {args.BatchSize}. Is first sync: {args.IsNew}");
              Console.WriteLine($"From: {args.FromTimestamp}.");
            }
            </code>
            </example>
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnDatabaseChangesSelecting(Dotmim.Sync.BaseOrchestrator,System.Func{Dotmim.Sync.DatabaseChangesSelectingArgs,System.Threading.Tasks.Task})">
            <inheritdoc cref="M:Dotmim.Sync.InterceptorsExtensions.OnDatabaseChangesSelecting(Dotmim.Sync.BaseOrchestrator,System.Action{Dotmim.Sync.DatabaseChangesSelectingArgs})"/>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnDatabaseChangesSelected(Dotmim.Sync.BaseOrchestrator,System.Action{Dotmim.Sync.DatabaseChangesSelectedArgs})">
            <summary>
            Occurs when changes have been retrieved from the local database.
            <example>
            <code>
            var localOrchestrator = new LocalOrchestrator(clientProvider);
            localOrchestrator.OnDatabaseChangesSelected(args =>
            {
              Console.WriteLine($"Directory: {args.BatchInfo.DirectoryName}. Number of files: {args.BatchInfo.BatchPartsInfo?.Count()} ");
              Console.WriteLine($"Total: {args.ChangesSelected.TotalChangesSelected} " +
                        $"({args.ChangesSelected.TotalChangesSelectedUpdates}/{args.ChangesSelected.TotalChangesSelectedDeletes})");
              foreach (var table in args.ChangesSelected.TableChangesSelected)
                      Console.WriteLine($"Table: {table.ObjectName}. Total: {table.TotalChanges} ({table.Upserts / table.Deletes}");
            });
            </code>
            </example>
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnDatabaseChangesSelected(Dotmim.Sync.BaseOrchestrator,System.Func{Dotmim.Sync.DatabaseChangesSelectedArgs,System.Threading.Tasks.Task})">
            <inheritdoc cref="M:Dotmim.Sync.InterceptorsExtensions.OnDatabaseChangesSelected(Dotmim.Sync.BaseOrchestrator,System.Action{Dotmim.Sync.DatabaseChangesSelectedArgs})"/>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnExecuteCommand(Dotmim.Sync.BaseOrchestrator,System.Action{Dotmim.Sync.ExecuteCommandArgs})">
            <summary>
            Occurs when a command is about to be executed on the underline provider.
            <example>
            <code>
            agent.RemoteOrchestrator.OnExecuteCommand(args =>
            {
                Console.WriteLine(args.Command.CommandText);
            });
            </code>
            </example>
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnExecuteCommand(Dotmim.Sync.BaseOrchestrator,System.Func{Dotmim.Sync.ExecuteCommandArgs,System.Threading.Tasks.Task})">
            <inheritdoc cref="M:Dotmim.Sync.InterceptorsExtensions.OnExecuteCommand(Dotmim.Sync.BaseOrchestrator,System.Action{Dotmim.Sync.ExecuteCommandArgs})"/>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnGetCommand(Dotmim.Sync.BaseOrchestrator,System.Action{Dotmim.Sync.GetCommandArgs})">
            <summary>
            Occurs every time we get a command from the underline provider.
            <para>
            You can change the command text and even the parameters values if needed.
            </para>
            <example>
            <code>
            agent.RemoteOrchestrator.OnGetCommand(args =>
            {
                if (args.Command.CommandType == CommandType.StoredProcedure)
                {
                    args.Command.CommandText = args.Command.CommandText.Replace("_filterproducts_", "_default_");
                }
            });
            </code>
            </example>
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnGetCommand(Dotmim.Sync.BaseOrchestrator,System.Func{Dotmim.Sync.GetCommandArgs,System.Threading.Tasks.Task})">
            <inheritdoc cref="M:Dotmim.Sync.InterceptorsExtensions.OnGetCommand(Dotmim.Sync.BaseOrchestrator,System.Action{Dotmim.Sync.GetCommandArgs})"/>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnDropAll(Dotmim.Sync.BaseOrchestrator,System.Action{Dotmim.Sync.DropAllArgs})">
            <summary>
            Intercept the provider when a DropAll is called where you specified you want to drop the tables.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnDropAll(Dotmim.Sync.BaseOrchestrator,System.Func{Dotmim.Sync.DropAllArgs,System.Threading.Tasks.Task})">
            <summary>
            Intercept the provider when a DropAll is called where you specified you want to drop the tables.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnLocalTimestampLoading(Dotmim.Sync.BaseOrchestrator,System.Action{Dotmim.Sync.LocalTimestampLoadingArgs})">
            <summary>
            Intercept the provider action when a database is reading a timestamp.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnLocalTimestampLoading(Dotmim.Sync.BaseOrchestrator,System.Func{Dotmim.Sync.LocalTimestampLoadingArgs,System.Threading.Tasks.Task})">
            <summary>
            Intercept the provider action when a database is reading a timestamp.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnLocalTimestampLoaded(Dotmim.Sync.BaseOrchestrator,System.Action{Dotmim.Sync.LocalTimestampLoadedArgs})">
            <summary>
            Intercept the provider action when a database has read a timestamp.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnLocalTimestampLoaded(Dotmim.Sync.BaseOrchestrator,System.Func{Dotmim.Sync.LocalTimestampLoadedArgs,System.Threading.Tasks.Task})">
            <summary>
            Intercept the provider action when a database has read a timestamp.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnMetadataCleaning(Dotmim.Sync.BaseOrchestrator,System.Action{Dotmim.Sync.MetadataCleaningArgs})">
            <summary>
            Intercept the provider action when a provider is cleaning metadata.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnMetadataCleaning(Dotmim.Sync.BaseOrchestrator,System.Func{Dotmim.Sync.MetadataCleaningArgs,System.Threading.Tasks.Task})">
            <summary>
            Intercept the provider action when a provider is cleaning metadata.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnMetadataCleaned(Dotmim.Sync.BaseOrchestrator,System.Action{Dotmim.Sync.MetadataCleanedArgs})">
            <summary>
            Intercept the provider action when a provider has cleaned metadata.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnMetadataCleaned(Dotmim.Sync.BaseOrchestrator,System.Func{Dotmim.Sync.MetadataCleanedArgs,System.Threading.Tasks.Task})">
            <summary>
            Intercept the provider action when a provider has cleaned metadata.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnGettingOperation(Dotmim.Sync.BaseOrchestrator,System.Action{Dotmim.Sync.OperationArgs})">
            <summary>
            Occurs when server receives a first request for a sync. Can override the whole processus, depending
            on the <see cref="T:Dotmim.Sync.Enumerations.SyncOperation"/> argument.
            <example>
            <code>
            [HttpPost]
            public async Task Post()
            {
                var scopeName = context.GetScopeName();
                var clientScopeId = context.GetClientScopeId();
                var webServerAgent = webServerAgents.First(wsa => wsa.ScopeName == scopeName);
                webServerAgent.RemoteOrchestrator.OnGettingOperation(operationArgs =>
                {
                    if (clientScopeId == A_PARTICULAR_CLIENT_ID_TO_CHECK)
                        operationArgs.SyncOperation = SyncOperation.ReinitializeWithUpload;
                });
                await webServerAgent.HandleRequestAsync(context);
            }
            </code>
            </example>
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnGettingOperation(Dotmim.Sync.BaseOrchestrator,System.Func{Dotmim.Sync.OperationArgs,System.Threading.Tasks.Task})">
            <inheritdoc cref="M:Dotmim.Sync.InterceptorsExtensions.OnGettingOperation(Dotmim.Sync.BaseOrchestrator,System.Action{Dotmim.Sync.OperationArgs})"/>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnOutdated(Dotmim.Sync.BaseOrchestrator,System.Action{Dotmim.Sync.OutdatedArgs})">
             <summary>
             Intercept the provider action when a database is out dated. Always happens on the client side.
             <example>
             <code>
             agent.LocalOrchestrator.OnOutdated(oa =>
             {
                 Console.ForegroundColor = ConsoleColor.Red;
                 Console.WriteLine("local database is too old to synchronize with the server.");
                 Console.ResetColor();
                 Console.WriteLine("Do you want to synchronize anyway, and potentially lost data ? ");
                 Console.Write("Enter a value ('r' for reinitialize or 'ru' for reinitialize with upload): ");
                 var answer = Console.ReadLine();
            
                 if (answer.ToLowerInvariant() == "r")
                     oa.Action = OutdatedAction.Reinitialize;
                 else if (answer.ToLowerInvariant() == "ru")
                     oa.Action = OutdatedAction.ReinitializeWithUpload;
            
             });
             </code>
             </example>
             </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnOutdated(Dotmim.Sync.BaseOrchestrator,System.Func{Dotmim.Sync.OutdatedArgs,System.Threading.Tasks.Task})">
            <inheritdoc cref="M:Dotmim.Sync.InterceptorsExtensions.OnOutdated(Dotmim.Sync.BaseOrchestrator,System.Action{Dotmim.Sync.OutdatedArgs})"/>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnProvisioning(Dotmim.Sync.BaseOrchestrator,System.Action{Dotmim.Sync.ProvisioningArgs})">
            <summary>
            Intercept the provider before it begins a database provisioning.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnProvisioning(Dotmim.Sync.BaseOrchestrator,System.Func{Dotmim.Sync.ProvisioningArgs,System.Threading.Tasks.Task})">
            <summary>
            Intercept the provider before it begins a database provisioning.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnProvisioned(Dotmim.Sync.BaseOrchestrator,System.Action{Dotmim.Sync.ProvisionedArgs})">
            <summary>
            Intercept the provider after it has provisioned a database.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnProvisioned(Dotmim.Sync.BaseOrchestrator,System.Func{Dotmim.Sync.ProvisionedArgs,System.Threading.Tasks.Task})">
            <summary>
            Intercept the provider after it has provisioned a database.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnDeprovisioning(Dotmim.Sync.BaseOrchestrator,System.Action{Dotmim.Sync.DeprovisioningArgs})">
            <summary>
            Intercept the provider before it begins a database deprovisioning.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnDeprovisioning(Dotmim.Sync.BaseOrchestrator,System.Func{Dotmim.Sync.DeprovisioningArgs,System.Threading.Tasks.Task})">
            <summary>
            Intercept the provider before it begins a database deprovisioning.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnDeprovisioned(Dotmim.Sync.BaseOrchestrator,System.Action{Dotmim.Sync.DeprovisionedArgs})">
            <summary>
            Intercept the provider after it has deprovisioned a database.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnDeprovisioned(Dotmim.Sync.BaseOrchestrator,System.Func{Dotmim.Sync.DeprovisionedArgs,System.Threading.Tasks.Task})">
            <summary>
            Intercept the provider after it has deprovisioned a database.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnProvisioningTable(Dotmim.Sync.BaseOrchestrator,System.Action{Dotmim.Sync.ProvisioningTableArgs})">
            <summary>
            Intercept the provider before it begins a table provisioning.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnProvisioningTable(Dotmim.Sync.BaseOrchestrator,System.Func{Dotmim.Sync.ProvisioningTableArgs,System.Threading.Tasks.Task})">
            <summary>
            Intercept the provider before it begins a table provisioning.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnProvisionedTable(Dotmim.Sync.BaseOrchestrator,System.Action{Dotmim.Sync.ProvisionedTableArgs})">
            <summary>
            Intercept the provider after it has provisioned a table.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnProvisionedTable(Dotmim.Sync.BaseOrchestrator,System.Func{Dotmim.Sync.ProvisionedTableArgs,System.Threading.Tasks.Task})">
            <summary>
            Intercept the provider after it has provisioned a table.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnDeprovisioningTable(Dotmim.Sync.BaseOrchestrator,System.Action{Dotmim.Sync.DeprovisioningTableArgs})">
            <summary>
            Intercept the provider before it begins a table deprovisioning.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnDeprovisioningTable(Dotmim.Sync.BaseOrchestrator,System.Func{Dotmim.Sync.DeprovisioningTableArgs,System.Threading.Tasks.Task})">
            <summary>
            Intercept the provider before it begins a table deprovisioning.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnDeprovisionedTable(Dotmim.Sync.BaseOrchestrator,System.Action{Dotmim.Sync.DeprovisionedTableArgs})">
            <summary>
            Intercept the provider after it has deprovisioned a table.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnDeprovisionedTable(Dotmim.Sync.BaseOrchestrator,System.Func{Dotmim.Sync.DeprovisionedTableArgs,System.Threading.Tasks.Task})">
            <summary>
            Intercept the provider after it has deprovisioned a table.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnRowsChangesApplying(Dotmim.Sync.BaseOrchestrator,System.Action{Dotmim.Sync.RowsChangesApplyingArgs})">
             <summary>
             Occurs just before applying a batch of rows to the local (client or server) database.
             <para>
             The number of rows to be applied here is depending on:
             <list type="bullet">
             The batch size you have set in your SyncOptions instance : <c>SyncOptions.BatchSize</c> (Default is 2 Mo)
             </list>
             <list type="bullet">
             The max number of rows to applied in one single instruction : <c>Provider.BulkBatchMaxLinesCount</c> (Default is 10 000 rows per instruction)
             </list>
             </para>
             <example>
             <code>
             localOrchestrator.OnRowsChangesApplying(async args =>
             {
                 Console.WriteLine($"- In memory rows that are going to be Applied");
                 foreach (var row in args.SyncRows)
                     Console.WriteLine(row);
            
                 Console.WriteLine();
             });
             </code>
             </example>
             </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnRowsChangesApplying(Dotmim.Sync.BaseOrchestrator,System.Func{Dotmim.Sync.RowsChangesApplyingArgs,System.Threading.Tasks.Task})">
            <inheritdoc cref="M:Dotmim.Sync.InterceptorsExtensions.OnRowsChangesApplying(Dotmim.Sync.BaseOrchestrator,System.Action{Dotmim.Sync.RowsChangesApplyingArgs})"/>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnRowsChangesFallbackFromBatchToSingleRowApplying(Dotmim.Sync.BaseOrchestrator,System.Action{Dotmim.Sync.RowsChangesFallbackFromBatchToSingleRowApplyingArgs})">
            <summary>
            Occurs when a batch was not applied successfully and DMS tries to fallback to one row per row applying.
            <example>
            <code>
            localOrchestrator.OnRowsChangesFallbackFromBatchToSingleRowApplying(async args =>
            {
                Console.WriteLine($"- In memory rows that are going to be Applied one by one because of an error occured during batch applying");
                Console.WriteLine($"- Error raised causing the fallback: {args.Exception.Message}");
                Console.WriteLine($"- Rows count to apply one by one: {args.SyncRows.Count}");
            });
            </code>
            </example>
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnRowsChangesFallbackFromBatchToSingleRowApplying(Dotmim.Sync.BaseOrchestrator,System.Func{Dotmim.Sync.RowsChangesFallbackFromBatchToSingleRowApplyingArgs,System.Threading.Tasks.Task})">
            <inheritdoc cref="M:Dotmim.Sync.InterceptorsExtensions.OnRowsChangesFallbackFromBatchToSingleRowApplying(Dotmim.Sync.BaseOrchestrator,System.Action{Dotmim.Sync.RowsChangesFallbackFromBatchToSingleRowApplyingArgs})"/>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnRowsChangesApplied(Dotmim.Sync.BaseOrchestrator,System.Action{Dotmim.Sync.RowsChangesAppliedArgs})">
             <summary>
             Occurs just after a batch or rows have been applied to the local (client or server) database.
             <para>
             The number of rows applied here is depending on:
             <list type="bullet">
             The batch size you have set in your SyncOptions instance : <c>SyncOptions.BatchSize</c> (Default is 2 Mo)
             </list>
             <list type="bullet">
             The max number of rows to applied in one single instruction : <c>Provider.BulkBatchMaxLinesCount</c> (Default is 10 000 rows per instruction)
             </list>
             </para>
             <example>
             <code>
             localOrchestrator.OnRowsChangesApplied(async args =>
             {
                 Console.WriteLine($"- In memory rows that are applied, but still in the on going transaction");
                 foreach (var row in args.SyncRows)
                     Console.WriteLine(row);
            
                 Console.WriteLine();
             });
             </code>
             </example>
             </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnRowsChangesApplied(Dotmim.Sync.BaseOrchestrator,System.Func{Dotmim.Sync.RowsChangesAppliedArgs,System.Threading.Tasks.Task})">
            <inheritdoc cref="M:Dotmim.Sync.InterceptorsExtensions.OnRowsChangesApplied(Dotmim.Sync.BaseOrchestrator,System.Action{Dotmim.Sync.RowsChangesAppliedArgs})"/>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnRowsChangesSelected(Dotmim.Sync.BaseOrchestrator,System.Action{Dotmim.Sync.RowsChangesSelectedArgs})">
            <summary>
            Intercept the provider action when a sync row is about to be serialized in a batch part info after have been selected from the data source.
            <example>
            <code>
            var localOrchestrator = new LocalOrchestrator(clientProvider);
            localOrchestrator.OnRowsChangesSelected(args =>
            {
                Console.WriteLine($"Row read from local database for table:{args.SchemaTable.GetFullName()}");
                Console.WriteLine($"{args.SyncRow}");
            });
            </code>
            </example>
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnRowsChangesSelected(Dotmim.Sync.BaseOrchestrator,System.Func{Dotmim.Sync.RowsChangesSelectedArgs,System.Threading.Tasks.Task})">
            <inheritdoc cref="M:Dotmim.Sync.InterceptorsExtensions.OnRowsChangesSelected(Dotmim.Sync.BaseOrchestrator,System.Action{Dotmim.Sync.RowsChangesSelectedArgs})"/>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnSchemaLoaded(Dotmim.Sync.BaseOrchestrator,System.Action{Dotmim.Sync.SchemaLoadedArgs})">
            <summary>
            Intercept the provider when schema is loaded.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnSchemaLoaded(Dotmim.Sync.BaseOrchestrator,System.Func{Dotmim.Sync.SchemaLoadedArgs,System.Threading.Tasks.Task})">
            <summary>
            Intercept the provider when schema is loaded.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnSchemaLoading(Dotmim.Sync.BaseOrchestrator,System.Action{Dotmim.Sync.SchemaLoadingArgs})">
            <summary>
            Intercept the provider when schema is loading.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnSchemaLoading(Dotmim.Sync.BaseOrchestrator,System.Func{Dotmim.Sync.SchemaLoadingArgs,System.Threading.Tasks.Task})">
            <summary>
            Intercept the provider when schema is loading.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnScopeInfoTableCreating(Dotmim.Sync.BaseOrchestrator,System.Action{Dotmim.Sync.ScopeInfoTableCreatingArgs})">
            <summary>
            Intercept the provider action when a scope table is creating.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnScopeInfoTableCreating(Dotmim.Sync.BaseOrchestrator,System.Func{Dotmim.Sync.ScopeInfoTableCreatingArgs,System.Threading.Tasks.Task})">
            <summary>
            Intercept the provider action when a scope table is creating.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnScopeInfoTableCreated(Dotmim.Sync.BaseOrchestrator,System.Action{Dotmim.Sync.ScopeInfoTableCreatedArgs})">
            <summary>
            Intercept the provider action when a scope table is created.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnScopeInfoTableCreated(Dotmim.Sync.BaseOrchestrator,System.Func{Dotmim.Sync.ScopeInfoTableCreatedArgs,System.Threading.Tasks.Task})">
            <summary>
            Intercept the provider action when a scope table is created.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnScopeInfoTableDropping(Dotmim.Sync.BaseOrchestrator,System.Action{Dotmim.Sync.ScopeInfoTableDroppingArgs})">
            <summary>
            Intercept the provider action when a scope table is dropping.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnScopeInfoTableDropping(Dotmim.Sync.BaseOrchestrator,System.Func{Dotmim.Sync.ScopeInfoTableDroppingArgs,System.Threading.Tasks.Task})">
            <summary>
            Intercept the provider action when a scope table is dropping.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnScopeInfoTableDropped(Dotmim.Sync.BaseOrchestrator,System.Action{Dotmim.Sync.ScopeInfoTableDroppedArgs})">
            <summary>
            Intercept the provider action when a scope table is dropped.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnScopeInfoTableDropped(Dotmim.Sync.BaseOrchestrator,System.Func{Dotmim.Sync.ScopeInfoTableDroppedArgs,System.Threading.Tasks.Task})">
            <summary>
            Intercept the provider action when a scope table is dropped.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnScopeInfoLoading(Dotmim.Sync.BaseOrchestrator,System.Action{Dotmim.Sync.ScopeInfoLoadingArgs})">
            <summary>
            Intercept the provider action when a client scope is about to be loaded from client database.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnScopeInfoLoading(Dotmim.Sync.BaseOrchestrator,System.Func{Dotmim.Sync.ScopeInfoLoadingArgs,System.Threading.Tasks.Task})">
            <summary>
            Intercept the provider action when a client scope is about to be loaded from client database.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnScopeInfoLoaded(Dotmim.Sync.BaseOrchestrator,System.Action{Dotmim.Sync.ScopeInfoLoadedArgs})">
            <summary>
            Intercept the provider action when a scope is loaded from client or server database.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnScopeInfoLoaded(Dotmim.Sync.BaseOrchestrator,System.Func{Dotmim.Sync.ScopeInfoLoadedArgs,System.Threading.Tasks.Task})">
            <summary>
            Intercept the provider action when a scope is loaded from client or server database.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnScopeSaving(Dotmim.Sync.BaseOrchestrator,System.Action{Dotmim.Sync.ScopeInfoSavingArgs})">
            <summary>
            Intercept the provider action when a scope is saving.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnScopeSaving(Dotmim.Sync.BaseOrchestrator,System.Func{Dotmim.Sync.ScopeInfoSavingArgs,System.Threading.Tasks.Task})">
            <summary>
            Intercept the provider action when a scope is saving.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnScopeSaved(Dotmim.Sync.BaseOrchestrator,System.Action{Dotmim.Sync.ScopeInfoSavedArgs})">
            <summary>
            Intercept the provider action when a scope is saved.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnScopeSaved(Dotmim.Sync.BaseOrchestrator,System.Func{Dotmim.Sync.ScopeInfoSavedArgs,System.Threading.Tasks.Task})">
            <summary>
            Intercept the provider action when a scope is saved.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnSerializingSyncRow(Dotmim.Sync.BaseOrchestrator,System.Action{Dotmim.Sync.SerializingRowArgs})">
            <summary>
            Occurs just before serializing a SyncRow in a json stream.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnSerializingSyncRow(Dotmim.Sync.BaseOrchestrator,System.Func{Dotmim.Sync.SerializingRowArgs,System.Threading.Tasks.Task})">
            <summary>
            Occurs just before serializing a SyncRow in a json stream.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnDeserializingSyncRow(Dotmim.Sync.BaseOrchestrator,System.Action{Dotmim.Sync.DeserializingRowArgs})">
            <summary>
            Occurs just after loading a serialized SyncRow from a json stream.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnDeserializingSyncRow(Dotmim.Sync.BaseOrchestrator,System.Func{Dotmim.Sync.DeserializingRowArgs,System.Threading.Tasks.Task})">
            <summary>
            Occurs just after loading a serialized SyncRow from a json stream.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnConnectionOpen(Dotmim.Sync.BaseOrchestrator,System.Action{Dotmim.Sync.ConnectionOpenedArgs})">
            <summary>
            Intercept the provider action whenever a connection is opened.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnConnectionOpen(Dotmim.Sync.BaseOrchestrator,System.Func{Dotmim.Sync.ConnectionOpenedArgs,System.Threading.Tasks.Task})">
            <summary>
            Intercept the provider action whenever a connection is opened.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnReConnect(Dotmim.Sync.BaseOrchestrator,System.Action{Dotmim.Sync.ReConnectArgs})">
            <summary>
            Occurs when trying to reconnect to a database.
            <example>
            <code>
            localOrchestrator.OnReConnect(args => {
                Console.WriteLine($"[Retry] Can't connect to database {args.Connection?.Database}. " +
                $"Retry N°{args.Retry}. " +
                $"Waiting {args.WaitingTimeSpan.Milliseconds}. Exception:{args.HandledException.Message}.");
            });
            </code>
            </example>
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnReConnect(Dotmim.Sync.BaseOrchestrator,System.Func{Dotmim.Sync.ReConnectArgs,System.Threading.Tasks.Task})">
            <inheritdoc cref="M:Dotmim.Sync.InterceptorsExtensions.OnReConnect(Dotmim.Sync.BaseOrchestrator,System.Action{Dotmim.Sync.ReConnectArgs})"/>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnTransactionOpen(Dotmim.Sync.BaseOrchestrator,System.Action{Dotmim.Sync.TransactionOpenedArgs})">
            <summary>
            Intercept the provider action whenever a transaction is opened.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnTransactionOpen(Dotmim.Sync.BaseOrchestrator,System.Func{Dotmim.Sync.TransactionOpenedArgs,System.Threading.Tasks.Task})">
            <summary>
            Intercept the provider action whenever a transaction is opened.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnConnectionClose(Dotmim.Sync.BaseOrchestrator,System.Action{Dotmim.Sync.ConnectionClosedArgs})">
            <summary>
            Intercept the provider action whenever a connection is closed.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnConnectionClose(Dotmim.Sync.BaseOrchestrator,System.Func{Dotmim.Sync.ConnectionClosedArgs,System.Threading.Tasks.Task})">
            <summary>
            Intercept the provider action whenever a connection is closed.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnTransactionCommit(Dotmim.Sync.BaseOrchestrator,System.Action{Dotmim.Sync.TransactionCommitArgs})">
            <summary>
            Intercept the provider action whenever a transaction is commit.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnTransactionCommit(Dotmim.Sync.BaseOrchestrator,System.Func{Dotmim.Sync.TransactionCommitArgs,System.Threading.Tasks.Task})">
            <summary>
            Intercept the provider action whenever a transaction is commit.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnSessionBegin(Dotmim.Sync.BaseOrchestrator,System.Action{Dotmim.Sync.SessionBeginArgs})">
            <summary>
            Intercept the provider action when session begin is called.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnSessionBegin(Dotmim.Sync.BaseOrchestrator,System.Func{Dotmim.Sync.SessionBeginArgs,System.Threading.Tasks.Task})">
            <summary>
            Intercept the provider action when session begin is called.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnSessionEnd(Dotmim.Sync.BaseOrchestrator,System.Action{Dotmim.Sync.SessionEndArgs})">
            <summary>
            Intercept the provider action when session end is called.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnSessionEnd(Dotmim.Sync.BaseOrchestrator,System.Func{Dotmim.Sync.SessionEndArgs,System.Threading.Tasks.Task})">
            <summary>
            Intercept the provider action when session end is called.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnTransientErrorOccured(Dotmim.Sync.BaseOrchestrator,System.Action{Dotmim.Sync.TransientErrorOccuredArgs})">
            <summary>
            Intercept the provider action when a transient error is happening.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnTransientErrorOccured(Dotmim.Sync.BaseOrchestrator,System.Func{Dotmim.Sync.TransientErrorOccuredArgs,System.Threading.Tasks.Task})">
            <summary>
            Intercept the provider action when a transient error is happening.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnSnapshotCreating(Dotmim.Sync.BaseOrchestrator,System.Action{Dotmim.Sync.SnapshotCreatingArgs})">
            <summary>
            Intercept the orchestrator when creating a snapshot.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnSnapshotCreating(Dotmim.Sync.BaseOrchestrator,System.Func{Dotmim.Sync.SnapshotCreatingArgs,System.Threading.Tasks.Task})">
            <summary>
            Intercept the orchestrator when creating a snapshot.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnSnapshotCreated(Dotmim.Sync.BaseOrchestrator,System.Action{Dotmim.Sync.SnapshotCreatedArgs})">
            <summary>
            Intercept the orchestrator when a snapshot has been created.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnSnapshotCreated(Dotmim.Sync.BaseOrchestrator,System.Func{Dotmim.Sync.SnapshotCreatedArgs,System.Threading.Tasks.Task})">
            <summary>
            Intercept the orchestrator when a snapshot has been created.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnSnapshotApplying(Dotmim.Sync.BaseOrchestrator,System.Action{Dotmim.Sync.SnapshotApplyingArgs})">
            <summary>
            Intercept the orchestrator when applying a snapshot.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnSnapshotApplying(Dotmim.Sync.BaseOrchestrator,System.Func{Dotmim.Sync.SnapshotApplyingArgs,System.Threading.Tasks.Task})">
            <summary>
            Intercept the orchestrator when applying a snapshot.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnSnapshotApplied(Dotmim.Sync.BaseOrchestrator,System.Action{Dotmim.Sync.SnapshotAppliedArgs})">
            <summary>
            Intercept the orchestrator when a snapshot has been applied.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnSnapshotApplied(Dotmim.Sync.BaseOrchestrator,System.Func{Dotmim.Sync.SnapshotAppliedArgs,System.Threading.Tasks.Task})">
            <summary>
            Intercept the orchestrator when a snapshot has been applied.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnStoredProcedureCreating(Dotmim.Sync.BaseOrchestrator,System.Action{Dotmim.Sync.StoredProcedureCreatingArgs})">
            <summary>
            Intercept the provider when a Stored Procedure is creating.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnStoredProcedureCreating(Dotmim.Sync.BaseOrchestrator,System.Func{Dotmim.Sync.StoredProcedureCreatingArgs,System.Threading.Tasks.Task})">
            <summary>
            Intercept the provider when a Stored Procedure is creating.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnStoredProcedureCreated(Dotmim.Sync.BaseOrchestrator,System.Action{Dotmim.Sync.StoredProcedureCreatedArgs})">
            <summary>
            Intercept the provider when a Stored Procedure is created.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnStoredProcedureCreated(Dotmim.Sync.BaseOrchestrator,System.Func{Dotmim.Sync.StoredProcedureCreatedArgs,System.Threading.Tasks.Task})">
            <summary>
            Intercept the provider when a Stored Procedure is created.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnStoredProcedureDropping(Dotmim.Sync.BaseOrchestrator,System.Action{Dotmim.Sync.StoredProcedureDroppingArgs})">
            <summary>
            Intercept the provider when a Stored Procedure is dropping.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnStoredProcedureDropping(Dotmim.Sync.BaseOrchestrator,System.Func{Dotmim.Sync.StoredProcedureDroppingArgs,System.Threading.Tasks.Task})">
            <summary>
            Intercept the provider when a Stored Procedure is dropping.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnStoredProcedureDropped(Dotmim.Sync.BaseOrchestrator,System.Action{Dotmim.Sync.StoredProcedureDroppedArgs})">
            <summary>
            Intercept the provider when a Stored Procedure is dropped.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnStoredProcedureDropped(Dotmim.Sync.BaseOrchestrator,System.Func{Dotmim.Sync.StoredProcedureDroppedArgs,System.Threading.Tasks.Task})">
            <summary>
            Intercept the provider when a Stored Procedure is dropped.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnSchemaNameCreated(Dotmim.Sync.BaseOrchestrator,System.Action{Dotmim.Sync.SchemaNameCreatedArgs})">
            <summary>
            Intercept the provider when database schema is created (works only on SQL Server).
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnSchemaNameCreated(Dotmim.Sync.BaseOrchestrator,System.Func{Dotmim.Sync.SchemaNameCreatedArgs,System.Threading.Tasks.Task})">
            <summary>
            Intercept the provider when database schema is created (works only on SQL Server).
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnSchemaNameCreating(Dotmim.Sync.BaseOrchestrator,System.Action{Dotmim.Sync.SchemaNameCreatingArgs})">
            <summary>
            Intercept the provider when database schema is creating (works only on SQL Server).
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnSchemaNameCreating(Dotmim.Sync.BaseOrchestrator,System.Func{Dotmim.Sync.SchemaNameCreatingArgs,System.Threading.Tasks.Task})">
            <summary>
            Intercept the provider when database schema is creating (works only on SQL Server).
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnTableCreating(Dotmim.Sync.BaseOrchestrator,System.Action{Dotmim.Sync.TableCreatingArgs})">
            <summary>
            Intercept the provider when a table is creating.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnTableCreating(Dotmim.Sync.BaseOrchestrator,System.Func{Dotmim.Sync.TableCreatingArgs,System.Threading.Tasks.Task})">
            <summary>
            Intercept the provider when a table is creating.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnTableCreated(Dotmim.Sync.BaseOrchestrator,System.Action{Dotmim.Sync.TableCreatedArgs})">
            <summary>
            Intercept the provider when a table is created.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnTableCreated(Dotmim.Sync.BaseOrchestrator,System.Func{Dotmim.Sync.TableCreatedArgs,System.Threading.Tasks.Task})">
            <summary>
            Intercept the provider when a table is created.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnTableDropping(Dotmim.Sync.BaseOrchestrator,System.Action{Dotmim.Sync.TableDroppingArgs})">
            <summary>
            Intercept the provider when a table is dropping.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnTableDropping(Dotmim.Sync.BaseOrchestrator,System.Func{Dotmim.Sync.TableDroppingArgs,System.Threading.Tasks.Task})">
            <summary>
            Intercept the provider when a table is dropping.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnTableDropped(Dotmim.Sync.BaseOrchestrator,System.Action{Dotmim.Sync.TableDroppedArgs})">
            <summary>
            Intercept the provider when a table is dropped.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnTableDropped(Dotmim.Sync.BaseOrchestrator,System.Func{Dotmim.Sync.TableDroppedArgs,System.Threading.Tasks.Task})">
            <summary>
            Intercept the provider when a table is dropped.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnTableChangesApplying(Dotmim.Sync.BaseOrchestrator,System.Action{Dotmim.Sync.TableChangesApplyingArgs})">
             <summary>
             Occurs when a table is about to be applied on the local data source.
             <example>
             <code>
             localOrchestrator.OnTableChangesApplying(async args =>
             {
                 if (args.BatchPartInfos != null)
                 {
                     var syncTable = await localOrchestrator.LoadTableFromBatchInfoAsync(
                         args.BatchInfo, args.SchemaTable.ObjectName, args.SchemaTable.OwnerName, args.State);
            
                     if (syncTable != null "and" syncTable.HasRows)
                     {
                         Console.WriteLine($"Changes for table
                                 {args.SchemaTable.GetFullName()}. Rows:{syncTable.Rows.Count}");
                         foreach (var row in syncTable.Rows)
                             Console.WriteLine(row);
                     }
            
                 }
             });
             </code>
             </example>
             </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnTableChangesApplying(Dotmim.Sync.BaseOrchestrator,System.Func{Dotmim.Sync.TableChangesApplyingArgs,System.Threading.Tasks.Task})">
            <inheritdoc cref="M:Dotmim.Sync.InterceptorsExtensions.OnTableChangesApplying(Dotmim.Sync.BaseOrchestrator,System.Action{Dotmim.Sync.TableChangesApplyingArgs})"/>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnTableChangesApplied(Dotmim.Sync.BaseOrchestrator,System.Action{Dotmim.Sync.TableChangesAppliedArgs})">
            <summary>
            Intercept the provider action when a all changes have been applied on a datasource table.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnTableChangesApplied(Dotmim.Sync.BaseOrchestrator,System.Func{Dotmim.Sync.TableChangesAppliedArgs,System.Threading.Tasks.Task})">
            <summary>
            Intercept the provider action when a all changes have been applied on a datasource table.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnTableChangesSelecting(Dotmim.Sync.BaseOrchestrator,System.Action{Dotmim.Sync.TableChangesSelectingArgs})">
             <summary>
             Occurs when changes are going to be queried from the underline database for a particular table.
             <example>
             <code>
             var localOrchestrator = new LocalOrchestrator(clientProvider);
             localOrchestrator.OnTableChangesSelecting(args =>
             {
                 Console.WriteLine($"Getting changes from local database " +
                                   $"for table:{args.SchemaTable.GetFullName()}");
            
                 Console.WriteLine($"{args.Command.CommandText}");
             });
             </code>
             </example>
             </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnTableChangesSelecting(Dotmim.Sync.BaseOrchestrator,System.Func{Dotmim.Sync.TableChangesSelectingArgs,System.Threading.Tasks.Task})">
            <inheritdoc cref="M:Dotmim.Sync.InterceptorsExtensions.OnTableChangesSelecting(Dotmim.Sync.BaseOrchestrator,System.Action{Dotmim.Sync.TableChangesSelectingArgs})"/>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnTableChangesSelected(Dotmim.Sync.BaseOrchestrator,System.Action{Dotmim.Sync.TableChangesSelectedArgs})">
            <summary>
            Occurs once a table is fully read during the get changes step. rows are already serialized on disk.
            <example>
            <code>
            localOrchestrator.OnTableChangesSelected(args =>
            {
              Console.WriteLine($"Table: {args.SchemaTable.GetFullName()} read. Rows count:{args.BatchInfo.RowsCount}.");
              Console.WriteLine($"Directory: {args.BatchInfo.DirectoryName}. Number of files: {args.BatchPartInfos?.Count()} ");
              Console.WriteLine($"Changes: {args.TableChangesSelected.TotalChanges} ({args.TableChangesSelected.Upserts}/{args.TableChangesSelected.Deletes})");
            });
            </code>
            </example>
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnTableChangesSelected(Dotmim.Sync.BaseOrchestrator,System.Func{Dotmim.Sync.TableChangesSelectedArgs,System.Threading.Tasks.Task})">
            <inheritdoc cref="M:Dotmim.Sync.InterceptorsExtensions.OnTableChangesSelected(Dotmim.Sync.BaseOrchestrator,System.Action{Dotmim.Sync.TableChangesSelectedArgs})"/>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnTableResetApplied(Dotmim.Sync.BaseOrchestrator,System.Action{Dotmim.Sync.TableChangesAppliedArgs})">
            <summary>
            Intercept the provider action when a table is reset due to Reinitialize call.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnTableResetApplied(Dotmim.Sync.BaseOrchestrator,System.Func{Dotmim.Sync.TableChangesAppliedArgs,System.Threading.Tasks.Task})">
            <summary>
            Intercept the provider action when a table is reset due to Reinitialize call.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnTrackingTableCreating(Dotmim.Sync.BaseOrchestrator,System.Action{Dotmim.Sync.TrackingTableCreatingArgs})">
            <summary>
            Intercept the provider when a tracking table is creating.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnTrackingTableCreating(Dotmim.Sync.BaseOrchestrator,System.Func{Dotmim.Sync.TrackingTableCreatingArgs,System.Threading.Tasks.Task})">
            <summary>
            Intercept the provider when a tracking table is creating.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnTrackingTableCreated(Dotmim.Sync.BaseOrchestrator,System.Action{Dotmim.Sync.TrackingTableCreatedArgs})">
            <summary>
            Intercept the provider when a tracking table is creating.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnTrackingTableCreated(Dotmim.Sync.BaseOrchestrator,System.Func{Dotmim.Sync.TrackingTableCreatedArgs,System.Threading.Tasks.Task})">
            <summary>
            Intercept the provider when a tracking table is creating.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnTrackingTableDropping(Dotmim.Sync.BaseOrchestrator,System.Action{Dotmim.Sync.TrackingTableDroppingArgs})">
            <summary>
            Intercept the provider when a tracking table is dropping.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnTrackingTableDropping(Dotmim.Sync.BaseOrchestrator,System.Func{Dotmim.Sync.TrackingTableDroppingArgs,System.Threading.Tasks.Task})">
            <summary>
            Intercept the provider when a tracking table is dropping.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnTrackingTableDropped(Dotmim.Sync.BaseOrchestrator,System.Action{Dotmim.Sync.TrackingTableDroppedArgs})">
            <summary>
            Intercept the provider when a tracking table is dropped.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnTrackingTableDropped(Dotmim.Sync.BaseOrchestrator,System.Func{Dotmim.Sync.TrackingTableDroppedArgs,System.Threading.Tasks.Task})">
            <summary>
            Intercept the provider when a tracking table is dropped.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnTriggerCreating(Dotmim.Sync.BaseOrchestrator,System.Action{Dotmim.Sync.TriggerCreatingArgs})">
            <summary>
            Intercept the provider when a trigger is creating.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnTriggerCreating(Dotmim.Sync.BaseOrchestrator,System.Func{Dotmim.Sync.TriggerCreatingArgs,System.Threading.Tasks.Task})">
            <summary>
            Intercept the provider when a trigger is creating.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnTriggerCreated(Dotmim.Sync.BaseOrchestrator,System.Action{Dotmim.Sync.TriggerCreatedArgs})">
            <summary>
            Intercept the provider when a trigger is created.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnTriggerCreated(Dotmim.Sync.BaseOrchestrator,System.Func{Dotmim.Sync.TriggerCreatedArgs,System.Threading.Tasks.Task})">
            <summary>
            Intercept the provider when a trigger is created.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnTriggerDropping(Dotmim.Sync.BaseOrchestrator,System.Action{Dotmim.Sync.TriggerDroppingArgs})">
            <summary>
            Intercept the provider when a trigger is dropping.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnTriggerDropping(Dotmim.Sync.BaseOrchestrator,System.Func{Dotmim.Sync.TriggerDroppingArgs,System.Threading.Tasks.Task})">
            <summary>
            Intercept the provider when a trigger is dropping.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnTriggerDropped(Dotmim.Sync.BaseOrchestrator,System.Action{Dotmim.Sync.TriggerDroppedArgs})">
            <summary>
            Intercept the provider when a trigger is dropped.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorsExtensions.OnTriggerDropped(Dotmim.Sync.BaseOrchestrator,System.Func{Dotmim.Sync.TriggerDroppedArgs,System.Threading.Tasks.Task})">
            <summary>
            Intercept the provider when a trigger is dropped.
            </summary>
        </member>
        <member name="T:Dotmim.Sync.ApplyChangesErrorOccuredArgs">
            <summary>
            Argument used during OnApplyChangesErrorOccured() interceptor. You need to provide a Resolution (<see cref="T:Dotmim.Sync.Enumerations.ErrorResolution" /> enumeration).
            </summary>
        </member>
        <member name="M:Dotmim.Sync.ApplyChangesErrorOccuredArgs.#ctor(Dotmim.Sync.SyncContext,Dotmim.Sync.SyncRow,Dotmim.Sync.SyncTable,Dotmim.Sync.Enumerations.SyncRowState,System.Exception,Dotmim.Sync.Enumerations.ErrorResolution,System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <inheritdoc cref="T:Dotmim.Sync.ApplyChangesErrorOccuredArgs" />
        </member>
        <member name="P:Dotmim.Sync.ApplyChangesErrorOccuredArgs.ErrorRow">
            <summary>
            Gets the current row that has failed to applied.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.ApplyChangesErrorOccuredArgs.SchemaTable">
            <summary>
            Gets the error row schema table.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.ApplyChangesErrorOccuredArgs.ApplyType">
            <summary>
            Gets the type of apply command (Upsert / Delete).
            </summary>
        </member>
        <member name="P:Dotmim.Sync.ApplyChangesErrorOccuredArgs.Exception">
            <summary>
            Gets the current exception.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.ApplyChangesErrorOccuredArgs.Resolution">
            <summary>
            Gets or Sets the resolution fo the current error.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.ApplyChangesErrorOccuredArgs.ProgressLevel">
            <summary>
            Gets the overall progress.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.ApplyChangesErrorOccuredArgs.Message">
            <summary>
            Gets the error message.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.ApplyChangesErrorOccuredArgs.EventId">
            <summary>
            Gets the unique event id.
            </summary>
        </member>
        <member name="T:Dotmim.Sync.BatchChangesAppliedArgs">
            <summary>
            Event args raised when all changes from a batch, for a particular table, have been applied on a datasource.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BatchChangesAppliedArgs.#ctor(Dotmim.Sync.SyncContext,Dotmim.Sync.Batch.BatchInfo,Dotmim.Sync.Batch.BatchPartInfo,Dotmim.Sync.SyncTable,Dotmim.Sync.Enumerations.SyncRowState,System.Data.Common.DbCommand,System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <inheritdoc cref="T:Dotmim.Sync.BatchChangesAppliedArgs" />
        </member>
        <member name="P:Dotmim.Sync.BatchChangesAppliedArgs.ProgressLevel">
            <summary>
            Gets the progress level info : SyncProgressLevel.Information if this.BatchPartInfo.RowsCount > 0 else SyncProgressLevel.Debug.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.BatchChangesAppliedArgs.State">
            <summary>
            Gets the row state.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.BatchChangesAppliedArgs.Command">
            <summary>
            Gets or sets the command used to apply the batch changes.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.BatchChangesAppliedArgs.BatchInfo">
            <summary>
            Gets or sets the batch info.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.BatchChangesAppliedArgs.BatchPartInfo">
            <summary>
            Gets the batch part info.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.BatchChangesAppliedArgs.SchemaTable">
            <summary>
            Gets the table schema.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.BatchChangesAppliedArgs.Message">
            <inheritdoc cref="P:Dotmim.Sync.ProgressArgs.Message"/>
        </member>
        <member name="P:Dotmim.Sync.BatchChangesAppliedArgs.EventId">
            <inheritdoc cref="P:Dotmim.Sync.ProgressArgs.EventId"/>
        </member>
        <member name="T:Dotmim.Sync.BatchChangesApplyingArgs">
            <summary>
            Event args before a table changes from a batch, for a particular table, is going to be applied on a datasource.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BatchChangesApplyingArgs.#ctor(Dotmim.Sync.SyncContext,Dotmim.Sync.Batch.BatchInfo,Dotmim.Sync.Batch.BatchPartInfo,Dotmim.Sync.SyncTable,Dotmim.Sync.Enumerations.SyncRowState,System.Data.Common.DbCommand,System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <inheritdoc cref="T:Dotmim.Sync.BatchChangesApplyingArgs" />
        </member>
        <member name="P:Dotmim.Sync.BatchChangesApplyingArgs.Cancel">
            <summary>
            Gets or sets a value indicating whether gets or sets if the current batch changes applying should be canceled.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.BatchChangesApplyingArgs.ProgressLevel">
            <inheritdoc cref="P:Dotmim.Sync.ProgressArgs.ProgressLevel"/>
        </member>
        <member name="P:Dotmim.Sync.BatchChangesApplyingArgs.State">
            <summary>
            Gets the row state.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.BatchChangesApplyingArgs.Command">
            <summary>
            Gets or sets the command used to apply the batch changes.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.BatchChangesApplyingArgs.BatchInfo">
            <summary>
            Gets or sets the batch info.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.BatchChangesApplyingArgs.BatchPartInfo">
            <summary>
            Gets the batch part info.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.BatchChangesApplyingArgs.SchemaTable">
            <summary>
            Gets the table schema.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.BatchChangesApplyingArgs.Message">
            <inheritdoc cref="P:Dotmim.Sync.ProgressArgs.Message"/>
        </member>
        <member name="P:Dotmim.Sync.BatchChangesApplyingArgs.EventId">
            <inheritdoc cref="P:Dotmim.Sync.ProgressArgs.EventId"/>
        </member>
        <member name="T:Dotmim.Sync.BatchChangesCreatedArgs">
            <summary>
            Event args raised when a batch file is created and serialized locally, for a particular table.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BatchChangesCreatedArgs.#ctor(Dotmim.Sync.SyncContext,Dotmim.Sync.Batch.BatchPartInfo,Dotmim.Sync.SyncTable,Dotmim.Sync.TableChangesSelected,Dotmim.Sync.Enumerations.SyncRowState,System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <inheritdoc cref="T:Dotmim.Sync.BatchChangesCreatedArgs"/>
        </member>
        <member name="P:Dotmim.Sync.BatchChangesCreatedArgs.ProgressLevel">
            <summary>
            Gets the progress level info : SyncProgressLevel.Information if this.BatchPartInfo.RowsCount > 0 else SyncProgressLevel.Debug.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.BatchChangesCreatedArgs.State">
            <summary>
            Gets the row state.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.BatchChangesCreatedArgs.Command">
            <summary>
            Gets or sets the command used to apply the batch changes.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.BatchChangesCreatedArgs.BatchInfo">
            <summary>
            Gets or sets the batch info.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.BatchChangesCreatedArgs.BatchPartInfo">
            <summary>
            Gets the batch part info.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.BatchChangesCreatedArgs.TableChangesSelected">
            <summary>
            Gets the table changes selected.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.BatchChangesCreatedArgs.SchemaTable">
            <summary>
            Gets the table schema.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.BatchChangesCreatedArgs.Message">
            <inheritdoc cref="P:Dotmim.Sync.ProgressArgs.Message"/>
        </member>
        <member name="P:Dotmim.Sync.BatchChangesCreatedArgs.EventId">
            <inheritdoc cref="P:Dotmim.Sync.ProgressArgs.EventId"/>
        </member>
        <member name="T:Dotmim.Sync.ConflictingSetupArgs">
            <summary>
            Event args raised when a conflicting setup between server and one client is occuring.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.ConflictingSetupArgs.#ctor(Dotmim.Sync.SyncContext,Dotmim.Sync.SyncSetup,Dotmim.Sync.ScopeInfo,Dotmim.Sync.ScopeInfo,System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <inheritdoc cref="T:Dotmim.Sync.ConflictingSetupArgs"/>
        </member>
        <member name="P:Dotmim.Sync.ConflictingSetupArgs.Action">
            <summary>
            Gets or sets an action enumeration value for the action to handle the Conflicting Setups.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.ConflictingSetupArgs.ProgressLevel">
            <inheritdoc cref="P:Dotmim.Sync.ProgressArgs.ProgressLevel"/>
        </member>
        <member name="P:Dotmim.Sync.ConflictingSetupArgs.Message">
            <inheritdoc cref="P:Dotmim.Sync.ProgressArgs.Message"/>
        </member>
        <member name="P:Dotmim.Sync.ConflictingSetupArgs.Setup">
            <summary>
            Gets or sets the Setup provided from the SynchronizeAsync() method. May be null.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.ConflictingSetupArgs.ClientScopeInfo">
            <summary>
            Gets or Sets the client scope info used to check if the client is conflicting.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.ConflictingSetupArgs.ServerScopeInfo">
            <summary>
            Gets or sets the server scope info to check if client is conflicting.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.ConflictingSetupArgs.EventId">
            <inheritdoc cref="P:Dotmim.Sync.ProgressArgs.EventId"/>
        </member>
        <member name="T:Dotmim.Sync.ConflictingSetupAction">
            <summary>
            When a conflict is happening, you can choose to continue, abort or rollback the sync process.
            </summary>
        </member>
        <member name="F:Dotmim.Sync.ConflictingSetupAction.Abort">
            <summary>
            Abort the sync without raising any Error.
            </summary>
        </member>
        <member name="F:Dotmim.Sync.ConflictingSetupAction.Continue">
            <summary>
            Continue the sync process. ClientScopeInfo.Setup / Schema and ServerScopeInfo.Setup / Schema must be equals.
            </summary>
        </member>
        <member name="F:Dotmim.Sync.ConflictingSetupAction.Rollback">
            <summary>
            Rollback the sync, raising an error.
            </summary>
        </member>
        <member name="T:Dotmim.Sync.DatabaseChangesSelectingArgs">
            <summary>
            Event args generated before getting changes on the target database.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.DatabaseChangesSelectingArgs.#ctor(Dotmim.Sync.SyncContext,System.String,System.Int32,System.Boolean,System.Nullable{System.Int64},System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <inheritdoc cref="T:Dotmim.Sync.DatabaseChangesSelectingArgs"/>
        </member>
        <member name="P:Dotmim.Sync.DatabaseChangesSelectingArgs.BatchDirectory">
            <summary>
            Gets the batch directory where the changes will be stored.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.DatabaseChangesSelectingArgs.BatchSize">
            <summary>
            Gets the batch size.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.DatabaseChangesSelectingArgs.IsNew">
            <summary>
            Gets a value indicating whether the current sync is a new sync or a reinit sync.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.DatabaseChangesSelectingArgs.FromTimestamp">
            <summary>
            Gets the last timestamp from the last sync.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.DatabaseChangesSelectingArgs.ProgressLevel">
            <inheritdoc cref="P:Dotmim.Sync.ProgressArgs.ProgressLevel"/>
        </member>
        <member name="P:Dotmim.Sync.DatabaseChangesSelectingArgs.Message">
            <inheritdoc cref="P:Dotmim.Sync.ProgressArgs.Message"/>
        </member>
        <member name="P:Dotmim.Sync.DatabaseChangesSelectingArgs.EventId">
            <inheritdoc cref="P:Dotmim.Sync.ProgressArgs.EventId"/>
        </member>
        <member name="T:Dotmim.Sync.DatabaseChangesSelectedArgs">
            <summary>
            Event args generated before after getting changes on the target database.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.DatabaseChangesSelectedArgs.#ctor(Dotmim.Sync.SyncContext,System.Nullable{System.Int64},Dotmim.Sync.Batch.BatchInfo,Dotmim.Sync.DatabaseChangesSelected,System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <inheritdoc cref="T:Dotmim.Sync.DatabaseChangesSelectedArgs"/>
        </member>
        <member name="P:Dotmim.Sync.DatabaseChangesSelectedArgs.ProgressLevel">
            <inheritdoc cref="P:Dotmim.Sync.ProgressArgs.ProgressLevel"/>/>
        </member>
        <member name="P:Dotmim.Sync.DatabaseChangesSelectedArgs.FromTimestamp">
            <summary>
            Gets the last timestamp from the caller.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.DatabaseChangesSelectedArgs.Message">
            <inheritdoc cref="P:Dotmim.Sync.ProgressArgs.Message"/>
        </member>
        <member name="P:Dotmim.Sync.DatabaseChangesSelectedArgs.BatchInfo">
            <summary>
            Gets get the batch info. Always null when raised from a call from GetEstimatedChangesCount.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.DatabaseChangesSelectedArgs.ChangesSelected">
            <summary>
            Gets the changes selected.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.DatabaseChangesSelectedArgs.EventId">
            <inheritdoc cref="P:Dotmim.Sync.ProgressArgs.EventId"/>
        </member>
        <member name="T:Dotmim.Sync.DatabaseChangesApplyingArgs">
            <summary>
            Event args generated before applying change on the target database.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.DatabaseChangesApplyingArgs.#ctor(Dotmim.Sync.SyncContext,Dotmim.Sync.MessageApplyChanges,System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <inheritdoc cref="T:Dotmim.Sync.DatabaseChangesApplyingArgs"/>
        </member>
        <member name="P:Dotmim.Sync.DatabaseChangesApplyingArgs.Message">
            <inheritdoc cref="P:Dotmim.Sync.ProgressArgs.Message"/>
        </member>
        <member name="P:Dotmim.Sync.DatabaseChangesApplyingArgs.ApplyChanges">
            <summary>
            Gets all parameters that will be used to apply changes.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.DatabaseChangesApplyingArgs.ProgressLevel">
            <inheritdoc cref="P:Dotmim.Sync.ProgressArgs.ProgressLevel"/>
        </member>
        <member name="P:Dotmim.Sync.DatabaseChangesApplyingArgs.EventId">
            <inheritdoc cref="P:Dotmim.Sync.ProgressArgs.EventId"/>
        </member>
        <member name="T:Dotmim.Sync.DatabaseChangesAppliedArgs">
            <summary>
            Event args generated after changes applied.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.DatabaseChangesAppliedArgs.#ctor(Dotmim.Sync.SyncContext,Dotmim.Sync.DatabaseChangesApplied,System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <inheritdoc cref="T:Dotmim.Sync.DatabaseChangesAppliedArgs"/>
        </member>
        <member name="P:Dotmim.Sync.DatabaseChangesAppliedArgs.ChangesApplied">
            <summary>
            Gets the changes applied.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.DatabaseChangesAppliedArgs.ProgressLevel">
            <inheritdoc cref="P:Dotmim.Sync.ProgressArgs.ProgressLevel"/>
        </member>
        <member name="P:Dotmim.Sync.DatabaseChangesAppliedArgs.Message">
            <inheritdoc cref="P:Dotmim.Sync.ProgressArgs.Message"/>
        </member>
        <member name="P:Dotmim.Sync.DatabaseChangesAppliedArgs.EventId">
            <inheritdoc cref="P:Dotmim.Sync.ProgressArgs.EventId"/>
        </member>
        <member name="T:Dotmim.Sync.GetCommandArgs">
            <summary>
            Event args generated after a command has been retrieved from a provider.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.GetCommandArgs.#ctor(Dotmim.Sync.ScopeInfo,Dotmim.Sync.SyncContext,System.Data.Common.DbCommand,System.Boolean,Dotmim.Sync.SyncTable,Dotmim.Sync.Builders.DbCommandType,System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <inheritdoc cref="T:Dotmim.Sync.GetCommandArgs"/>
        </member>
        <member name="P:Dotmim.Sync.GetCommandArgs.ScopeInfo">
            <summary>
            Gets the scope info.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.GetCommandArgs.Command">
            <summary>
            Gets or sets the command to be executed.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.GetCommandArgs.IsBatch">
            <summary>
            Gets or sets a value indicating whether the command is a batch command.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.GetCommandArgs.Table">
            <summary>
            Gets the table.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.GetCommandArgs.CommandType">
            <summary>
            Gets the command type to be executed.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.GetCommandArgs.ProgressLevel">
            <inheritdoc cref="P:Dotmim.Sync.ProgressArgs.ProgressLevel"/>
        </member>
        <member name="P:Dotmim.Sync.GetCommandArgs.Message">
            <inheritdoc cref="P:Dotmim.Sync.ProgressArgs.Message"/>
        </member>
        <member name="P:Dotmim.Sync.GetCommandArgs.EventId">
            <inheritdoc cref="P:Dotmim.Sync.ProgressArgs.EventId"/>
        </member>
        <member name="T:Dotmim.Sync.ExecuteCommandArgs">
            <summary>
            Event args generated before a command is executed.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.ExecuteCommandArgs.#ctor(Dotmim.Sync.SyncContext,System.Data.Common.DbCommand,Dotmim.Sync.Builders.DbCommandType,System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <inheritdoc cref="T:Dotmim.Sync.ExecuteCommandArgs"/>
        </member>
        <member name="P:Dotmim.Sync.ExecuteCommandArgs.Command">
            <summary>
            Gets the command to be executed.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.ExecuteCommandArgs.CommandType">
            <summary>
            Gets the command type to be executed.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.ExecuteCommandArgs.ProgressLevel">
            <inheritdoc cref="P:Dotmim.Sync.ProgressArgs.ProgressLevel"/>
        </member>
        <member name="P:Dotmim.Sync.ExecuteCommandArgs.Message">
            <inheritdoc cref="P:Dotmim.Sync.ProgressArgs.Message"/>
        </member>
        <member name="P:Dotmim.Sync.ExecuteCommandArgs.EventId">
            <inheritdoc cref="P:Dotmim.Sync.ProgressArgs.EventId"/>
        </member>
        <member name="T:Dotmim.Sync.DropAllArgs">
            <summary>
            Event args raised before a DropAll is performed.
            When you want to drop ALSO the tables, you need to confirm it.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.DropAllArgs.#ctor(Dotmim.Sync.SyncContext,System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <inheritdoc cref="T:Dotmim.Sync.DropAllArgs" />
        </member>
        <member name="P:Dotmim.Sync.DropAllArgs.ConfirmYouWantToDeleteTables">
            <summary>
            Gets or Sets the confirmation function to confirm you want to delete all tables.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.DropAllArgs.Confirm">
            <summary>
            Return true if you want to delete all tables.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.DropAllArgs.EventId">
            <inheritdoc cref="P:Dotmim.Sync.ProgressArgs.EventId"/>
        </member>
        <member name="T:Dotmim.Sync.LocalTimestampLoadingArgs">
            <summary>
            Event args raised when you are getting the local timestamp from the current provider.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.LocalTimestampLoadingArgs.#ctor(Dotmim.Sync.SyncContext,System.Data.Common.DbCommand,System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <inheritdoc cref="T:Dotmim.Sync.LocalTimestampLoadingArgs"/>
        </member>
        <member name="P:Dotmim.Sync.LocalTimestampLoadingArgs.Cancel">
            <summary>
            Gets or sets a value indicating whether the operation should be canceled.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.LocalTimestampLoadingArgs.Command">
            <summary>
            Gets or sets the command to be executed to get the local timestamp from the current provider.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.LocalTimestampLoadingArgs.ProgressLevel">
            <inheritdoc cref="P:Dotmim.Sync.ProgressArgs.ProgressLevel"/>
        </member>
        <member name="P:Dotmim.Sync.LocalTimestampLoadingArgs.Message">
            <inheritdoc cref="P:Dotmim.Sync.ProgressArgs.Message"/>/>
        </member>
        <member name="P:Dotmim.Sync.LocalTimestampLoadingArgs.EventId">
            <inheritdoc cref="P:Dotmim.Sync.ProgressArgs.EventId"/>
        </member>
        <member name="T:Dotmim.Sync.LocalTimestampLoadedArgs">
            <summary>
            Event args raised when the local timestamp has been loaded from the current provider.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.LocalTimestampLoadedArgs.#ctor(Dotmim.Sync.SyncContext,System.Int64,System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <inheritdoc cref="T:Dotmim.Sync.LocalTimestampLoadedArgs"/>
        </member>
        <member name="P:Dotmim.Sync.LocalTimestampLoadedArgs.LocalTimestamp">
            <summary>
            Gets the local timestamp loaded from the current provider.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.LocalTimestampLoadedArgs.ProgressLevel">
            <inheritdoc cref="P:Dotmim.Sync.ProgressArgs.ProgressLevel"/>
        </member>
        <member name="P:Dotmim.Sync.LocalTimestampLoadedArgs.Message">
            <inheritdoc cref="P:Dotmim.Sync.ProgressArgs.Message"/>/>
        </member>
        <member name="P:Dotmim.Sync.LocalTimestampLoadedArgs.EventId">
            <inheritdoc cref="P:Dotmim.Sync.ProgressArgs.EventId"/>
        </member>
        <member name="T:Dotmim.Sync.MetadataCleaningArgs">
            <summary>
            Raised as an argument when a provider is about to cleanup metadata.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.MetadataCleaningArgs.#ctor(Dotmim.Sync.SyncContext,System.Collections.Generic.IEnumerable{Dotmim.Sync.ScopeInfo},System.Int64,System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <inheritdoc cref="T:Dotmim.Sync.MetadataCleaningArgs"/>
        </member>
        <member name="P:Dotmim.Sync.MetadataCleaningArgs.ScopeInfos">
            <summary>
            Gets the scope infos to be cleaned.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.MetadataCleaningArgs.TimeStampStart">
            <summary>
            Gets the lower timestamp limit to clean metadata.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.MetadataCleaningArgs.Message">
            <inheritdoc cref="P:Dotmim.Sync.ProgressArgs.Message"/>
        </member>
        <member name="P:Dotmim.Sync.MetadataCleaningArgs.ProgressLevel">
            <inheritdoc cref="P:Dotmim.Sync.ProgressArgs.ProgressLevel"/>
        </member>
        <member name="P:Dotmim.Sync.MetadataCleaningArgs.EventId">
            <inheritdoc cref="P:Dotmim.Sync.ProgressArgs.EventId"/>
        </member>
        <member name="T:Dotmim.Sync.MetadataCleanedArgs">
            <summary>
            Raised as an argument when a provider has cleaned metadata.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.MetadataCleanedArgs.#ctor(Dotmim.Sync.SyncContext,Dotmim.Sync.DatabaseMetadatasCleaned,System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <inheritdoc cref="T:Dotmim.Sync.MetadataCleanedArgs"/>
        </member>
        <member name="P:Dotmim.Sync.MetadataCleanedArgs.DatabaseMetadatasCleaned">
            <summary>
            Gets or Sets the rows count cleaned for all tables, during a DeleteMetadatasAsync call.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.MetadataCleanedArgs.ProgressLevel">
            <inheritdoc cref="P:Dotmim.Sync.ProgressArgs.ProgressLevel"/>
        </member>
        <member name="P:Dotmim.Sync.MetadataCleanedArgs.Message">
            <inheritdoc cref="P:Dotmim.Sync.ProgressArgs.Message"/>
        </member>
        <member name="P:Dotmim.Sync.MetadataCleanedArgs.EventId">
            <inheritdoc cref="P:Dotmim.Sync.ProgressArgs.EventId"/>
        </member>
        <member name="T:Dotmim.Sync.OperationArgs">
            <summary>
            Raised before a sync operation is done. Can override the whole processus, depending on the <see cref="T:Dotmim.Sync.Enumerations.SyncOperation"/> argument.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.OperationArgs.#ctor(Dotmim.Sync.SyncContext,Dotmim.Sync.ScopeInfo,Dotmim.Sync.ScopeInfo,Dotmim.Sync.ScopeInfoClient,System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <inheritdoc cref="T:Dotmim.Sync.OperationArgs"/>
        </member>
        <member name="P:Dotmim.Sync.OperationArgs.Operation">
            <summary>
            Gets or sets the operation to be done.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.OperationArgs.ScopeInfoFromServer">
            <summary>
            Gets the scope info from the server.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.OperationArgs.ScopeInfoFromClient">
            <summary>
            Gets the scope info from the client.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.OperationArgs.ScopeInfoClient">
            <summary>
            Gets the client scope info.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.OperationArgs.ProgressLevel">
            <inheritdoc cref="P:Dotmim.Sync.ProgressArgs.ProgressLevel"/>
        </member>
        <member name="P:Dotmim.Sync.OperationArgs.Message">
            <inheritdoc cref="P:Dotmim.Sync.ProgressArgs.Message"/>
        </member>
        <member name="P:Dotmim.Sync.OperationArgs.EventId">
            <inheritdoc cref="P:Dotmim.Sync.ProgressArgs.EventId"/>
        </member>
        <member name="T:Dotmim.Sync.OutdatedArgs">
            <summary>
            Event args raised when a database is outdated. Always happens on the client side.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.OutdatedArgs.#ctor(Dotmim.Sync.SyncContext,Dotmim.Sync.ScopeInfoClient,Dotmim.Sync.ScopeInfo,System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <inheritdoc cref="T:Dotmim.Sync.OutdatedArgs" />
        </member>
        <member name="P:Dotmim.Sync.OutdatedArgs.Action">
            <summary>
            Gets or sets an action enumeration value for the action to handle the outdated peer.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.OutdatedArgs.ScopeInfoClientFromClient">
            <summary>
            Gets the client scope info used to check if the client is outdated.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.OutdatedArgs.ScopeInfoFromServer">
            <summary>
            Gets the server scope info to check if client is outdated.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.OutdatedArgs.ProgressLevel">
            <inheritdoc cref="P:Dotmim.Sync.ProgressArgs.ProgressLevel" />
        </member>
        <member name="P:Dotmim.Sync.OutdatedArgs.Message">
            <inheritdoc cref="P:Dotmim.Sync.ProgressArgs.Message" />
        </member>
        <member name="P:Dotmim.Sync.OutdatedArgs.EventId">
            <inheritdoc cref="P:Dotmim.Sync.ProgressArgs.EventId" />
        </member>
        <member name="T:Dotmim.Sync.OutdatedAction">
            <summary>
            Outdated action enumeration.
            </summary>
        </member>
        <member name="F:Dotmim.Sync.OutdatedAction.Reinitialize">
            <summary>
            Reinitialize the whole sync database, applying all rows from the server to the client.
            </summary>
        </member>
        <member name="F:Dotmim.Sync.OutdatedAction.ReinitializeWithUpload">
            <summary>
            Reinitialize the whole sync database, applying all rows from the server to the client, after trying a client upload.
            </summary>
        </member>
        <member name="F:Dotmim.Sync.OutdatedAction.Rollback">
            <summary>
            Rollback the synchronization request.
            </summary>
        </member>
        <member name="T:Dotmim.Sync.ProgressArgs">
            <summary>
            Progress args raised during the sync process.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.ProgressArgs.Connection">
            <summary>
            Gets current connection used.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.ProgressArgs.Transaction">
            <summary>
            Gets current transaction used for the sync.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.ProgressArgs.Context">
            <summary>
            Gets the current context.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.ProgressArgs.ProgressLevel">
            <summary>
            Gets the Progress Level of information raised during the OnProgres event.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.ProgressArgs.Hint">
            <summary>
            Gets or Sets an arbitrary args you can use for you own purpose.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.ProgressArgs.#ctor(Dotmim.Sync.SyncContext,System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <summary>
            Initializes a new instance of the <see cref="T:Dotmim.Sync.ProgressArgs"/> class.
            Constructor.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.ProgressArgs.#ctor(Dotmim.Sync.SyncContext,System.Data.Common.DbConnection)">
            <summary>
            Initializes a new instance of the <see cref="T:Dotmim.Sync.ProgressArgs"/> class.
            Constructor.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.ProgressArgs.TypeName">
            <summary>
            Gets the args type.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.ProgressArgs.Message">
            <summary>
            Gets return a global message about current progress.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.ProgressArgs.Source">
            <summary>
            Gets return the progress initiator source.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.ProgressArgs.EventId">
            <summary>
            Gets or sets the event id, used for logging purpose.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.ProgressArgs.ProgressPercentage">
            <summary>
            Gets the overall percentage progress.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.ProgressArgs.ToString">
            <summary>
            Gets the Message property if any.
            </summary>
        </member>
        <member name="T:Dotmim.Sync.ProvisionedArgs">
            <summary>
            Event args generated after a database has been provisioned.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.ProvisionedArgs.#ctor(Dotmim.Sync.SyncContext,Dotmim.Sync.Enumerations.SyncProvision,Dotmim.Sync.ScopeInfo,System.Boolean,System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <inheritdoc cref="T:Dotmim.Sync.ProvisionedArgs"/>
        </member>
        <member name="P:Dotmim.Sync.ProvisionedArgs.Provision">
            <summary>
            Gets the provision type (Flag enum).
            </summary>
        </member>
        <member name="P:Dotmim.Sync.ProvisionedArgs.ScopeInfo">
            <summary>
            Gets the scope info used to provision the database.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.ProvisionedArgs.ProgressLevel">
            <inheritdoc cref="P:Dotmim.Sync.ProgressArgs.ProgressLevel"/>
        </member>
        <member name="P:Dotmim.Sync.ProvisionedArgs.Message">
            <inheritdoc cref="P:Dotmim.Sync.ProgressArgs.Message"/>
        </member>
        <member name="P:Dotmim.Sync.ProvisionedArgs.EventId">
            <inheritdoc cref="P:Dotmim.Sync.ProgressArgs.EventId"/>
        </member>
        <member name="T:Dotmim.Sync.ProvisioningArgs">
            <summary>
            Event args generated before a database is provisioned.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.ProvisioningArgs.#ctor(Dotmim.Sync.SyncContext,Dotmim.Sync.Enumerations.SyncProvision,Dotmim.Sync.ScopeInfo,System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <inheritdoc cref="T:Dotmim.Sync.ProvisioningArgs"/>
        </member>
        <member name="P:Dotmim.Sync.ProvisioningArgs.Provision">
            <summary>
            Gets get the provision type (Flag enum).
            </summary>
        </member>
        <member name="P:Dotmim.Sync.ProvisioningArgs.ScopeInfo">
            <summary>
            Gets the scope info used to provision the database.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.ProvisioningArgs.ProgressLevel">
            <inheritdoc cref="P:Dotmim.Sync.ProgressArgs.ProgressLevel"/>
        </member>
        <member name="P:Dotmim.Sync.ProvisioningArgs.Message">
            <inheritdoc cref="P:Dotmim.Sync.ProgressArgs.Message"/>
        </member>
        <member name="P:Dotmim.Sync.ProvisioningArgs.EventId">
            <inheritdoc cref="P:Dotmim.Sync.ProgressArgs.EventId"/>
        </member>
        <member name="T:Dotmim.Sync.DeprovisionedArgs">
            <summary>
            Event args generated after a database has been deprovisioned.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.DeprovisionedArgs.#ctor(Dotmim.Sync.SyncContext,Dotmim.Sync.Enumerations.SyncProvision,Dotmim.Sync.SyncSetup,System.Boolean,System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <inheritdoc cref="T:Dotmim.Sync.DeprovisionedArgs"/>
        </member>
        <member name="P:Dotmim.Sync.DeprovisionedArgs.Provision">
            <summary>
            Gets the provision type (Flag enum).
            </summary>
        </member>
        <member name="P:Dotmim.Sync.DeprovisionedArgs.Setup">
            <summary>
            Gets the schema that has been used to deprovision the database.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.DeprovisionedArgs.ProgressLevel">
            <inheritdoc cref="P:Dotmim.Sync.ProgressArgs.ProgressLevel"/>
        </member>
        <member name="P:Dotmim.Sync.DeprovisionedArgs.Message">
            <inheritdoc cref="P:Dotmim.Sync.ProgressArgs.Message"/>
        </member>
        <member name="P:Dotmim.Sync.DeprovisionedArgs.EventId">
            <inheritdoc cref="P:Dotmim.Sync.ProgressArgs.EventId"/>
        </member>
        <member name="T:Dotmim.Sync.DeprovisioningArgs">
            <summary>
            Event args generated before a database is deprovisioned.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.DeprovisioningArgs.#ctor(Dotmim.Sync.SyncContext,Dotmim.Sync.Enumerations.SyncProvision,Dotmim.Sync.SyncSetup,System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <inheritdoc cref="T:Dotmim.Sync.DeprovisioningArgs"/>
        </member>
        <member name="P:Dotmim.Sync.DeprovisioningArgs.Provision">
            <summary>
            Gets get the provision type (Flag enum).
            </summary>
        </member>
        <member name="P:Dotmim.Sync.DeprovisioningArgs.Setup">
            <summary>
            Gets the schema to be applied in the database.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.DeprovisioningArgs.ProgressLevel">
            <inheritdoc cref="P:Dotmim.Sync.ProgressArgs.ProgressLevel"/>
        </member>
        <member name="P:Dotmim.Sync.DeprovisioningArgs.Message">
            <inheritdoc cref="P:Dotmim.Sync.ProgressArgs.Message"/>
        </member>
        <member name="P:Dotmim.Sync.DeprovisioningArgs.EventId">
            <inheritdoc cref="P:Dotmim.Sync.ProgressArgs.EventId"/>
        </member>
        <member name="T:Dotmim.Sync.ProvisionedTableArgs">
            <summary>
            Event args generated after a table has been provisioned.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.ProvisionedTableArgs.#ctor(Dotmim.Sync.SyncContext,Dotmim.Sync.Enumerations.SyncProvision,Dotmim.Sync.ScopeInfo,Dotmim.Sync.SyncTable,System.Boolean,System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <inheritdoc cref="T:Dotmim.Sync.ProvisionedTableArgs"/>
        </member>
        <member name="P:Dotmim.Sync.ProvisionedTableArgs.Provision">
            <summary>
            Gets the provision type (Flag enum).
            </summary>
        </member>
        <member name="P:Dotmim.Sync.ProvisionedTableArgs.ScopeInfo">
            <summary>
            Gets the scope info that has been applied in the database.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.ProvisionedTableArgs.Table">
            <summary>
            Gets the table that has been provisioned.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.ProvisionedTableArgs.ProgressLevel">
            <inheritdoc cref="P:Dotmim.Sync.ProgressArgs.ProgressLevel"/>
        </member>
        <member name="P:Dotmim.Sync.ProvisionedTableArgs.Message">
            <inheritdoc cref="P:Dotmim.Sync.ProgressArgs.Message"/>
        </member>
        <member name="P:Dotmim.Sync.ProvisionedTableArgs.EventId">
            <inheritdoc cref="P:Dotmim.Sync.ProgressArgs.EventId"/>
        </member>
        <member name="T:Dotmim.Sync.ProvisioningTableArgs">
            <summary>
            Event args generated before a table is provisioned.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.ProvisioningTableArgs.#ctor(Dotmim.Sync.SyncContext,Dotmim.Sync.Enumerations.SyncProvision,Dotmim.Sync.ScopeInfo,Dotmim.Sync.SyncTable,System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <inheritdoc cref="T:Dotmim.Sync.ProvisioningTableArgs"/>
        </member>
        <member name="P:Dotmim.Sync.ProvisioningTableArgs.Provision">
            <summary>
            Gets get the provision type (Flag enum).
            </summary>
        </member>
        <member name="P:Dotmim.Sync.ProvisioningTableArgs.ScopeInfo">
            <summary>
            Gets the scope info to be applied in the database.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.ProvisioningTableArgs.Table">
            <summary>
            Gets the table to be provisioned.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.ProvisioningTableArgs.ProgressLevel">
            <inheritdoc cref="P:Dotmim.Sync.ProgressArgs.ProgressLevel"/>
        </member>
        <member name="P:Dotmim.Sync.ProvisioningTableArgs.Message">
            <inheritdoc cref="P:Dotmim.Sync.ProgressArgs.Message"/>
        </member>
        <member name="P:Dotmim.Sync.ProvisioningTableArgs.EventId">
            <inheritdoc cref="P:Dotmim.Sync.ProgressArgs.EventId"/>
        </member>
        <member name="T:Dotmim.Sync.DeprovisionedTableArgs">
            <summary>
            Event args generated after a table has been deprovisioned.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.DeprovisionedTableArgs.#ctor(Dotmim.Sync.SyncContext,Dotmim.Sync.Enumerations.SyncProvision,Dotmim.Sync.ScopeInfo,Dotmim.Sync.SyncTable,System.Boolean,System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <inheritdoc cref="T:Dotmim.Sync.DeprovisionedTableArgs"/>
        </member>
        <member name="P:Dotmim.Sync.DeprovisionedTableArgs.Provision">
            <summary>
            Gets the provision type (Flag enum).
            </summary>
        </member>
        <member name="P:Dotmim.Sync.DeprovisionedTableArgs.ScopeInfo">
            <summary>
            Gets the scope info that has been deprovisioned in the database.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.DeprovisionedTableArgs.Table">
            <summary>
            Gets the table that has been deprovisioned.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.DeprovisionedTableArgs.ProgressLevel">
            <inheritdoc cref="P:Dotmim.Sync.ProgressArgs.ProgressLevel"/>
        </member>
        <member name="P:Dotmim.Sync.DeprovisionedTableArgs.Message">
            <inheritdoc cref="P:Dotmim.Sync.ProgressArgs.Message"/>
        </member>
        <member name="P:Dotmim.Sync.DeprovisionedTableArgs.EventId">
            <inheritdoc cref="P:Dotmim.Sync.ProgressArgs.EventId"/>
        </member>
        <member name="T:Dotmim.Sync.DeprovisioningTableArgs">
            <summary>
            Event args generated before a table is deprovisioned.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.DeprovisioningTableArgs.#ctor(Dotmim.Sync.SyncContext,Dotmim.Sync.Enumerations.SyncProvision,Dotmim.Sync.ScopeInfo,Dotmim.Sync.SyncTable,System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <inheritdoc cref="T:Dotmim.Sync.DeprovisioningTableArgs"/>
        </member>
        <member name="P:Dotmim.Sync.DeprovisioningTableArgs.Provision">
            <summary>
            Gets get the provision type (Flag enum).
            </summary>
        </member>
        <member name="P:Dotmim.Sync.DeprovisioningTableArgs.ScopeInfo">
            <summary>
            Gets the scope info to be deprisioned in the database.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.DeprovisioningTableArgs.Table">
            <summary>
            Gets the table to be deprovisioned.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.DeprovisioningTableArgs.ProgressLevel">
            <inheritdoc cref="P:Dotmim.Sync.ProgressArgs.ProgressLevel"/>
        </member>
        <member name="P:Dotmim.Sync.DeprovisioningTableArgs.Message">
            <inheritdoc cref="P:Dotmim.Sync.ProgressArgs.Message"/>
        </member>
        <member name="P:Dotmim.Sync.DeprovisioningTableArgs.EventId">
            <inheritdoc cref="P:Dotmim.Sync.ProgressArgs.EventId"/>
        </member>
        <member name="T:Dotmim.Sync.RowsChangesApplyingArgs">
            <summary>
            Event args before a batch changes is going to be applied on a datasource.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.RowsChangesApplyingArgs.#ctor(Dotmim.Sync.SyncContext,Dotmim.Sync.Batch.BatchInfo,System.Collections.Generic.List{Dotmim.Sync.SyncRow},Dotmim.Sync.SyncTable,Dotmim.Sync.Enumerations.SyncRowState,System.Data.Common.DbCommand,System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <inheritdoc cref="T:Dotmim.Sync.RowsChangesApplyingArgs"/>
        </member>
        <member name="P:Dotmim.Sync.RowsChangesApplyingArgs.Cancel">
            <summary>
            Gets or sets a value indicating whether the changes to applied should be canceled.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.RowsChangesApplyingArgs.Command">
            <summary>
            Gets or sets the command to be executed to apply the changes to the datasource.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.RowsChangesApplyingArgs.State">
            <summary>
            Gets the RowState of the applied rows.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.RowsChangesApplyingArgs.BatchInfo">
            <summary>
            Gets batchinfo serialized on disk, containing the rows to be applied.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.RowsChangesApplyingArgs.SyncRows">
            <summary>
            Gets the rows to be applied.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.RowsChangesApplyingArgs.SchemaTable">
            <summary>
            Gets the schema of the rows to be applied.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.RowsChangesApplyingArgs.ProgressLevel">
            <inheritdoc cref="P:Dotmim.Sync.ProgressArgs.ProgressLevel"/>
        </member>
        <member name="P:Dotmim.Sync.RowsChangesApplyingArgs.Message">
            <inheritdoc cref="P:Dotmim.Sync.ProgressArgs.Message"/>
        </member>
        <member name="P:Dotmim.Sync.RowsChangesApplyingArgs.EventId">
            <inheritdoc cref="P:Dotmim.Sync.ProgressArgs.EventId"/>
        </member>
        <member name="T:Dotmim.Sync.RowsChangesAppliedArgs">
            <summary>
            Event args after a batch changes has been applied on a datasource.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.RowsChangesAppliedArgs.#ctor(Dotmim.Sync.SyncContext,Dotmim.Sync.Batch.BatchInfo,System.Collections.Generic.List{Dotmim.Sync.SyncRow},Dotmim.Sync.SyncTable,Dotmim.Sync.Enumerations.SyncRowState,System.Int32,System.Exception,System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <inheritdoc cref="T:Dotmim.Sync.RowsChangesAppliedArgs"/>
        </member>
        <member name="P:Dotmim.Sync.RowsChangesAppliedArgs.State">
            <summary>
            Gets the RowState of the applied rows.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.RowsChangesAppliedArgs.AppliedCount">
            <summary>
            Gets get result of sql statement (if AppliedCount == 1, it means row has been applied).
            </summary>
        </member>
        <member name="P:Dotmim.Sync.RowsChangesAppliedArgs.Exception">
            <summary>
            Gets if not null, an execption has been raised.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.RowsChangesAppliedArgs.BatchInfo">
            <summary>
            Gets batchinfo from where SyncRows are coming.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.RowsChangesAppliedArgs.SyncRows">
            <summary>
            Gets syncRows applied (or not if Exception is not null).
            </summary>
        </member>
        <member name="P:Dotmim.Sync.RowsChangesAppliedArgs.SchemaTable">
            <summary>
            Gets syncRow schema.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.RowsChangesAppliedArgs.ProgressLevel">
            <inheritdoc cref="P:Dotmim.Sync.ProgressArgs.ProgressLevel"/>
        </member>
        <member name="P:Dotmim.Sync.RowsChangesAppliedArgs.Message">
            <inheritdoc cref="P:Dotmim.Sync.ProgressArgs.Message"/>
        </member>
        <member name="P:Dotmim.Sync.RowsChangesAppliedArgs.EventId">
            <inheritdoc cref="P:Dotmim.Sync.ProgressArgs.EventId"/>
        </member>
        <member name="T:Dotmim.Sync.RowsChangesFallbackFromBatchToSingleRowApplyingArgs">
            <summary>
            Event args when a batch was not applied successfully and DMS tries to fallback to one row per row applying.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.RowsChangesFallbackFromBatchToSingleRowApplyingArgs.#ctor(Dotmim.Sync.SyncContext,System.Exception,Dotmim.Sync.Batch.BatchInfo,System.Collections.Generic.List{Dotmim.Sync.SyncRow},Dotmim.Sync.SyncTable,Dotmim.Sync.Enumerations.SyncRowState,System.Data.Common.DbCommand,System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <inheritdoc cref="T:Dotmim.Sync.RowsChangesFallbackFromBatchToSingleRowApplyingArgs"/>
        </member>
        <member name="P:Dotmim.Sync.RowsChangesFallbackFromBatchToSingleRowApplyingArgs.Cancel">
            <summary>
            Gets or sets a value indicating whether the command should be canceled.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.RowsChangesFallbackFromBatchToSingleRowApplyingArgs.Command">
            <summary>
            Gets or sets the command to be executed to apply the changes to the datasource, line by line.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.RowsChangesFallbackFromBatchToSingleRowApplyingArgs.State">
            <summary>
            Gets the RowState of the applied rows.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.RowsChangesFallbackFromBatchToSingleRowApplyingArgs.Exception">
            <summary>
            Gets the exception that caused the fallback.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.RowsChangesFallbackFromBatchToSingleRowApplyingArgs.BatchInfo">
            <summary>
            Gets the batchinfo from where SyncRows are coming.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.RowsChangesFallbackFromBatchToSingleRowApplyingArgs.SyncRows">
            <summary>
            Gets the rows to be applied.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.RowsChangesFallbackFromBatchToSingleRowApplyingArgs.SchemaTable">
            <summary>
            Gets the schema of the rows to be applied.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.RowsChangesFallbackFromBatchToSingleRowApplyingArgs.ProgressLevel">
            <inheritdoc cref="P:Dotmim.Sync.ProgressArgs.ProgressLevel"/>
        </member>
        <member name="P:Dotmim.Sync.RowsChangesFallbackFromBatchToSingleRowApplyingArgs.Message">
            <inheritdoc cref="P:Dotmim.Sync.ProgressArgs.Message"/>
        </member>
        <member name="P:Dotmim.Sync.RowsChangesFallbackFromBatchToSingleRowApplyingArgs.EventId">
            <inheritdoc cref="P:Dotmim.Sync.ProgressArgs.EventId"/>
        </member>
        <member name="T:Dotmim.Sync.RowsChangesSelectedArgs">
            <summary>
            Contains SyncRow selected to be written in the batchpart info.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.RowsChangesSelectedArgs.#ctor(Dotmim.Sync.SyncContext,Dotmim.Sync.SyncRow,Dotmim.Sync.SyncTable,System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <inheritdoc cref="T:Dotmim.Sync.RowsChangesSelectedArgs" />
        </member>
        <member name="P:Dotmim.Sync.RowsChangesSelectedArgs.SyncRow">
            <summary>
            Gets or Sets the sync row selected from the underline table.
            You can change this sync row here, before it's serialized on disk.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.RowsChangesSelectedArgs.SchemaTable">
            <summary>
            Gets the table schema.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.RowsChangesSelectedArgs.ProgressLevel">
            <inheritdoc cref="P:Dotmim.Sync.ProgressArgs.ProgressLevel"/>
        </member>
        <member name="P:Dotmim.Sync.RowsChangesSelectedArgs.Message">
            <inheritdoc cref="P:Dotmim.Sync.ProgressArgs.Message"/>
        </member>
        <member name="P:Dotmim.Sync.RowsChangesSelectedArgs.EventId">
            <inheritdoc cref="P:Dotmim.Sync.ProgressArgs.EventId"/>
        </member>
        <member name="T:Dotmim.Sync.SchemaLoadingArgs">
            <summary>
            Event args generated before a schema is loaded.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SchemaLoadingArgs.#ctor(Dotmim.Sync.SyncContext,Dotmim.Sync.SyncSetup,System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <inheritdoc cref="T:Dotmim.Sync.SchemaLoadingArgs" />
        </member>
        <member name="P:Dotmim.Sync.SchemaLoadingArgs.Setup">
            <summary>
            Gets the Setup containing all the tables to load in a SyncSchema instance.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SchemaLoadingArgs.Message">
            <inheritdoc cref="P:Dotmim.Sync.ProgressArgs.Message" />/>
        </member>
        <member name="P:Dotmim.Sync.SchemaLoadingArgs.ProgressLevel">
            <inheritdoc cref="P:Dotmim.Sync.ProgressArgs.ProgressLevel" />/>
        </member>
        <member name="P:Dotmim.Sync.SchemaLoadingArgs.EventId">
            <inheritdoc cref="P:Dotmim.Sync.ProgressArgs.EventId" />/>
        </member>
        <member name="T:Dotmim.Sync.SchemaLoadedArgs">
            <summary>
            Event args generated after a schema is loaded.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SchemaLoadedArgs.#ctor(Dotmim.Sync.SyncContext,Dotmim.Sync.SyncSet,System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <inheritdoc cref="T:Dotmim.Sync.SchemaLoadedArgs" />
        </member>
        <member name="P:Dotmim.Sync.SchemaLoadedArgs.Schema">
            <summary>
            Gets the schema loaded.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SchemaLoadedArgs.ProgressLevel">
            <inheritdoc cref="P:Dotmim.Sync.ProgressArgs.ProgressLevel" />/>
        </member>
        <member name="P:Dotmim.Sync.SchemaLoadedArgs.Message">
            <inheritdoc cref="P:Dotmim.Sync.ProgressArgs.Message" />/>
        </member>
        <member name="P:Dotmim.Sync.SchemaLoadedArgs.EventId">
            <inheritdoc cref="P:Dotmim.Sync.ProgressArgs.EventId" />/>
        </member>
        <member name="T:Dotmim.Sync.ScopeInfoTableDroppedArgs">
            <summary>
            Event args generated after a scope table is dropped.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.ScopeInfoTableDroppedArgs.#ctor(Dotmim.Sync.SyncContext,System.String,Dotmim.Sync.Builders.DbScopeType,System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <inheritdoc cref="T:Dotmim.Sync.ScopeInfoTableDroppedArgs" />
        </member>
        <member name="P:Dotmim.Sync.ScopeInfoTableDroppedArgs.ScopeType">
            <summary>
            Gets the scope type.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.ScopeInfoTableDroppedArgs.ScopeName">
            <summary>
            Gets the scope name.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.ScopeInfoTableDroppedArgs.ProgressLevel">
            <inheritdoc cref="P:Dotmim.Sync.ProgressArgs.ProgressLevel" />
        </member>
        <member name="P:Dotmim.Sync.ScopeInfoTableDroppedArgs.Message">
            <inheritdoc cref="P:Dotmim.Sync.ProgressArgs.Message" />
        </member>
        <member name="P:Dotmim.Sync.ScopeInfoTableDroppedArgs.EventId">
            <inheritdoc cref="P:Dotmim.Sync.ProgressArgs.EventId" />
        </member>
        <member name="T:Dotmim.Sync.ScopeInfoTableCreatedArgs">
            <summary>
            Event args generated after a scope table is created.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.ScopeInfoTableCreatedArgs.#ctor(Dotmim.Sync.SyncContext,System.String,Dotmim.Sync.Builders.DbScopeType,System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <inheritdoc cref="T:Dotmim.Sync.ScopeInfoTableCreatedArgs" />
        </member>
        <member name="P:Dotmim.Sync.ScopeInfoTableCreatedArgs.ScopeType">
            <summary>
            Gets the scope type.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.ScopeInfoTableCreatedArgs.ScopeName">
            <summary>
            Gets the scope name.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.ScopeInfoTableCreatedArgs.ProgressLevel">
            <inheritdoc cref="P:Dotmim.Sync.ProgressArgs.ProgressLevel" />
        </member>
        <member name="P:Dotmim.Sync.ScopeInfoTableCreatedArgs.Message">
            <inheritdoc cref="P:Dotmim.Sync.ProgressArgs.Message" />
        </member>
        <member name="P:Dotmim.Sync.ScopeInfoTableCreatedArgs.EventId">
            <inheritdoc cref="P:Dotmim.Sync.ProgressArgs.EventId" />
        </member>
        <member name="T:Dotmim.Sync.ScopeInfoTableDroppingArgs">
            <summary>
            Event args generated when a scope table is about to be dropped.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.ScopeInfoTableDroppingArgs.#ctor(Dotmim.Sync.SyncContext,System.String,Dotmim.Sync.Builders.DbScopeType,System.Data.Common.DbCommand,System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <inheritdoc cref="T:Dotmim.Sync.ScopeInfoTableDroppingArgs" />
        </member>
        <member name="P:Dotmim.Sync.ScopeInfoTableDroppingArgs.Cancel">
            <summary>
            Gets or sets a value indicating whether the operation should be canceled.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.ScopeInfoTableDroppingArgs.Command">
            <summary>
            Gets or sets the command to be executed.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.ScopeInfoTableDroppingArgs.ScopeType">
            <summary>
            Gets the scope type.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.ScopeInfoTableDroppingArgs.ScopeName">
            <summary>
            Gets the scope name.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.ScopeInfoTableDroppingArgs.ProgressLevel">
            <inheritdoc cref="P:Dotmim.Sync.ProgressArgs.ProgressLevel" />
        </member>
        <member name="P:Dotmim.Sync.ScopeInfoTableDroppingArgs.Message">
            <inheritdoc cref="P:Dotmim.Sync.ProgressArgs.Message" />
        </member>
        <member name="P:Dotmim.Sync.ScopeInfoTableDroppingArgs.EventId">
            <inheritdoc cref="P:Dotmim.Sync.ProgressArgs.EventId" />
        </member>
        <member name="T:Dotmim.Sync.ScopeInfoTableCreatingArgs">
            <summary>
            Event args generated when a scope table is about to be created.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.ScopeInfoTableCreatingArgs.#ctor(Dotmim.Sync.SyncContext,System.String,Dotmim.Sync.Builders.DbScopeType,System.Data.Common.DbCommand,System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <inheritdoc cref="T:Dotmim.Sync.ScopeInfoTableCreatingArgs" />
        </member>
        <member name="P:Dotmim.Sync.ScopeInfoTableCreatingArgs.Cancel">
            <summary>
            Gets or sets a value indicating whether the operation should be canceled.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.ScopeInfoTableCreatingArgs.Command">
            <summary>
            Gets or sets the command to be executed.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.ScopeInfoTableCreatingArgs.ScopeType">
            <summary>
            Gets the scope type.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.ScopeInfoTableCreatingArgs.ScopeName">
            <summary>
            Gets the scope name.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.ScopeInfoTableCreatingArgs.ProgressLevel">
            <inheritdoc cref="P:Dotmim.Sync.ProgressArgs.ProgressLevel" />
        </member>
        <member name="P:Dotmim.Sync.ScopeInfoTableCreatingArgs.Message">
            <inheritdoc cref="P:Dotmim.Sync.ProgressArgs.Message" />
        </member>
        <member name="P:Dotmim.Sync.ScopeInfoTableCreatingArgs.EventId">
            <inheritdoc cref="P:Dotmim.Sync.ProgressArgs.EventId" />
        </member>
        <member name="T:Dotmim.Sync.ScopeInfoLoadedArgs">
            <summary>
            Event args generated when a scope is loaded from client or server database.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.ScopeInfoLoadedArgs.#ctor(Dotmim.Sync.SyncContext,Dotmim.Sync.ScopeInfo,System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <inheritdoc cref="T:Dotmim.Sync.ScopeInfoLoadedArgs" />
        </member>
        <member name="P:Dotmim.Sync.ScopeInfoLoadedArgs.ScopeInfo">
            <summary>
            Gets or sets the scope info.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.ScopeInfoLoadedArgs.ProgressLevel">
            <inheritdoc cref="P:Dotmim.Sync.ProgressArgs.ProgressLevel" />
        </member>
        <member name="P:Dotmim.Sync.ScopeInfoLoadedArgs.Message">
            <inheritdoc cref="P:Dotmim.Sync.ProgressArgs.Message" />
        </member>
        <member name="P:Dotmim.Sync.ScopeInfoLoadedArgs.EventId">
            <inheritdoc cref="P:Dotmim.Sync.ProgressArgs.EventId" />
        </member>
        <member name="T:Dotmim.Sync.ScopeInfoLoadingArgs">
            <summary>
            Event args generated when a client scope is about to be loaded from client database.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.ScopeInfoLoadingArgs.#ctor(Dotmim.Sync.SyncContext,System.String,System.Data.Common.DbCommand,System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <inheritdoc cref="T:Dotmim.Sync.ScopeInfoLoadingArgs" />
        </member>
        <member name="P:Dotmim.Sync.ScopeInfoLoadingArgs.Cancel">
            <summary>
            Gets or sets a value indicating whether the operation should be canceled.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.ScopeInfoLoadingArgs.Command">
            <summary>
            Gets or sets the command to be executed.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.ScopeInfoLoadingArgs.ScopeName">
            <summary>
            Gets the scope name.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.ScopeInfoLoadingArgs.ProgressLevel">
            <inheritdoc cref="P:Dotmim.Sync.ProgressArgs.ProgressLevel" />
        </member>
        <member name="P:Dotmim.Sync.ScopeInfoLoadingArgs.Message">
            <inheritdoc cref="P:Dotmim.Sync.ProgressArgs.Message" />
        </member>
        <member name="P:Dotmim.Sync.ScopeInfoLoadingArgs.EventId">
            <inheritdoc cref="P:Dotmim.Sync.ProgressArgs.Message" />
        </member>
        <member name="T:Dotmim.Sync.ScopeInfoSavingArgs">
            <summary>
            Event args generated when a scope is about to be saved.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.ScopeInfoSavingArgs.#ctor(Dotmim.Sync.SyncContext,Dotmim.Sync.ScopeInfo,System.Data.Common.DbCommand,System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <inheritdoc cref="T:Dotmim.Sync.ScopeInfoSavingArgs" />
        </member>
        <member name="P:Dotmim.Sync.ScopeInfoSavingArgs.Cancel">
            <summary>
            Gets or sets a value indicating whether the operation should be canceled.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.ScopeInfoSavingArgs.Command">
            <summary>
            Gets or sets the command to be executed.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.ScopeInfoSavingArgs.ScopeInfo">
            <summary>
            Gets the scope info.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.ScopeInfoSavingArgs.ProgressLevel">
            <inheritdoc cref="P:Dotmim.Sync.ProgressArgs.ProgressLevel" />
        </member>
        <member name="P:Dotmim.Sync.ScopeInfoSavingArgs.Message">
            <inheritdoc cref="P:Dotmim.Sync.ProgressArgs.Message" />
        </member>
        <member name="P:Dotmim.Sync.ScopeInfoSavingArgs.EventId">
            <inheritdoc cref="P:Dotmim.Sync.ProgressArgs.EventId" />
        </member>
        <member name="T:Dotmim.Sync.ScopeInfoSavedArgs">
            <summary>
            Event args generated when a scope is saved.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.ScopeInfoSavedArgs.#ctor(Dotmim.Sync.SyncContext,Dotmim.Sync.ScopeInfo,System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <inheritdoc cref="T:Dotmim.Sync.ScopeInfoSavedArgs" />
        </member>
        <member name="P:Dotmim.Sync.ScopeInfoSavedArgs.ScopeInfo">
            <summary>
            Gets the scope info.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.ScopeInfoSavedArgs.ProgressLevel">
            <inheritdoc cref="P:Dotmim.Sync.ProgressArgs.ProgressLevel" />
        </member>
        <member name="P:Dotmim.Sync.ScopeInfoSavedArgs.Message">
            <inheritdoc cref="P:Dotmim.Sync.ProgressArgs.Message" />
        </member>
        <member name="P:Dotmim.Sync.ScopeInfoSavedArgs.EventId">
            <inheritdoc cref="P:Dotmim.Sync.ProgressArgs.EventId" />
        </member>
        <member name="T:Dotmim.Sync.SerializingRowArgs">
            <summary>
            Event arg raised before serialize a change set to get a byte array.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SerializingRowArgs.#ctor(Dotmim.Sync.SyncContext,Dotmim.Sync.SyncTable,System.Object[])">
            <inheritdoc cref="T:Dotmim.Sync.SerializingRowArgs" />
        </member>
        <member name="P:Dotmim.Sync.SerializingRowArgs.Result">
            <summary>
            Gets or Sets the result string that will be serialized in the json stream.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SerializingRowArgs.SchemaTable">
            <summary>
            Gets the schema table, corresponding to the row array ObjectArray.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SerializingRowArgs.RowArray">
            <summary>
            Gets the row array to serialize.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SerializingRowArgs.ProgressLevel">
            <inheritdoc cref="P:Dotmim.Sync.ProgressArgs.Message" />
        </member>
        <member name="P:Dotmim.Sync.SerializingRowArgs.EventId">
            <inheritdoc cref="P:Dotmim.Sync.ProgressArgs.EventId" />
        </member>
        <member name="T:Dotmim.Sync.DeserializingRowArgs">
            <summary>
            Event args raised just after loading a binary change set from disk, just before calling the deserializer.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.DeserializingRowArgs.#ctor(Dotmim.Sync.SyncContext,Dotmim.Sync.SyncTable,System.String)">
            <inheritdoc cref="T:Dotmim.Sync.DeserializingRowArgs" />
        </member>
        <member name="P:Dotmim.Sync.DeserializingRowArgs.Result">
            <summary>
            Gets or Sets the result array that will be deserialized from the json stream.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.DeserializingRowArgs.SchemaTable">
            <summary>
            Gets the schema table, corresponding to the row array objects.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.DeserializingRowArgs.RowString">
            <summary>
            Gets the row string to deserialize.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.DeserializingRowArgs.ProgressLevel">
            <inheritdoc cref="P:Dotmim.Sync.ProgressArgs.Message" />
        </member>
        <member name="P:Dotmim.Sync.DeserializingRowArgs.EventId">
            <inheritdoc cref="P:Dotmim.Sync.ProgressArgs.EventId" />
        </member>
        <member name="T:Dotmim.Sync.ConnectionOpenedArgs">
            <summary>
            Event args generated when a connection is opened.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.ConnectionOpenedArgs.#ctor(Dotmim.Sync.SyncContext,System.Data.Common.DbConnection)">
            <inheritdoc cref="T:Dotmim.Sync.ConnectionOpenedArgs" />
        </member>
        <member name="P:Dotmim.Sync.ConnectionOpenedArgs.ProgressLevel">
            <inheritdoc cref="P:Dotmim.Sync.ProgressArgs.Message" />
        </member>
        <member name="P:Dotmim.Sync.ConnectionOpenedArgs.Message">
            <inheritdoc cref="P:Dotmim.Sync.ProgressArgs.Message" />
        </member>
        <member name="P:Dotmim.Sync.ConnectionOpenedArgs.EventId">
            <inheritdoc cref="P:Dotmim.Sync.ProgressArgs.EventId" />
        </member>
        <member name="T:Dotmim.Sync.ReConnectArgs">
            <summary>
            Event args generated when trying to reconnect.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.ReConnectArgs.#ctor(Dotmim.Sync.SyncContext,System.Data.Common.DbConnection,System.Exception,System.Int32,System.TimeSpan)">
            <inheritdoc cref="T:Dotmim.Sync.ReConnectArgs" />
        </member>
        <member name="P:Dotmim.Sync.ReConnectArgs.HandledException">
            <summary>
            Gets the handled exception.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.ReConnectArgs.Retry">
            <summary>
            Gets the retry count.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.ReConnectArgs.WaitingTimeSpan">
            <summary>
            Gets the waiting timespan duration.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.ReConnectArgs.ProgressLevel">
            <inheritdoc cref="P:Dotmim.Sync.ProgressArgs.Message" />
        </member>
        <member name="P:Dotmim.Sync.ReConnectArgs.Message">
            <inheritdoc cref="P:Dotmim.Sync.ProgressArgs.Message" />
        </member>
        <member name="P:Dotmim.Sync.ReConnectArgs.EventId">
            <inheritdoc cref="P:Dotmim.Sync.ProgressArgs.EventId" />
        </member>
        <member name="T:Dotmim.Sync.TransientErrorOccuredArgs">
            <summary>
            Event args generated when a transient error is happenning.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.TransientErrorOccuredArgs.#ctor(Dotmim.Sync.SyncContext,System.Data.Common.DbConnection,System.Exception,System.Int32,System.TimeSpan)">
            <inheritdoc cref="T:Dotmim.Sync.TransientErrorOccuredArgs" />
        </member>
        <member name="P:Dotmim.Sync.TransientErrorOccuredArgs.HandledException">
            <summary>
            Gets the handled exception.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.TransientErrorOccuredArgs.Retry">
            <summary>
            Gets the retry count.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.TransientErrorOccuredArgs.WaitingTimeSpan">
            <summary>
            Gets the waiting timespan duration.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.TransientErrorOccuredArgs.ProgressLevel">
            <inheritdoc cref="P:Dotmim.Sync.ProgressArgs.Message" />
        </member>
        <member name="P:Dotmim.Sync.TransientErrorOccuredArgs.Message">
            <inheritdoc cref="P:Dotmim.Sync.ProgressArgs.Message" />
        </member>
        <member name="P:Dotmim.Sync.TransientErrorOccuredArgs.EventId">
            <inheritdoc cref="P:Dotmim.Sync.ProgressArgs.EventId" />
        </member>
        <member name="T:Dotmim.Sync.ConnectionClosedArgs">
            <summary>
            Event args generated when a connection is closed.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.ConnectionClosedArgs.#ctor(Dotmim.Sync.SyncContext,System.Data.Common.DbConnection)">
            <inheritdoc cref="T:Dotmim.Sync.ConnectionClosedArgs" />
        </member>
        <member name="P:Dotmim.Sync.ConnectionClosedArgs.ProgressLevel">
            <inheritdoc cref="P:Dotmim.Sync.ProgressArgs.ProgressLevel" />
        </member>
        <member name="P:Dotmim.Sync.ConnectionClosedArgs.Message">
            <inheritdoc cref="P:Dotmim.Sync.ProgressArgs.Message" />
        </member>
        <member name="P:Dotmim.Sync.ConnectionClosedArgs.EventId">
            <inheritdoc cref="P:Dotmim.Sync.ProgressArgs.EventId" />
        </member>
        <member name="T:Dotmim.Sync.TransactionOpenedArgs">
            <summary>
            Event args generated when a transaction is opened.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.TransactionOpenedArgs.#ctor(Dotmim.Sync.SyncContext,System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <inheritdoc cref="T:Dotmim.Sync.TransactionOpenedArgs" />
        </member>
        <member name="P:Dotmim.Sync.TransactionOpenedArgs.Message">
            <inheritdoc cref="P:Dotmim.Sync.ProgressArgs.Message" />
        </member>
        <member name="P:Dotmim.Sync.TransactionOpenedArgs.ProgressLevel">
            <inheritdoc cref="P:Dotmim.Sync.ProgressArgs.ProgressLevel" />
        </member>
        <member name="P:Dotmim.Sync.TransactionOpenedArgs.EventId">
            <inheritdoc cref="P:Dotmim.Sync.ProgressArgs.EventId" />
        </member>
        <member name="T:Dotmim.Sync.TransactionCommitArgs">
            <summary>
            Event args generated when a transaction is commit.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.TransactionCommitArgs.#ctor(Dotmim.Sync.SyncContext,System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <inheritdoc cref="T:Dotmim.Sync.TransactionCommitArgs" />
        </member>
        <member name="P:Dotmim.Sync.TransactionCommitArgs.ProgressLevel">
            <inheritdoc cref="P:Dotmim.Sync.ProgressArgs.Message" />
        </member>
        <member name="P:Dotmim.Sync.TransactionCommitArgs.Message">
            <inheritdoc cref="P:Dotmim.Sync.ProgressArgs.Message" />
        </member>
        <member name="P:Dotmim.Sync.TransactionCommitArgs.EventId">
            <inheritdoc cref="P:Dotmim.Sync.ProgressArgs.EventId" />
        </member>
        <member name="T:Dotmim.Sync.SessionBeginArgs">
            <summary>
            Event args generated during BeginSession stage.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SessionBeginArgs.#ctor(Dotmim.Sync.SyncContext,System.Data.Common.DbConnection)">
            <inheritdoc cref="T:Dotmim.Sync.SessionBeginArgs" />
        </member>
        <member name="P:Dotmim.Sync.SessionBeginArgs.ProgressLevel">
            <inheritdoc cref="P:Dotmim.Sync.ProgressArgs.Message" />
        </member>
        <member name="P:Dotmim.Sync.SessionBeginArgs.Message">
            <inheritdoc cref="P:Dotmim.Sync.ProgressArgs.Message" />
        </member>
        <member name="P:Dotmim.Sync.SessionBeginArgs.EventId">
            <inheritdoc cref="P:Dotmim.Sync.ProgressArgs.EventId" />
        </member>
        <member name="T:Dotmim.Sync.SessionEndArgs">
            <summary>
            Event args generated during EndSession stage.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SessionEndArgs.#ctor(Dotmim.Sync.SyncContext,Dotmim.Sync.SyncResult,Dotmim.Sync.SyncException,System.Data.Common.DbConnection)">
            <inheritdoc cref="T:Dotmim.Sync.SessionEndArgs" />
        </member>
        <member name="P:Dotmim.Sync.SessionEndArgs.SyncResult">
            <summary>
            Gets the sync result.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SessionEndArgs.SyncException">
            <summary>
            Gets the exception occured if any.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SessionEndArgs.ProgressLevel">
            <inheritdoc cref="P:Dotmim.Sync.ProgressArgs.ProgressLevel" />
        </member>
        <member name="P:Dotmim.Sync.SessionEndArgs.Message">
            <inheritdoc cref="P:Dotmim.Sync.ProgressArgs.Message" />
        </member>
        <member name="P:Dotmim.Sync.SessionEndArgs.EventId">
            <inheritdoc cref="P:Dotmim.Sync.ProgressArgs.EventId" />
        </member>
        <member name="T:Dotmim.Sync.SnapshotApplyingArgs">
            <summary>
            Event args generated before applying a snapshot on the target database.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SnapshotApplyingArgs.#ctor(Dotmim.Sync.SyncContext,System.Data.Common.DbConnection)">
            <inheritdoc cref="T:Dotmim.Sync.SnapshotApplyingArgs" />
        </member>
        <member name="P:Dotmim.Sync.SnapshotApplyingArgs.ProgressLevel">
            <inheritdoc cref="P:Dotmim.Sync.ProgressArgs.ProgressLevel" />
        </member>
        <member name="P:Dotmim.Sync.SnapshotApplyingArgs.Message">
            <inheritdoc cref="P:Dotmim.Sync.ProgressArgs.Message" />
        </member>
        <member name="P:Dotmim.Sync.SnapshotApplyingArgs.EventId">
            <inheritdoc cref="P:Dotmim.Sync.ProgressArgs.EventId" />
        </member>
        <member name="T:Dotmim.Sync.SnapshotAppliedArgs">
            <summary>
            Event args generated before applying a snapshot on the target database.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SnapshotAppliedArgs.#ctor(Dotmim.Sync.SyncContext,Dotmim.Sync.DatabaseChangesApplied)">
            <inheritdoc cref="T:Dotmim.Sync.SnapshotAppliedArgs" />
        </member>
        <member name="P:Dotmim.Sync.SnapshotAppliedArgs.ChangesApplied">
            <summary>
            Gets or sets the changes applied during the snapshot application.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SnapshotAppliedArgs.ProgressLevel">
            <inheritdoc cref="P:Dotmim.Sync.ProgressArgs.ProgressLevel" />
        </member>
        <member name="P:Dotmim.Sync.SnapshotAppliedArgs.Source">
            <inheritdoc cref="P:Dotmim.Sync.ProgressArgs.Source" />
        </member>
        <member name="P:Dotmim.Sync.SnapshotAppliedArgs.Message">
            <inheritdoc cref="P:Dotmim.Sync.ProgressArgs.Message" />
        </member>
        <member name="P:Dotmim.Sync.SnapshotAppliedArgs.EventId">
            <inheritdoc cref="P:Dotmim.Sync.ProgressArgs.EventId" />
        </member>
        <member name="T:Dotmim.Sync.SnapshotCreatingArgs">
            <summary>
            Event args generated before creating a snapshot.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SnapshotCreatingArgs.#ctor(Dotmim.Sync.SyncContext,Dotmim.Sync.SyncSet,System.String,System.Int32,System.Int64,System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <inheritdoc cref="T:Dotmim.Sync.SnapshotCreatingArgs" />
        </member>
        <member name="P:Dotmim.Sync.SnapshotCreatingArgs.Schema">
            <summary>
            Gets the schema used to create the snapshot.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SnapshotCreatingArgs.SnapshotDirectory">
            <summary>
            Gets the directory used to store the snapshot.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SnapshotCreatingArgs.BatchSize">
            <summary>
            Gets the batchsize of each file.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SnapshotCreatingArgs.Timestamp">
            <summary>
            Gets the timestamp defining the timestamp limit to generate the snapshot.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SnapshotCreatingArgs.ProgressLevel">
            <inheritdoc cref="P:Dotmim.Sync.ProgressArgs.ProgressLevel" />
        </member>
        <member name="P:Dotmim.Sync.SnapshotCreatingArgs.Message">
            <inheritdoc cref="P:Dotmim.Sync.ProgressArgs.Message" />
        </member>
        <member name="P:Dotmim.Sync.SnapshotCreatingArgs.EventId">
            <inheritdoc cref="P:Dotmim.Sync.ProgressArgs.EventId" />
        </member>
        <member name="T:Dotmim.Sync.SnapshotCreatedArgs">
            <summary>
            Event args generated before after a snapshot has been created.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SnapshotCreatedArgs.#ctor(Dotmim.Sync.SyncContext,Dotmim.Sync.Batch.BatchInfo,System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <inheritdoc cref="T:Dotmim.Sync.SnapshotCreatedArgs" />
        </member>
        <member name="P:Dotmim.Sync.SnapshotCreatedArgs.BatchInfo">
            <summary>
            Gets the batch info summarizing the snapshot created.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SnapshotCreatedArgs.ProgressLevel">
            <inheritdoc cref="P:Dotmim.Sync.ProgressArgs.ProgressLevel" />
        </member>
        <member name="P:Dotmim.Sync.SnapshotCreatedArgs.Message">
            <inheritdoc cref="P:Dotmim.Sync.ProgressArgs.Message" />
        </member>
        <member name="P:Dotmim.Sync.SnapshotCreatedArgs.EventId">
            <inheritdoc cref="P:Dotmim.Sync.ProgressArgs.EventId" />
        </member>
        <member name="T:Dotmim.Sync.StoredProcedureCreatedArgs">
            <summary>
            Event args generated after a stored procedure is created.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.StoredProcedureCreatedArgs.#ctor(Dotmim.Sync.SyncContext,Dotmim.Sync.ScopeInfo,Dotmim.Sync.SyncTable,Dotmim.Sync.Builders.DbStoredProcedureType,System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <inheritdoc cref="T:Dotmim.Sync.StoredProcedureCreatedArgs" />
        </member>
        <member name="P:Dotmim.Sync.StoredProcedureCreatedArgs.ScopeInfo">
            <summary>
            Gets the scope info on which the stored procedure is created.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.StoredProcedureCreatedArgs.Table">
            <summary>
            Gets the table on which the stored procedure is created.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.StoredProcedureCreatedArgs.StoredProcedureType">
            <summary>
            Gets the type of the stored procedure created.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.StoredProcedureCreatedArgs.ProgressLevel">
            <inheritdoc cref="P:Dotmim.Sync.ProgressArgs.ProgressLevel"/>
        </member>
        <member name="P:Dotmim.Sync.StoredProcedureCreatedArgs.Message">
            <inheritdoc cref="P:Dotmim.Sync.ProgressArgs.Message"/>
        </member>
        <member name="P:Dotmim.Sync.StoredProcedureCreatedArgs.EventId">
            <inheritdoc cref="P:Dotmim.Sync.ProgressArgs.EventId"/>
        </member>
        <member name="T:Dotmim.Sync.StoredProcedureCreatingArgs">
            <summary>
            Event args generated before a stored procedure is creating.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.StoredProcedureCreatingArgs.#ctor(Dotmim.Sync.SyncContext,Dotmim.Sync.ScopeInfo,Dotmim.Sync.SyncTable,Dotmim.Sync.Builders.DbStoredProcedureType,System.Data.Common.DbCommand,System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <inheritdoc cref="T:Dotmim.Sync.StoredProcedureCreatingArgs" />
        </member>
        <member name="P:Dotmim.Sync.StoredProcedureCreatingArgs.ScopeInfo">
            <summary>
            Gets the scope info on which the stored procedure is creating.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.StoredProcedureCreatingArgs.Table">
            <summary>
            Gets the table on which the stored procedure is creating.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.StoredProcedureCreatingArgs.StoredProcedureType">
            <summary>
            Gets the type of the stored procedure creating.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.StoredProcedureCreatingArgs.Cancel">
            <summary>
            Gets or sets a value indicating whether gets or sets the cancel flag. If true, the stored procedure creation will be canceled.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.StoredProcedureCreatingArgs.Command">
            <summary>
            Gets or sets the command used to create the stored procedure.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.StoredProcedureCreatingArgs.ProgressLevel">
            <inheritdoc cref="P:Dotmim.Sync.ProgressArgs.ProgressLevel"/>
        </member>
        <member name="P:Dotmim.Sync.StoredProcedureCreatingArgs.Message">
            <inheritdoc cref="P:Dotmim.Sync.ProgressArgs.Message"/>
        </member>
        <member name="P:Dotmim.Sync.StoredProcedureCreatingArgs.EventId">
            <inheritdoc cref="P:Dotmim.Sync.ProgressArgs.EventId"/>
        </member>
        <member name="T:Dotmim.Sync.StoredProcedureDroppedArgs">
            <summary>
            Event args generated after a stored procedure is dropped.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.StoredProcedureDroppedArgs.#ctor(Dotmim.Sync.SyncContext,Dotmim.Sync.ScopeInfo,Dotmim.Sync.SyncTable,Dotmim.Sync.Builders.DbStoredProcedureType,System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <inheritdoc cref="T:Dotmim.Sync.StoredProcedureDroppedArgs" />
        </member>
        <member name="P:Dotmim.Sync.StoredProcedureDroppedArgs.ScopeInfo">
            <summary>
            Gets the scope info on which the stored procedure is dropped.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.StoredProcedureDroppedArgs.Table">
            <summary>
            Gets the table on which the stored procedure is dropped.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.StoredProcedureDroppedArgs.StoredProcedureType">
            <summary>
            Gets the type of the stored procedure dropped.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.StoredProcedureDroppedArgs.ProgressLevel">
            <inheritdoc cref="P:Dotmim.Sync.ProgressArgs.ProgressLevel"/>
        </member>
        <member name="P:Dotmim.Sync.StoredProcedureDroppedArgs.Message">
            <inheritdoc cref="P:Dotmim.Sync.ProgressArgs.Message"/>
        </member>
        <member name="P:Dotmim.Sync.StoredProcedureDroppedArgs.EventId">
            <inheritdoc cref="P:Dotmim.Sync.ProgressArgs.EventId"/>
        </member>
        <member name="T:Dotmim.Sync.StoredProcedureDroppingArgs">
            <summary>
            Event args generated before a stored procedure is dropping.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.StoredProcedureDroppingArgs.#ctor(Dotmim.Sync.SyncContext,Dotmim.Sync.ScopeInfo,Dotmim.Sync.SyncTable,Dotmim.Sync.Builders.DbStoredProcedureType,System.Data.Common.DbCommand,System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <inheritdoc cref="T:Dotmim.Sync.StoredProcedureDroppingArgs" />
        </member>
        <member name="P:Dotmim.Sync.StoredProcedureDroppingArgs.ScopeInfo">
            <summary>
            Gets the scope info on which the stored procedure is dropping.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.StoredProcedureDroppingArgs.Table">
            <summary>
            Gets the table on which the stored procedure is dropping.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.StoredProcedureDroppingArgs.StoredProcedureType">
            <summary>
            Gets the type of the stored procedure dropping.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.StoredProcedureDroppingArgs.Cancel">
            <summary>
            Gets or sets a value indicating whether gets or sets the cancel flag. If true, the stored procedure dropping will be canceled.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.StoredProcedureDroppingArgs.Command">
            <summary>
            Gets or sets the command used to drop the stored procedure.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.StoredProcedureDroppingArgs.ProgressLevel">
            <inheritdoc cref="P:Dotmim.Sync.ProgressArgs.ProgressLevel"/>
        </member>
        <member name="P:Dotmim.Sync.StoredProcedureDroppingArgs.Message">
            <inheritdoc cref="P:Dotmim.Sync.ProgressArgs.Message"/>
        </member>
        <member name="P:Dotmim.Sync.StoredProcedureDroppingArgs.EventId">
            <inheritdoc cref="P:Dotmim.Sync.ProgressArgs.EventId"/>
        </member>
        <member name="T:Dotmim.Sync.SyncSessionStateEventArgs">
            <summary>
            Event args generated before to raise the SyncSessionStateChanged event.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncSessionStateEventArgs.#ctor(Dotmim.Sync.Enumerations.SyncSessionState)">
            <summary>
            Initializes a new instance of the <see cref="T:Dotmim.Sync.SyncSessionStateEventArgs"/> class.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncSessionStateEventArgs.State">
            <summary>
            Gets the current state of the session.
            </summary>
        </member>
        <member name="T:Dotmim.Sync.SchemaNameCreatedArgs">
            <summary>
            Event args generated when a schema is created.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SchemaNameCreatedArgs.#ctor(Dotmim.Sync.SyncContext,Dotmim.Sync.ScopeInfo,Dotmim.Sync.SyncTable,System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <inheritdoc cref="T:Dotmim.Sync.SchemaNameCreatedArgs" />
        </member>
        <member name="P:Dotmim.Sync.SchemaNameCreatedArgs.ScopeInfo">
            <summary>
            Gets the scope info on which the schema is created.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SchemaNameCreatedArgs.Table">
            <summary>
            Gets the table on which the schema is created.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SchemaNameCreatedArgs.ProgressLevel">
            <inheritdoc cref="P:Dotmim.Sync.ProgressArgs.ProgressLevel" />
        </member>
        <member name="P:Dotmim.Sync.SchemaNameCreatedArgs.Message">
            <inheritdoc cref="P:Dotmim.Sync.ProgressArgs.Message" />
        </member>
        <member name="P:Dotmim.Sync.SchemaNameCreatedArgs.EventId">
            <inheritdoc cref="P:Dotmim.Sync.ProgressArgs.EventId" />
        </member>
        <member name="T:Dotmim.Sync.SchemaNameCreatingArgs">
            <summary>
            Event args generated when a schema is creating.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SchemaNameCreatingArgs.#ctor(Dotmim.Sync.SyncContext,Dotmim.Sync.ScopeInfo,Dotmim.Sync.SyncTable,System.Data.Common.DbCommand,System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <inheritdoc cref="T:Dotmim.Sync.SchemaNameCreatingArgs" />
        </member>
        <member name="P:Dotmim.Sync.SchemaNameCreatingArgs.Cancel">
            <summary>
            Gets or sets a value indicating whether gets or sets if the operation should be canceled.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SchemaNameCreatingArgs.Command">
            <summary>
            Gets or sets the command used to create the schema.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SchemaNameCreatingArgs.ScopeInfo">
            <summary>
            Gets the scope info on which the schema is creating.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SchemaNameCreatingArgs.Table">
            <summary>
            Gets the table on which the schema is creating.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SchemaNameCreatingArgs.ProgressLevel">
            <inheritdoc cref="P:Dotmim.Sync.ProgressArgs.ProgressLevel" />
        </member>
        <member name="P:Dotmim.Sync.SchemaNameCreatingArgs.Message">
            <inheritdoc cref="P:Dotmim.Sync.ProgressArgs.Message" />
        </member>
        <member name="P:Dotmim.Sync.SchemaNameCreatingArgs.EventId">
            <inheritdoc cref="P:Dotmim.Sync.ProgressArgs.EventId" />
        </member>
        <member name="T:Dotmim.Sync.TableCreatedArgs">
            <summary>
            Event args generated when a table is created.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.TableCreatedArgs.#ctor(Dotmim.Sync.SyncContext,Dotmim.Sync.ScopeInfo,Dotmim.Sync.SyncTable,System.String,System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <inheritdoc cref="T:Dotmim.Sync.TableCreatedArgs" />
        </member>
        <member name="P:Dotmim.Sync.TableCreatedArgs.ScopeInfo">
            <summary>
            Gets the scope info on which the table is created.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.TableCreatedArgs.Table">
            <summary>
            Gets the table created.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.TableCreatedArgs.TableFullName">
            <summary>
            Gets the table name created.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.TableCreatedArgs.Message">
            <inheritdoc cref="P:Dotmim.Sync.ProgressArgs.Message" />
        </member>
        <member name="P:Dotmim.Sync.TableCreatedArgs.ProgressLevel">
            <inheritdoc cref="P:Dotmim.Sync.ProgressArgs.ProgressLevel" />
        </member>
        <member name="P:Dotmim.Sync.TableCreatedArgs.EventId">
            <inheritdoc cref="P:Dotmim.Sync.ProgressArgs.EventId" />
        </member>
        <member name="T:Dotmim.Sync.TableCreatingArgs">
            <summary>
            Event args generated when a table is creating.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.TableCreatingArgs.#ctor(Dotmim.Sync.SyncContext,Dotmim.Sync.ScopeInfo,Dotmim.Sync.SyncTable,System.String,System.Data.Common.DbCommand,System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <inheritdoc cref="T:Dotmim.Sync.TableCreatingArgs" />
        </member>
        <member name="P:Dotmim.Sync.TableCreatingArgs.Cancel">
            <summary>
            Gets or sets a value indicating whether gets or sets if the operation should be canceled.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.TableCreatingArgs.Command">
            <summary>
            Gets or sets the command used to create the table.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.TableCreatingArgs.ScopeInfo">
            <summary>
            Gets the scope info on which the table is creating.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.TableCreatingArgs.Table">
            <summary>
            Gets the table creating.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.TableCreatingArgs.TableFullName">
            <summary>
            Gets the table name creating.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.TableCreatingArgs.ProgressLevel">
            <inheritdoc cref="P:Dotmim.Sync.ProgressArgs.ProgressLevel" />
        </member>
        <member name="P:Dotmim.Sync.TableCreatingArgs.Message">
            <inheritdoc cref="P:Dotmim.Sync.ProgressArgs.Message" />
        </member>
        <member name="P:Dotmim.Sync.TableCreatingArgs.EventId">
            <inheritdoc cref="P:Dotmim.Sync.ProgressArgs.EventId" />
        </member>
        <member name="T:Dotmim.Sync.TableDroppedArgs">
            <summary>
            Event args generated when a table is dropped.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.TableDroppedArgs.#ctor(Dotmim.Sync.SyncContext,Dotmim.Sync.ScopeInfo,Dotmim.Sync.SyncTable,System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <inheritdoc cref="T:Dotmim.Sync.TableDroppedArgs"/>
        </member>
        <member name="P:Dotmim.Sync.TableDroppedArgs.ScopeInfo">
            <summary>
            Gets the scope info on which the table is dropped.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.TableDroppedArgs.Table">
            <summary>
            Gets the table dropped.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.TableDroppedArgs.Message">
            <inheritdoc cref="P:Dotmim.Sync.ProgressArgs.Message"/>
        </member>
        <member name="P:Dotmim.Sync.TableDroppedArgs.ProgressLevel">
            <inheritdoc cref="P:Dotmim.Sync.ProgressArgs.ProgressLevel"/>
        </member>
        <member name="P:Dotmim.Sync.TableDroppedArgs.EventId">
            <inheritdoc cref="P:Dotmim.Sync.ProgressArgs.EventId"/>
        </member>
        <member name="T:Dotmim.Sync.TableDroppingArgs">
            <summary>
            Event args generated when a table is dropping.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.TableDroppingArgs.#ctor(Dotmim.Sync.SyncContext,Dotmim.Sync.ScopeInfo,Dotmim.Sync.SyncTable,System.Data.Common.DbCommand,System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <inheritdoc cref="T:Dotmim.Sync.TableDroppingArgs"/>
        </member>
        <member name="P:Dotmim.Sync.TableDroppingArgs.Cancel">
            <summary>
            Gets or sets a value indicating whether gets or sets if the operation should be canceled.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.TableDroppingArgs.Command">
            <summary>
            Gets or sets the command used to drop the table.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.TableDroppingArgs.ScopeInfo">
            <summary>
            Gets the scope info on which the table is dropping.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.TableDroppingArgs.Table">
            <summary>
            Gets the table dropping.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.TableDroppingArgs.ProgressLevel">
            <inheritdoc cref="P:Dotmim.Sync.ProgressArgs.ProgressLevel"/>
        </member>
        <member name="P:Dotmim.Sync.TableDroppingArgs.Message">
            <inheritdoc cref="P:Dotmim.Sync.ProgressArgs.Message"/>
        </member>
        <member name="P:Dotmim.Sync.TableDroppingArgs.EventId">
            <inheritdoc cref="P:Dotmim.Sync.ProgressArgs.EventId"/>
        </member>
        <member name="T:Dotmim.Sync.TableChangesAppliedArgs">
            <summary>
            Event args raised when all changes for a table have been applied on a datasource.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.TableChangesAppliedArgs.#ctor(Dotmim.Sync.SyncContext,Dotmim.Sync.TableChangesApplied,System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <inheritdoc cref="T:Dotmim.Sync.TableChangesAppliedArgs"/>
        </member>
        <member name="P:Dotmim.Sync.TableChangesAppliedArgs.TableChangesApplied">
            <summary>
            Gets or sets the changes applied on the datasource.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.TableChangesAppliedArgs.ProgressLevel">
            <inheritdoc cref="P:Dotmim.Sync.ProgressArgs.ProgressLevel"/>
        </member>
        <member name="P:Dotmim.Sync.TableChangesAppliedArgs.Message">
            <inheritdoc cref="P:Dotmim.Sync.ProgressArgs.Message"/>
        </member>
        <member name="P:Dotmim.Sync.TableChangesAppliedArgs.EventId">
            <inheritdoc cref="P:Dotmim.Sync.ProgressArgs.EventId"/>
        </member>
        <member name="T:Dotmim.Sync.TableChangesApplyingArgs">
            <summary>
            Event args before a table changes is going to be applied on a datasource.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.TableChangesApplyingArgs.#ctor(Dotmim.Sync.SyncContext,Dotmim.Sync.Batch.BatchInfo,System.Collections.Generic.IEnumerable{Dotmim.Sync.Batch.BatchPartInfo},Dotmim.Sync.SyncTable,Dotmim.Sync.Enumerations.SyncRowState,System.Data.Common.DbCommand,System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <inheritdoc cref="T:Dotmim.Sync.TableChangesApplyingArgs"/>
        </member>
        <member name="P:Dotmim.Sync.TableChangesApplyingArgs.Cancel">
            <summary>
            Gets or sets a value indicating whether gets or sets if the changes should be canceled.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.TableChangesApplyingArgs.State">
            <summary>
            Gets the RowState of the applied rows.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.TableChangesApplyingArgs.Command">
            <summary>
            Gets or sets the command to be executed.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.TableChangesApplyingArgs.BatchInfo">
            <summary>
            Gets or sets the batch info.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.TableChangesApplyingArgs.BatchPartInfos">
            <summary>
            Gets the batch part infos.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.TableChangesApplyingArgs.SchemaTable">
            <summary>
            Gets the table schema.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.TableChangesApplyingArgs.ProgressLevel">
            <inheritdoc cref="P:Dotmim.Sync.ProgressArgs.ProgressLevel"/>
        </member>
        <member name="P:Dotmim.Sync.TableChangesApplyingArgs.Message">
            <inheritdoc cref="P:Dotmim.Sync.ProgressArgs.Message"/>
        </member>
        <member name="P:Dotmim.Sync.TableChangesApplyingArgs.EventId">
            <inheritdoc cref="P:Dotmim.Sync.ProgressArgs.EventId"/>
        </member>
        <member name="T:Dotmim.Sync.TableChangesSelectedArgs">
            <summary>
            Contains batches information about changes from underline data sources.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.TableChangesSelectedArgs.#ctor(Dotmim.Sync.SyncContext,Dotmim.Sync.Batch.BatchInfo,System.Collections.Generic.IEnumerable{Dotmim.Sync.Batch.BatchPartInfo},Dotmim.Sync.SyncTable,Dotmim.Sync.TableChangesSelected,System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <inheritdoc cref="T:Dotmim.Sync.TableChangesSelectedArgs" />
        </member>
        <member name="P:Dotmim.Sync.TableChangesSelectedArgs.BatchInfo">
            <summary>
            Gets the BatchInfo related.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.TableChangesSelectedArgs.BatchPartInfos">
            <summary>
            Gets the SyncTable instances containing all changes selected.
            If you get this instance from a call from GetEstimatedChangesCount, this property is always null.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.TableChangesSelectedArgs.SchemaTable">
            <summary>
            Gets the table schema.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.TableChangesSelectedArgs.TableChangesSelected">
            <summary>
            Gets the incremental summary of changes selected.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.TableChangesSelectedArgs.ProgressLevel">
            <inheritdoc cref="P:Dotmim.Sync.ProgressArgs.ProgressLevel"/>
        </member>
        <member name="P:Dotmim.Sync.TableChangesSelectedArgs.Message">
            <inheritdoc cref="P:Dotmim.Sync.ProgressArgs.Message"/>
        </member>
        <member name="P:Dotmim.Sync.TableChangesSelectedArgs.EventId">
            <inheritdoc cref="P:Dotmim.Sync.ProgressArgs.EventId"/>
        </member>
        <member name="T:Dotmim.Sync.TableChangesSelectingArgs">
            <summary>
            Raise before selecting changes will occur.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.TableChangesSelectingArgs.#ctor(Dotmim.Sync.SyncContext,Dotmim.Sync.SyncTable,System.Data.Common.DbCommand,System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <inheritdoc cref="T:Dotmim.Sync.TableChangesSelectingArgs" />
        </member>
        <member name="P:Dotmim.Sync.TableChangesSelectingArgs.Cancel">
            <summary>
            Gets or sets a value indicating whether the get changes command should be canceled.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.TableChangesSelectingArgs.Command">
            <summary>
            Gets or sets the command to be executed.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.TableChangesSelectingArgs.SchemaTable">
            <summary>
            Gets the table from where the changes are going to be selected.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.TableChangesSelectingArgs.Message">
            <inheritdoc cref="P:Dotmim.Sync.ProgressArgs.Message"/>
        </member>
        <member name="P:Dotmim.Sync.TableChangesSelectingArgs.ProgressLevel">
            <inheritdoc cref="P:Dotmim.Sync.ProgressArgs.ProgressLevel"/>
        </member>
        <member name="P:Dotmim.Sync.TableChangesSelectingArgs.EventId">
            <inheritdoc cref="P:Dotmim.Sync.ProgressArgs.EventId"/>
        </member>
        <member name="T:Dotmim.Sync.TableResetAppliedArgs">
            <summary>
            Event args raised when a table is reset due to Reinitialize call.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.TableResetAppliedArgs.#ctor(Dotmim.Sync.SyncContext,Dotmim.Sync.SyncTable,System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <inheritdoc cref="T:Dotmim.Sync.TableResetAppliedArgs" />
        </member>
        <member name="P:Dotmim.Sync.TableResetAppliedArgs.Table">
            <summary>
            Gets or sets the table that has been reset.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.TableResetAppliedArgs.ProgressLevel">
            <inheritdoc cref="P:Dotmim.Sync.ProgressArgs.ProgressLevel" />
        </member>
        <member name="P:Dotmim.Sync.TableResetAppliedArgs.Message">
            <inheritdoc cref="P:Dotmim.Sync.ProgressArgs.Message" />
        </member>
        <member name="P:Dotmim.Sync.TableResetAppliedArgs.EventId">
            <inheritdoc cref="P:Dotmim.Sync.ProgressArgs.EventId" />
        </member>
        <member name="T:Dotmim.Sync.TrackingTableCreatedArgs">
            <summary>
            Event args generated after a tracking table is created.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.TrackingTableCreatedArgs.#ctor(Dotmim.Sync.SyncContext,Dotmim.Sync.ScopeInfo,Dotmim.Sync.SyncTable,System.String,System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <inheritdoc cref="T:Dotmim.Sync.TrackingTableCreatedArgs" />
        </member>
        <member name="P:Dotmim.Sync.TrackingTableCreatedArgs.ScopeInfo">
            <summary>
            Gets the scope information after the tracking table has been created.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.TrackingTableCreatedArgs.Table">
            <summary>
            Gets the tracking table created.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.TrackingTableCreatedArgs.TrackingTableFullName">
            <summary>
            Gets the tracking table name.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.TrackingTableCreatedArgs.Message">
            <inheritdoc cref="P:Dotmim.Sync.ProgressArgs.Message" />
        </member>
        <member name="P:Dotmim.Sync.TrackingTableCreatedArgs.ProgressLevel">
            <inheritdoc cref="P:Dotmim.Sync.ProgressArgs.ProgressLevel" />
        </member>
        <member name="P:Dotmim.Sync.TrackingTableCreatedArgs.EventId">
            <inheritdoc cref="P:Dotmim.Sync.ProgressArgs.EventId" />
        </member>
        <member name="T:Dotmim.Sync.TrackingTableCreatingArgs">
            <summary>
            Event args generated before a tracking table is creating.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.TrackingTableCreatingArgs.#ctor(Dotmim.Sync.SyncContext,Dotmim.Sync.ScopeInfo,Dotmim.Sync.SyncTable,System.String,System.Data.Common.DbCommand,System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <inheritdoc cref="T:Dotmim.Sync.TrackingTableCreatingArgs" />
        </member>
        <member name="P:Dotmim.Sync.TrackingTableCreatingArgs.ScopeInfo">
            <summary>
            Gets the scope information before the tracking table is created.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.TrackingTableCreatingArgs.Table">
            <summary>
            Gets the tracking table to be created.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.TrackingTableCreatingArgs.TrackingTableFullName">
            <summary>
            Gets the tracking table name.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.TrackingTableCreatingArgs.Cancel">
            <summary>
            Gets or sets a value indicating whether the tracking table creation should be canceled.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.TrackingTableCreatingArgs.Command">
            <summary>
            Gets or sets the command to be executed.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.TrackingTableCreatingArgs.ProgressLevel">
            <inheritdoc cref="P:Dotmim.Sync.ProgressArgs.ProgressLevel" />
        </member>
        <member name="P:Dotmim.Sync.TrackingTableCreatingArgs.Message">
            <inheritdoc cref="P:Dotmim.Sync.ProgressArgs.Message" />
        </member>
        <member name="P:Dotmim.Sync.TrackingTableCreatingArgs.EventId">
            <inheritdoc cref="P:Dotmim.Sync.ProgressArgs.EventId" />
        </member>
        <member name="T:Dotmim.Sync.TrackingTableDroppedArgs">
            <summary>
            Gets the tracking table dropped.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.TrackingTableDroppedArgs.#ctor(Dotmim.Sync.SyncContext,Dotmim.Sync.ScopeInfo,Dotmim.Sync.SyncTable,System.String,System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <inheritdoc cref="T:Dotmim.Sync.TrackingTableDroppedArgs" />
        </member>
        <member name="P:Dotmim.Sync.TrackingTableDroppedArgs.ScopeInfo">
            <summary>
            Gets the scope information after the tracking table has been dropped.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.TrackingTableDroppedArgs.Table">
            <summary>
            Gets the tracking table dropped.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.TrackingTableDroppedArgs.TrackingTableFullName">
            <summary>
            Gets the tracking table name.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.TrackingTableDroppedArgs.Message">
            <inheritdoc cref="P:Dotmim.Sync.ProgressArgs.Message" />
        </member>
        <member name="P:Dotmim.Sync.TrackingTableDroppedArgs.ProgressLevel">
            <inheritdoc cref="P:Dotmim.Sync.ProgressArgs.ProgressLevel" />
        </member>
        <member name="P:Dotmim.Sync.TrackingTableDroppedArgs.EventId">
            <inheritdoc cref="P:Dotmim.Sync.ProgressArgs.EventId" />
        </member>
        <member name="T:Dotmim.Sync.TrackingTableDroppingArgs">
            <summary>
            Event args generated before a tracking table is dropping.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.TrackingTableDroppingArgs.#ctor(Dotmim.Sync.SyncContext,Dotmim.Sync.ScopeInfo,Dotmim.Sync.SyncTable,System.String,System.Data.Common.DbCommand,System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <inheritdoc cref="T:Dotmim.Sync.TrackingTableDroppingArgs" />
        </member>
        <member name="P:Dotmim.Sync.TrackingTableDroppingArgs.Cancel">
            <summary>
            Gets or sets a value indicating whether the tracking table dropping should be canceled.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.TrackingTableDroppingArgs.Command">
            <summary>
            Gets or sets the command to be executed.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.TrackingTableDroppingArgs.ScopeInfo">
            <summary>
            Gets the scope information before the tracking table is dropped.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.TrackingTableDroppingArgs.Table">
            <summary>
            Gets the tracking table to be dropped.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.TrackingTableDroppingArgs.TrackingTableFullName">
            <summary>
            Gets the tracking table name.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.TrackingTableDroppingArgs.ProgressLevel">
            <inheritdoc cref="P:Dotmim.Sync.ProgressArgs.ProgressLevel" />
        </member>
        <member name="P:Dotmim.Sync.TrackingTableDroppingArgs.Message">
            <inheritdoc cref="P:Dotmim.Sync.ProgressArgs.Message" />
        </member>
        <member name="P:Dotmim.Sync.TrackingTableDroppingArgs.EventId">
            <inheritdoc cref="P:Dotmim.Sync.ProgressArgs.EventId" />
        </member>
        <member name="T:Dotmim.Sync.TriggerCreatedArgs">
            <summary>
            Event args generated when a trigger is created.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.TriggerCreatedArgs.#ctor(Dotmim.Sync.SyncContext,Dotmim.Sync.ScopeInfo,Dotmim.Sync.SyncTable,Dotmim.Sync.Builders.DbTriggerType,System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <inheritdoc cref="T:Dotmim.Sync.TriggerCreatedArgs" />
        </member>
        <member name="P:Dotmim.Sync.TriggerCreatedArgs.ScopeInfo">
            <summary>
            Gets the scope information after the trigger has been created.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.TriggerCreatedArgs.Table">
            <summary>
            Gets the table on which the trigger is created.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.TriggerCreatedArgs.TriggerType">
            <summary>
            Gets the trigger type.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.TriggerCreatedArgs.Message">
            <inheritdoc cref="P:Dotmim.Sync.ProgressArgs.Message"/>
        </member>
        <member name="P:Dotmim.Sync.TriggerCreatedArgs.ProgressLevel">
            <inheritdoc cref="P:Dotmim.Sync.ProgressArgs.ProgressLevel"/>
        </member>
        <member name="P:Dotmim.Sync.TriggerCreatedArgs.EventId">
            <inheritdoc cref="P:Dotmim.Sync.ProgressArgs.EventId"/>
        </member>
        <member name="T:Dotmim.Sync.TriggerCreatingArgs">
            <summary>
            Event args generated when a trigger is creating.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.TriggerCreatingArgs.#ctor(Dotmim.Sync.SyncContext,Dotmim.Sync.ScopeInfo,Dotmim.Sync.SyncTable,Dotmim.Sync.Builders.DbTriggerType,System.Data.Common.DbCommand,System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <inheritdoc cref="T:Dotmim.Sync.TriggerCreatingArgs" />
        </member>
        <member name="P:Dotmim.Sync.TriggerCreatingArgs.Cancel">
            <summary>
            Gets or sets a value indicating whether gets the table on which the trigger is creating.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.TriggerCreatingArgs.Command">
            <summary>
            Gets or sets the command used to create the trigger.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.TriggerCreatingArgs.ScopeInfo">
            <summary>
            Gets the scope information before the trigger is creating.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.TriggerCreatingArgs.Table">
            <summary>
            Gets the table on which the trigger is creating.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.TriggerCreatingArgs.TriggerType">
            <summary>
            Gets the trigger type.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.TriggerCreatingArgs.Message">
            <inheritdoc cref="P:Dotmim.Sync.ProgressArgs.Message"/>
        </member>
        <member name="P:Dotmim.Sync.TriggerCreatingArgs.ProgressLevel">
            <inheritdoc cref="P:Dotmim.Sync.ProgressArgs.ProgressLevel"/>
        </member>
        <member name="P:Dotmim.Sync.TriggerCreatingArgs.EventId">
            <inheritdoc cref="P:Dotmim.Sync.ProgressArgs.EventId"/>
        </member>
        <member name="T:Dotmim.Sync.TriggerDroppedArgs">
            <summary>
            Event args generated when a trigger is dropped.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.TriggerDroppedArgs.#ctor(Dotmim.Sync.SyncContext,Dotmim.Sync.SyncTable,Dotmim.Sync.Builders.DbTriggerType,System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <inheritdoc cref="T:Dotmim.Sync.TriggerDroppedArgs" />
        </member>
        <member name="P:Dotmim.Sync.TriggerDroppedArgs.Table">
            <summary>
            Gets the table on which the trigger is dropped.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.TriggerDroppedArgs.TriggerType">
            <summary>
            Gets the trigger type.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.TriggerDroppedArgs.Message">
            <inheritdoc cref="P:Dotmim.Sync.ProgressArgs.Message"/>
        </member>
        <member name="P:Dotmim.Sync.TriggerDroppedArgs.ProgressLevel">
            <inheritdoc cref="P:Dotmim.Sync.ProgressArgs.ProgressLevel"/>
        </member>
        <member name="P:Dotmim.Sync.TriggerDroppedArgs.EventId">
            <inheritdoc cref="P:Dotmim.Sync.ProgressArgs.EventId"/>
        </member>
        <member name="T:Dotmim.Sync.TriggerDroppingArgs">
            <summary>
            Event args generated when a trigger is dropping.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.TriggerDroppingArgs.#ctor(Dotmim.Sync.SyncContext,Dotmim.Sync.SyncTable,Dotmim.Sync.Builders.DbTriggerType,System.Data.Common.DbCommand,System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <inheritdoc cref="T:Dotmim.Sync.TriggerDroppingArgs" />
        </member>
        <member name="P:Dotmim.Sync.TriggerDroppingArgs.Table">
            <summary>
            Gets the table on which the trigger is dropping.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.TriggerDroppingArgs.TriggerType">
            <summary>
            Gets the trigger type.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.TriggerDroppingArgs.Cancel">
            <summary>
            Gets or sets a value indicating whether the trigger dropping should be canceled.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.TriggerDroppingArgs.Command">
            <summary>
            Gets or sets the command used to drop the trigger.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.TriggerDroppingArgs.Message">
            <inheritdoc cref="P:Dotmim.Sync.ProgressArgs.Message"/>
        </member>
        <member name="P:Dotmim.Sync.TriggerDroppingArgs.ProgressLevel">
            <inheritdoc cref="P:Dotmim.Sync.ProgressArgs.ProgressLevel"/>
        </member>
        <member name="P:Dotmim.Sync.TriggerDroppingArgs.EventId">
            <inheritdoc cref="P:Dotmim.Sync.ProgressArgs.EventId"/>
        </member>
        <member name="T:Dotmim.Sync.UpgradeProgressArgs">
            <summary>
            Event args raised during the upgrade process.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.UpgradeProgressArgs.#ctor(Dotmim.Sync.SyncContext,System.String,System.Version,System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <inheritdoc cref="T:Dotmim.Sync.UpgradeProgressArgs" />
        </member>
        <member name="P:Dotmim.Sync.UpgradeProgressArgs.Table">
            <summary>
            Gets the table that has been upgraded.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.UpgradeProgressArgs.Version">
            <summary>
            Gets the version of the database.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.UpgradeProgressArgs.ProgressLevel">
            <inheritdoc cref="P:Dotmim.Sync.ProgressArgs.ProgressLevel" />
        </member>
        <member name="P:Dotmim.Sync.UpgradeProgressArgs.Message">
            <inheritdoc cref="P:Dotmim.Sync.ProgressArgs.Message" />
        </member>
        <member name="P:Dotmim.Sync.UpgradeProgressArgs.EventId">
            <inheritdoc cref="P:Dotmim.Sync.ProgressArgs.EventId" />
        </member>
        <member name="T:Dotmim.Sync.Batch.BatchInfo">
            <summary>
            Represents a collection of files serialized in a directory, and containing all the batch parts.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Batch.BatchInfo.#ctor">
            <inheritdoc cref="T:Dotmim.Sync.Batch.BatchInfo"/>
        </member>
        <member name="M:Dotmim.Sync.Batch.BatchInfo.#ctor(System.String,System.String,System.String)">
            <inheritdoc cref="T:Dotmim.Sync.Batch.BatchInfo"/>
        </member>
        <member name="M:Dotmim.Sync.Batch.BatchInfo.GenerateNewFileName(System.String,System.String,System.String,System.String)">
            <summary>
            generate a batch file name.
            The index string is always a 4 digits string, using "0" as placeholder ("0001", "0012" ...) You can't exceed 9999 batch parts.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.Batch.BatchInfo.DirectoryName">
            <summary>
            Gets or Sets directory name.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.Batch.BatchInfo.DirectoryRoot">
            <summary>
            Gets or sets directory root.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.Batch.BatchInfo.Timestamp">
            <summary>
            Gets or sets server timestamp.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.Batch.BatchInfo.BatchPartsInfo">
            <summary>
            Gets or sets list of batch parts.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.Batch.BatchInfo.RowsCount">
            <summary>
            Gets or Sets the rows count contained in the batch info.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.Batch.BatchInfo.SerializerFactoryKey">
            <summary>
            Gets or Sets the Serialization Factory Key used to serialize this batch info.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Batch.BatchInfo.GetDirectoryFullPath">
            <summary>
            Get the full path of the Batch directory.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Batch.BatchInfo.HasData">
            <summary>
            Check if this batchinfo has some data by summing all batch parts rows count.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Batch.BatchInfo.GetNewBatchPartInfoPath(Dotmim.Sync.SyncTable,System.Int32,System.String,System.String)">
            <summary>
            Generate a new full path to store a new batch part info file.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Batch.BatchInfo.GetBatchPartInfoFullPath(Dotmim.Sync.Batch.BatchPartInfo)">
            <summary>
            Gets the full path + file name for a given batch part info.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Batch.BatchInfo.HasData(System.String,System.String)">
            <summary>
            Check if this batchinfo has some data for a defined table.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Batch.BatchInfo.GetBatchPartsInfos(Dotmim.Sync.SyncTable)">
            <summary>
            Get all batch part for 1 particular table.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Batch.BatchInfo.GetBatchPartsInfos(System.String,System.String)">
            <summary>
            Get all batch part for 1 particular table.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Batch.BatchInfo.EnsureLastBatch">
            <summary>
            Ensure the last batch part has the correct IsLastBatch flag.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Batch.BatchInfo.TryRemoveDirectory">
            <summary>
            try to delete the Batch tmp directory and all the files stored in it.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Batch.BatchInfo.ToString">
            <summary>
            Get the full path of the Batch directory and number of rows contained in the batchinfo.
            </summary>
        </member>
        <member name="T:Dotmim.Sync.Batch.BatchPartInfo">
            <summary>
            Info about a BatchPart
            Will be serialized in the BatchInfo file.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.Batch.BatchPartInfo.FileName">
            <summary>
            Gets or sets batch part file name.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.Batch.BatchPartInfo.Index">
            <summary>
            Gets or sets ordered batch part file index.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.Batch.BatchPartInfo.IsLastBatch">
            <summary>
            Gets or sets a value indicating whether gets if the batch part file is the last one.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.Batch.BatchPartInfo.RowsCount">
            <summary>
            Gets or sets tables contained rows count.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.Batch.BatchPartInfo.TableName">
            <summary>
            Gets or sets the name of the table that the DmTableSurrogate object represents.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.Batch.BatchPartInfo.SchemaName">
            <summary>
            Gets or sets get or Set the schema used for the DmTableSurrogate.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.Batch.BatchPartInfo.State">
            <summary>
            Gets or sets get or Set the schema used for the DmTableSurrogate.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Batch.BatchPartInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Dotmim.Sync.Batch.BatchPartInfo"/> class.
            ctor for serialization purpose.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Batch.BatchPartInfo.#ctor(System.String,System.String,System.String,Dotmim.Sync.Enumerations.SyncRowState,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Dotmim.Sync.Batch.BatchPartInfo"/> class.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Batch.BatchPartInfo.ToString">
            <summary>
            Return batch part table name + rows count.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Batch.BatchPartInfo.GetAllNamesProperties">
            <inheritdoc cref="M:Dotmim.Sync.SyncNamedItem`1.GetAllNamesProperties"/>
        </member>
        <member name="T:Dotmim.Sync.Builders.DbColumnNames">
            <summary>
            Parsed names of a column.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Builders.DbColumnNames.#ctor">
            <inheritdoc cref="T:Dotmim.Sync.Builders.DbColumnNames"/>
        </member>
        <member name="M:Dotmim.Sync.Builders.DbColumnNames.#ctor(System.String,System.String)">
            <inheritdoc cref="T:Dotmim.Sync.Builders.DbColumnNames"/>
        </member>
        <member name="P:Dotmim.Sync.Builders.DbColumnNames.QuotedName">
            <summary>
            Gets the parsed quoted column short name (without schema, if any).
            </summary>
        </member>
        <member name="P:Dotmim.Sync.Builders.DbColumnNames.NormalizedName">
            <summary>
            Gets the parsed normalized column short name (without schema, if any).
            </summary>
        </member>
        <member name="T:Dotmim.Sync.Builders.DbCommandType">
            <summary>
            All commands type used during sync.
            </summary>
        </member>
        <member name="F:Dotmim.Sync.Builders.DbCommandType.None">
            <summary>
            No command type specified.
            </summary>
        </member>
        <member name="F:Dotmim.Sync.Builders.DbCommandType.SelectChanges">
            <summary>
            Select changes command from the current provider.
            </summary>
        </member>
        <member name="F:Dotmim.Sync.Builders.DbCommandType.SelectInitializedChanges">
            <summary>
            Select initial changes command from the server provider to be applied on client side.
            </summary>
        </member>
        <member name="F:Dotmim.Sync.Builders.DbCommandType.SelectInitializedChangesWithFilters">
            <summary>
            Select initial changes command from the server provider, with filters, to be applied on client side.
            </summary>
        </member>
        <member name="F:Dotmim.Sync.Builders.DbCommandType.SelectChangesWithFilters">
            <summary>
            Select changes command from the current provider, with filters.
            </summary>
        </member>
        <member name="F:Dotmim.Sync.Builders.DbCommandType.SelectRow">
            <summary>
            Select a particular record command.
            </summary>
        </member>
        <member name="F:Dotmim.Sync.Builders.DbCommandType.UpdateRow">
            <summary>
            Update a particular record command.
            </summary>
        </member>
        <member name="F:Dotmim.Sync.Builders.DbCommandType.InsertRow">
            <summary>
            Insert a particular record command.
            </summary>
        </member>
        <member name="F:Dotmim.Sync.Builders.DbCommandType.DeleteRow">
            <summary>
            Delete a particular record command.
            </summary>
        </member>
        <member name="F:Dotmim.Sync.Builders.DbCommandType.DisableConstraints">
            <summary>
            Delete constraints command.
            </summary>
        </member>
        <member name="F:Dotmim.Sync.Builders.DbCommandType.EnableConstraints">
            <summary>
            Enable constraints command.
            </summary>
        </member>
        <member name="F:Dotmim.Sync.Builders.DbCommandType.DeleteMetadata">
            <summary>
            Delete metadata command.
            </summary>
        </member>
        <member name="F:Dotmim.Sync.Builders.DbCommandType.UpdateMetadata">
            <summary>
            Update metadata command.
            </summary>
        </member>
        <member name="F:Dotmim.Sync.Builders.DbCommandType.SelectMetadata">
            <summary>
            Select metadata command.
            </summary>
        </member>
        <member name="F:Dotmim.Sync.Builders.DbCommandType.InsertTrigger">
            <summary>
            Insert trigger command.
            </summary>
        </member>
        <member name="F:Dotmim.Sync.Builders.DbCommandType.UpdateTrigger">
            <summary>
            Update trigger command.
            </summary>
        </member>
        <member name="F:Dotmim.Sync.Builders.DbCommandType.DeleteTrigger">
            <summary>
            Delete trigger command.
            </summary>
        </member>
        <member name="F:Dotmim.Sync.Builders.DbCommandType.UpdateRows">
            <summary>
            Update rows command.
            </summary>
        </member>
        <member name="F:Dotmim.Sync.Builders.DbCommandType.InsertRows">
            <summary>
            Insert rows command.
            </summary>
        </member>
        <member name="F:Dotmim.Sync.Builders.DbCommandType.DeleteRows">
            <summary>
            delete rows command.
            </summary>
        </member>
        <member name="F:Dotmim.Sync.Builders.DbCommandType.BulkTableType">
            <summary>
            Bulk table type creation command.
            </summary>
        </member>
        <member name="F:Dotmim.Sync.Builders.DbCommandType.UpdateUntrackedRows">
            <summary>
            Update untracked rows command on client side.
            </summary>
        </member>
        <member name="F:Dotmim.Sync.Builders.DbCommandType.Reset">
            <summary>
            Reset command.
            </summary>
        </member>
        <member name="F:Dotmim.Sync.Builders.DbCommandType.PreUpdateRows">
            <summary>
            Pre command before calling UpdateRows command.
            </summary>
        </member>
        <member name="F:Dotmim.Sync.Builders.DbCommandType.PreInsertRows">
            <summary>
            Pre command before calling InsertRows command.
            </summary>
        </member>
        <member name="F:Dotmim.Sync.Builders.DbCommandType.PreDeleteRows">
            <summary>
            Pre command before calling DeleteRows command.
            </summary>
        </member>
        <member name="F:Dotmim.Sync.Builders.DbCommandType.PreUpdateRow">
            <summary>
            Pre command before calling UpdateRow command.
            </summary>
        </member>
        <member name="F:Dotmim.Sync.Builders.DbCommandType.PreInsertRow">
            <summary>
            Pre command before calling InsertRow command.
            </summary>
        </member>
        <member name="F:Dotmim.Sync.Builders.DbCommandType.PreDeleteRow">
            <summary>
            Pre command before calling DeleteRow command.
            </summary>
        </member>
        <member name="T:Dotmim.Sync.Builders.DbDatabaseBuilder">
            <summary>
            Abstract class for all database builders.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Builders.DbDatabaseBuilder.EnsureDatabaseAsync(System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <summary>
            First step before creating schema.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Builders.DbDatabaseBuilder.EnsureTableAsync(System.String,System.String,System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <summary>
            First step before creating schema.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Builders.DbDatabaseBuilder.GetAllTablesAsync(System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <summary>
            Get all tables with column names from a database.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Builders.DbDatabaseBuilder.GetHelloAsync(System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <summary>
            Make a hello test on the current database.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Builders.DbDatabaseBuilder.GetTableAsync(System.String,System.String,System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <summary>
            Get a table with all rows from a table.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Builders.DbDatabaseBuilder.ExistsTableAsync(System.String,System.String,System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <summary>
            Check if a table exists.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Builders.DbDatabaseBuilder.DropsTableIfExistsAsync(System.String,System.String,System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <summary>
            Drops a table if exists.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Builders.DbDatabaseBuilder.RenameTableAsync(System.String,System.String,System.String,System.String,System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <summary>
            Rename a table.
            </summary>
        </member>
        <member name="T:Dotmim.Sync.Builders.DbScopeBuilder">
            <summary>
            Abstract class for all database scope info  builders.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Builders.DbScopeBuilder.GetParsedScopeInfoTableNames">
            <summary>
            Gets the parsed name of the table.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Builders.DbScopeBuilder.GetParsedScopeInfoClientTableNames">
            <summary>
            Gets the parsed name of the table.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Builders.DbScopeBuilder.GetExistsScopeInfoTableCommand(System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <summary>
            Returns a command to check if the scope_info table exists.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Builders.DbScopeBuilder.GetExistsScopeInfoClientTableCommand(System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <summary>
            Returns a command to check if the scope_info_client table exists.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Builders.DbScopeBuilder.GetCreateScopeInfoTableCommand(System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <summary>
            Returns a command to create the scope_info table.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Builders.DbScopeBuilder.GetCreateScopeInfoClientTableCommand(System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <summary>
            Returns a command to create the scope_info_client table.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Builders.DbScopeBuilder.GetAllScopeInfosCommand(System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <summary>
            Returns a command to get all scope info.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Builders.DbScopeBuilder.GetAllScopeInfoClientsCommand(System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <summary>
            Returns a command to get all scope info clients.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Builders.DbScopeBuilder.GetScopeInfoCommand(System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <summary>
            Returns a command to get a scope info.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Builders.DbScopeBuilder.GetScopeInfoClientCommand(System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <summary>
            Returns a command to get a scope info client.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Builders.DbScopeBuilder.GetInsertScopeInfoCommand(System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <summary>
            Returns a command to insert a new scope info.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Builders.DbScopeBuilder.GetInsertScopeInfoClientCommand(System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <summary>
            Returns a command to insert a new scope info client.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Builders.DbScopeBuilder.GetDeleteScopeInfoCommand(System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <summary>
            Returns a command to delete a scope info.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Builders.DbScopeBuilder.GetDeleteScopeInfoClientCommand(System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <summary>
            Returns a command to delete a scope info client.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Builders.DbScopeBuilder.GetUpdateScopeInfoCommand(System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <summary>
            Returns a command to update a scope info.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Builders.DbScopeBuilder.GetUpdateScopeInfoClientCommand(System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <summary>
            Returns a command to update a scope info client.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Builders.DbScopeBuilder.GetLocalTimestampCommand(System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <summary>
            Returns a command to check if a scope info exists.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Builders.DbScopeBuilder.GetDropScopeInfoTableCommand(System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <summary>
            Returns a command to drop the scope_info table.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Builders.DbScopeBuilder.GetDropScopeInfoClientTableCommand(System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <summary>
            Returns a command to drop the scope_info_client table.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Builders.DbScopeBuilder.GetExistsScopeInfoCommand(System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <summary>
            Returns a command to check if a scope info exists.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Builders.DbScopeBuilder.GetExistsScopeInfoClientCommand(System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <summary>
            Returns a command to check if a scope info client exists.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Builders.DbScopeBuilder.RemoveCommands">
            <summary>
            Remove a Command from internal shared dictionary.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Builders.DbScopeBuilder.GetCommandAsync(Dotmim.Sync.Builders.DbScopeCommandType,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,Dotmim.Sync.SyncFilter)">
            <summary>
            Get the command from provider, check connection is opened, affect connection and transaction
            Prepare the command parameters and add scope parameters.
            </summary>
        </member>
        <member name="T:Dotmim.Sync.Builders.DbScopeCommandType">
            <summary>
            All commands type for the scope info tables used during sync.
            </summary>
        </member>
        <member name="F:Dotmim.Sync.Builders.DbScopeCommandType.ExistsScopeInfoTable">
            <summary>
            Exists scope info table command.
            </summary>
        </member>
        <member name="F:Dotmim.Sync.Builders.DbScopeCommandType.ExistsScopeInfoClientTable">
            <summary>
            Exists scope info client table command.
            </summary>
        </member>
        <member name="F:Dotmim.Sync.Builders.DbScopeCommandType.CreateScopeInfoTable">
            <summary>
            Create scope info table command.
            </summary>
        </member>
        <member name="F:Dotmim.Sync.Builders.DbScopeCommandType.CreateScopeInfoClientTable">
            <summary>
            Create scope info client table command.
            </summary>
        </member>
        <member name="F:Dotmim.Sync.Builders.DbScopeCommandType.DropScopeInfoTable">
            <summary>
            Drop scope info table command.
            </summary>
        </member>
        <member name="F:Dotmim.Sync.Builders.DbScopeCommandType.DropScopeInfoClientTable">
            <summary>
            Drop scope info client table command.
            </summary>
        </member>
        <member name="F:Dotmim.Sync.Builders.DbScopeCommandType.GetAllScopeInfos">
            <summary>
            Get all scope info command.
            </summary>
        </member>
        <member name="F:Dotmim.Sync.Builders.DbScopeCommandType.GetAllScopeInfoClients">
            <summary>
            Get all scope info clients command.
            </summary>
        </member>
        <member name="F:Dotmim.Sync.Builders.DbScopeCommandType.GetScopeInfo">
            <summary>
            Get scope info command.
            </summary>
        </member>
        <member name="F:Dotmim.Sync.Builders.DbScopeCommandType.GetScopeInfoClient">
            <summary>
            Get scope info client command.
            </summary>
        </member>
        <member name="F:Dotmim.Sync.Builders.DbScopeCommandType.InsertScopeInfo">
            <summary>
            Insert scope info command.
            </summary>
        </member>
        <member name="F:Dotmim.Sync.Builders.DbScopeCommandType.InsertScopeInfoClient">
            <summary>
            Insert scope info client command.
            </summary>
        </member>
        <member name="F:Dotmim.Sync.Builders.DbScopeCommandType.UpdateScopeInfo">
            <summary>
            Update scope info command.
            </summary>
        </member>
        <member name="F:Dotmim.Sync.Builders.DbScopeCommandType.UpdateScopeInfoClient">
            <summary>
            Update scope info client command.
            </summary>
        </member>
        <member name="F:Dotmim.Sync.Builders.DbScopeCommandType.DeleteScopeInfo">
            <summary>
            Delete scope info command.
            </summary>
        </member>
        <member name="F:Dotmim.Sync.Builders.DbScopeCommandType.DeleteScopeInfoClient">
            <summary>
            Delete scope info client command.
            </summary>
        </member>
        <member name="F:Dotmim.Sync.Builders.DbScopeCommandType.ExistScopeInfo">
            <summary>
            Exist scope info command.
            </summary>
        </member>
        <member name="F:Dotmim.Sync.Builders.DbScopeCommandType.ExistScopeInfoClient">
            <summary>
            Exist scope info client command.
            </summary>
        </member>
        <member name="F:Dotmim.Sync.Builders.DbScopeCommandType.GetLocalTimestamp">
            <summary>
            Get local timestamp command.
            </summary>
        </member>
        <member name="T:Dotmim.Sync.Builders.DbScopeType">
            <summary>
            Scope type enumeration.
            </summary>
        </member>
        <member name="F:Dotmim.Sync.Builders.DbScopeType.ScopeInfo">
            <summary>
            Scope info table.
            </summary>
        </member>
        <member name="F:Dotmim.Sync.Builders.DbScopeType.ScopeInfoClient">
            <summary>
            Scope info client table.
            </summary>
        </member>
        <member name="T:Dotmim.Sync.Builders.DbStoredProcedureType">
            <summary>
            StoredProcedure type enumeration.
            </summary>
        </member>
        <member name="F:Dotmim.Sync.Builders.DbStoredProcedureType.SelectChanges">
            <summary>
            Select changes stored procedure.
            </summary>
        </member>
        <member name="F:Dotmim.Sync.Builders.DbStoredProcedureType.SelectChangesWithFilters">
            <summary>
            Select changes stored procedure with filters.
            </summary>
        </member>
        <member name="F:Dotmim.Sync.Builders.DbStoredProcedureType.SelectInitializedChanges">
            <summary>
            Select initialized changes stored procedure.
            </summary>
        </member>
        <member name="F:Dotmim.Sync.Builders.DbStoredProcedureType.SelectInitializedChangesWithFilters">
            <summary>
            Select initialized changes stored procedure with filters.
            </summary>
        </member>
        <member name="F:Dotmim.Sync.Builders.DbStoredProcedureType.SelectRow">
            <summary>
            Select a particular record stored procedure.
            </summary>
        </member>
        <member name="F:Dotmim.Sync.Builders.DbStoredProcedureType.UpdateRow">
            <summary>
            Update a particular record stored procedure.
            </summary>
        </member>
        <member name="F:Dotmim.Sync.Builders.DbStoredProcedureType.DeleteRow">
            <summary>
            Delete a particular record stored procedure.
            </summary>
        </member>
        <member name="F:Dotmim.Sync.Builders.DbStoredProcedureType.BulkUpdateRows">
            <summary>
            Bulk update rows stored procedure.
            </summary>
        </member>
        <member name="F:Dotmim.Sync.Builders.DbStoredProcedureType.BulkDeleteRows">
            <summary>
            Bulk delete rows stored procedure.
            </summary>
        </member>
        <member name="F:Dotmim.Sync.Builders.DbStoredProcedureType.Reset">
            <summary>
            Reset stored procedure.
            </summary>
        </member>
        <member name="F:Dotmim.Sync.Builders.DbStoredProcedureType.BulkTableType">
            <summary>
            Bulk table type creation stored procedure.
            </summary>
        </member>
        <member name="T:Dotmim.Sync.Builders.DbTableBuilder">
            <summary>
            Table builder for a database provider.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Builders.DbTableBuilder.#ctor(Dotmim.Sync.SyncTable,Dotmim.Sync.ScopeInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Dotmim.Sync.Builders.DbTableBuilder"/> class.
            Construct a DbBuilder.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.Builders.DbTableBuilder.TableDescription">
            <summary>
            Gets or sets the table description for the current DbBuilder.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.Builders.DbTableBuilder.ScopeInfo">
            <summary>
            Gets the scope information.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Builders.DbTableBuilder.GetParsedTableNames">
            <summary>
            Gets the parsed name of the table.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Builders.DbTableBuilder.GetParsedTrackingTableNames">
            <summary>
            Gets the parsed name of the table.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Builders.DbTableBuilder.GetParsedColumnNames(Dotmim.Sync.SyncColumn)">
            <summary>
            Gets the parsed columns names.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Builders.DbTableBuilder.GetCreateSchemaCommandAsync(System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <summary>
            Returns a command to create a schema.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Builders.DbTableBuilder.GetCreateTableCommandAsync(System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <summary>
            Returns a command to create a table.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Builders.DbTableBuilder.GetExistsTableCommandAsync(System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <summary>
            Returns a command to check if a table exists.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Builders.DbTableBuilder.GetExistsSchemaCommandAsync(System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <summary>
            Returns a command to check if a schema exists.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Builders.DbTableBuilder.GetDropTableCommandAsync(System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <summary>
            Returns a command to drop a table.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Builders.DbTableBuilder.GetExistsColumnCommandAsync(System.String,System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <summary>
            Returns a command to drop a schema.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Builders.DbTableBuilder.GetAddColumnCommandAsync(System.String,System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <summary>
            Returns a command to add a new column to a table.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Builders.DbTableBuilder.GetDropColumnCommandAsync(System.String,System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <summary>
            Returns a command to drop a column.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Builders.DbTableBuilder.GetExistsStoredProcedureCommandAsync(Dotmim.Sync.Builders.DbStoredProcedureType,Dotmim.Sync.SyncFilter,System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <summary>
            Returns a command to check if a stored procedure exists.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Builders.DbTableBuilder.GetCreateStoredProcedureCommandAsync(Dotmim.Sync.Builders.DbStoredProcedureType,Dotmim.Sync.SyncFilter,System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <summary>
            Returns a command to create a stored procedure.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Builders.DbTableBuilder.GetDropStoredProcedureCommandAsync(Dotmim.Sync.Builders.DbStoredProcedureType,Dotmim.Sync.SyncFilter,System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <summary>
            Returns a command to drop a stored procedure.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Builders.DbTableBuilder.GetCreateTrackingTableCommandAsync(System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <summary>
            Returns a command to create a tracking table.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Builders.DbTableBuilder.GetDropTrackingTableCommandAsync(System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <summary>
            Returns a command to drop a tracking table.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Builders.DbTableBuilder.GetExistsTrackingTableCommandAsync(System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <summary>
            Returns a command to check if a tracking table exists.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Builders.DbTableBuilder.GetExistsTriggerCommandAsync(Dotmim.Sync.Builders.DbTriggerType,System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <summary>
            Returns a command to check if a trigger exists.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Builders.DbTableBuilder.GetCreateTriggerCommandAsync(Dotmim.Sync.Builders.DbTriggerType,System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <summary>
            Returns a command to create a trigger.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Builders.DbTableBuilder.GetDropTriggerCommandAsync(Dotmim.Sync.Builders.DbTriggerType,System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <summary>
            Returns a command to drop a trigger.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Builders.DbTableBuilder.GetColumnsAsync(System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <summary>
            Gets a columns list from the datastore.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Builders.DbTableBuilder.GetRelationsAsync(System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <summary>
            Gets all relations from a current table. If composite, must be ordered.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Builders.DbTableBuilder.GetPrimaryKeysAsync(System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <summary>
            Get all primary keys. If composite, must be ordered.
            </summary>
        </member>
        <member name="T:Dotmim.Sync.Builders.DbTableNames">
            <summary>
            Parsed definition of a table.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Builders.DbTableNames.#ctor">
            <inheritdoc cref="T:Dotmim.Sync.Builders.DbTableNames"/>
        </member>
        <member name="M:Dotmim.Sync.Builders.DbTableNames.#ctor(System.Char,System.Char,System.String,System.String,System.String,System.String,System.String,System.String)">
            <inheritdoc cref="T:Dotmim.Sync.Builders.DbTableNames"/>
        </member>
        <member name="P:Dotmim.Sync.Builders.DbTableNames.QuotePrefix">
            <summary>
            Gets or sets the prefix quote character.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.Builders.DbTableNames.QuoteSuffix">
            <summary>
            Gets or sets the suffix quote character.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.Builders.DbTableNames.Name">
            <summary>
            Gets or sets the parsed table name, without any quotes characters.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.Builders.DbTableNames.NormalizedFullName">
            <summary>
            Gets or sets the parsed normalized table full name (with schema, if any).
            </summary>
        </member>
        <member name="P:Dotmim.Sync.Builders.DbTableNames.NormalizedName">
            <summary>
            Gets or sets the parsed normalized table short name (without schema, if any).
            </summary>
        </member>
        <member name="P:Dotmim.Sync.Builders.DbTableNames.QuotedFullName">
            <summary>
            Gets or sets the parsed quoted table full name (with schema, if any).
            </summary>
        </member>
        <member name="P:Dotmim.Sync.Builders.DbTableNames.QuotedName">
            <summary>
            Gets the parsed quoted table short name (without schema, if any).
            </summary>
        </member>
        <member name="P:Dotmim.Sync.Builders.DbTableNames.SchemaName">
            <summary>
            Gets or sets the parsed table schema name. if empty, "dbo" is returned.
            </summary>
        </member>
        <member name="T:Dotmim.Sync.Builders.DbTriggerType">
            <summary>
            Trigger type enumeration (Insert, Update, Delete).
            </summary>
        </member>
        <member name="F:Dotmim.Sync.Builders.DbTriggerType.Insert">
            <summary>
            Insert trigger.
            </summary>
        </member>
        <member name="F:Dotmim.Sync.Builders.DbTriggerType.Update">
            <summary>
            Update trigger.
            </summary>
        </member>
        <member name="F:Dotmim.Sync.Builders.DbTriggerType.Delete">
            <summary>
            Delete trigger.
            </summary>
        </member>
        <member name="T:Dotmim.Sync.CoreProvider">
            <summary>
            Core provider : should be implemented by any server / client provider.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.CoreProvider.Orchestrator">
            <summary>
            Gets the reference to the orchestrator owner of this instance.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.CoreProvider.OnConnectionOpened(System.Data.Common.DbConnection)">
            <summary>
            Connection is opened. this method is called before any Interceptors.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.CoreProvider.OnConnectionClosed(System.Data.Common.DbConnection)">
            <summary>
            Connection is closed. this method is called after all Interceptors.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.CoreProvider.ConnectionString">
            <summary>
            Gets or sets the connection string used by the implemented provider.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.CoreProvider.CanBeServerProvider">
            <summary>
            Gets a value indicating whether gets a boolean indicating if the provider can be a server side provider.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.CoreProvider.ConstraintsLevelAction">
            <summary>
            Gets a value indicating on which level constraints disabling and enabling should be applied.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.CoreProvider.IsolationLevel">
            <summary>
            Gets or sets the default isolation level used during transaction.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.CoreProvider.BulkBatchMaxLinesCount">
            <summary>
            Gets or Sets the number of line for every batch bulk operations.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.CoreProvider.SupportsMultipleActiveResultSets">
            <summary>
            Gets or sets a value indicating whether gets or Sets if the provider supports multi results sets on the same connection.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.CoreProvider.UseBulkOperations">
            <summary>
            Gets or sets a value indicating whether gets or Sets if provider should use bulk operations for Insert / Update (only Sql Server).
            </summary>
        </member>
        <member name="P:Dotmim.Sync.CoreProvider.DefaultSchemaName">
            <summary>
            Gets the default schema name ("dbo" for sql server, "public" for postgres or null for mysql).
            </summary>
        </member>
        <member name="P:Dotmim.Sync.CoreProvider.AdditionalProperties">
            <summary>
            Gets additional options for the provider.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.CoreProvider.CreateConnection">
            <summary>
            Create a new instance of the implemented Connection provider.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.CoreProvider.GetDatabaseBuilder">
            <summary>
            Get Database Builder which can create object at the database level.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.CoreProvider.GetSyncAdapter(Dotmim.Sync.SyncTable,Dotmim.Sync.ScopeInfo)">
            <summary>
            Get sync adapter which can executes all the commands needed for a complete sync.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.CoreProvider.GetScopeBuilder(System.String)">
            <summary>
            Create a Scope Builder, which can create scope table, and scope config.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.CoreProvider.GetMetadata">
            <summary>
            Gets or sets the metadata resolver (validating the columns definition from the data store).
            </summary>
        </member>
        <member name="M:Dotmim.Sync.CoreProvider.GetProviderTypeName">
            <summary>
            Get the provider type name.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.CoreProvider.GetShortProviderTypeName">
            <summary>
            Get the provider type name.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.CoreProvider.GetDatabaseName">
            <summary>
            Gets the database name if any.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.CoreProvider.EnsureSyncException(Dotmim.Sync.SyncException)">
            <summary>
            Let a chance to provider to enrich SyncExecption.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.CoreProvider.ShouldRetryOn(System.Exception)">
            <summary>
            Let's a chance to retry on error if connection has been refused.
            </summary>
        </member>
        <member name="T:Dotmim.Sync.DatabaseStringParsers.ObjectParser">
            <summary>
            Parses a “schema‐qualified” object identifier (column, proc, etc.).
            </summary>
        </member>
        <member name="P:Dotmim.Sync.DatabaseStringParsers.ObjectParser.FirstLeftQuote">
            <summary>
            The first left-quote character found in the input (or default).
            </summary>
        </member>
        <member name="P:Dotmim.Sync.DatabaseStringParsers.ObjectParser.FirstRightQuote">
            <summary>
            The first right-quote character found in the input (or default).
            </summary>
        </member>
        <member name="M:Dotmim.Sync.DatabaseStringParsers.ObjectParser.#ctor(System.ReadOnlySpan{System.Char},System.Char[],System.Char[])">
            <summary>
            Constructs a parser over a raw span, using the given quote arrays.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.DatabaseStringParsers.ObjectParser.#ctor(System.String,System.Char,System.Char)">
            <summary>
            Shortcut for parsing from a single‐quote‐pair (e.g. '[',']').
            </summary>
        </member>
        <member name="M:Dotmim.Sync.DatabaseStringParsers.ObjectParser.#ctor(System.String)">
            <summary>
            Default parser: recognizes [ ] , ` ` and " " as quote pairs.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.DatabaseStringParsers.ObjectParser.ObjectName">
            <summary>
            The unquoted object name (e.g. “ID”).
            </summary>
        </member>
        <member name="P:Dotmim.Sync.DatabaseStringParsers.ObjectParser.OwnerName">
            <summary>
            The owner/schema part (e.g. “Customer” in “Customer.ID”), or empty.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.DatabaseStringParsers.ObjectParser.QuotedShortName">
            <summary>
            The short name re-quoted with the first quote style (e.g. "[ID]").
            </summary>
        </member>
        <member name="P:Dotmim.Sync.DatabaseStringParsers.ObjectParser.NormalizedShortName">
            <summary>
            A safe, underscore-only version of the object name.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.DatabaseStringParsers.ObjectParser.ReplaceSpecialCharacters(System.String)">
            <summary>
            Replaces spaces, punctuation, diacritics, etc. with underscores.
            </summary>
        </member>
        <member name="T:Dotmim.Sync.DatabaseStringParsers.ObjectsReader">
            <summary>
            A low-level tokenizer that walks a span of characters and
            extracts quoted or unquoted “objects” (identifiers), optionally
            skipping dots (.) as separators.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.DatabaseStringParsers.ObjectsReader.Current">
            <summary>
            After a successful <see cref="M:Dotmim.Sync.DatabaseStringParsers.ObjectsReader.Read"/>, the span of characters
            that was just extracted (without its surrounding quotes).
            </summary>
        </member>
        <member name="P:Dotmim.Sync.DatabaseStringParsers.ObjectsReader.FirstLeftQuote">
            <summary>
            The very first left-quote character actually encountered
            when tokenizing. If no real quotes were found, this will
            default to the first element of <c>leftQuotes</c>.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.DatabaseStringParsers.ObjectsReader.FirstRightQuote">
            <summary>
            The very first right-quote character actually encountered
            when tokenizing. If no real quotes were found, this will
            default to the first element of <c>rightQuotes</c>.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.DatabaseStringParsers.ObjectsReader.#ctor(System.ReadOnlySpan{System.Char},System.Char[],System.Char[])">
            <summary>
            Constructs a new reader over <paramref name="input"/>,
            recognizing any character in <paramref name="leftQuotes"/>
            as an opening quote and any in <paramref name="rightQuotes"/>
            as a closing quote.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.DatabaseStringParsers.ObjectsReader.Read">
            <summary>
            Advances to the next token. Returns <c>true</c> if a token
            was found; <c>false</c> when the end of the input is reached.
            </summary>
        </member>
        <member name="T:Dotmim.Sync.DatabaseStringParsers.TableParser">
            <summary>
            Parses a table name with optional schema, handling the same quoting rules.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.DatabaseStringParsers.TableParser.FirstLeftQuote">
            <summary>
            First left-quote encountered (or default fallback).
            </summary>
        </member>
        <member name="P:Dotmim.Sync.DatabaseStringParsers.TableParser.FirstRightQuote">
            <summary>
            First right-quote encountered (or default fallback).
            </summary>
        </member>
        <member name="M:Dotmim.Sync.DatabaseStringParsers.TableParser.#ctor(System.ReadOnlySpan{System.Char},System.Char[],System.Char[])">
            <summary>
            Constructs a table parser over a raw span and quote arrays.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.DatabaseStringParsers.TableParser.#ctor(System.String,System.Char,System.Char)">
            <summary>
            Shortcut ctor for a single quote style (e.g. '[',']').
            </summary>
        </member>
        <member name="M:Dotmim.Sync.DatabaseStringParsers.TableParser.#ctor(System.String)">
            <summary>
            Default ctor: recognizes [ ] , ` ` and " " as quote styles.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.DatabaseStringParsers.TableParser.TableName">
            <summary>
            The unquoted table name (e.g. “Customer”).
            </summary>
        </member>
        <member name="P:Dotmim.Sync.DatabaseStringParsers.TableParser.SchemaName">
            <summary>
            The unquoted schema name (or empty).
            </summary>
        </member>
        <member name="P:Dotmim.Sync.DatabaseStringParsers.TableParser.QuotedShortName">
            <summary>
            Short name re-quoted with the first quote style (e.g. “[Customer]”).
            </summary>
        </member>
        <member name="P:Dotmim.Sync.DatabaseStringParsers.TableParser.QuotedFullName">
            <summary>
            Full name (schema + dot + table), re-quoted in that same style.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.DatabaseStringParsers.TableParser.NormalizedShortName">
            <summary>
            Normalized short name (underscores, no special chars).
            </summary>
        </member>
        <member name="P:Dotmim.Sync.DatabaseStringParsers.TableParser.NormalizedFullName">
            <summary>
            Normalized full name (schema and table joined with “_”).
            </summary>
        </member>
        <member name="T:Dotmim.Sync.DbSyncAdapter">
            <summary>
            The SyncAdapter is the datasource manager for ONE table
            Should be implemented by every database provider and provide every SQL action.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.DbSyncAdapter.TableDescription">
            <summary>
            Gets the table description.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.DbSyncAdapter.ScopeInfo">
            <summary>
            Gets the Scope Info.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.DbSyncAdapter.UseBulkOperations">
            <summary>
            Gets or sets a value indicating whether for provider supporting it, set if we are using bulk operations or not.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.DbSyncAdapter.ParameterPrefix">
            <summary>
            Gets get or Sets the prefix to use for Parameters.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.DbSyncAdapter.SupportsOutputParameters">
            <summary>
            Gets a value indicating whether gets or Sets a value that indicates if provider supports output parameters.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.DbSyncAdapter.#ctor(Dotmim.Sync.SyncTable,Dotmim.Sync.ScopeInfo,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Dotmim.Sync.DbSyncAdapter"/> class.
            Create a Sync Adapter.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.DbSyncAdapter.GetParsedColumnNames(System.String)">
            <summary>
            Gets the quoted name and normalized name for a string.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.DbSyncAdapter.GetTableBuilder">
            <summary>
            Gets the table builder for the current adapter.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.DbSyncAdapter.GetCommand(Dotmim.Sync.SyncContext,Dotmim.Sync.Builders.DbCommandType,Dotmim.Sync.SyncFilter)">
            <summary>
            Gets a command from the current table in the adapter.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.DbSyncAdapter.ExecuteBatchCommandAsync(Dotmim.Sync.SyncContext,System.Data.Common.DbCommand,System.Guid,System.Collections.Generic.IEnumerable{Dotmim.Sync.SyncRow},Dotmim.Sync.SyncTable,Dotmim.Sync.SyncTable,System.Nullable{System.Int64},System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <summary>
            Execute a batch command.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.DbSyncAdapter.AddCommandParameterValue(Dotmim.Sync.SyncContext,System.Data.Common.DbParameter,System.Object,System.Data.Common.DbCommand,Dotmim.Sync.Builders.DbCommandType)">
            <summary>
            Adding a parameter value to a command.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.DbSyncAdapter.EnsureCommandParameters(Dotmim.Sync.SyncContext,System.Data.Common.DbCommand,Dotmim.Sync.Builders.DbCommandType,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,Dotmim.Sync.SyncFilter)">
            <summary>
            Parameters have been added to command.
            Ensure all parameters are correct from the provider perspective.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.DbSyncAdapter.EnsureCommandParametersValues(Dotmim.Sync.SyncContext,System.Data.Common.DbCommand,Dotmim.Sync.Builders.DbCommandType,System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <summary>
            Parameters values have been added to command
            Ensure all values are correct from the provider perspective.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.DbSyncAdapter.GetParameter(Dotmim.Sync.SyncContext,System.Data.Common.DbCommand,System.String)">
            <summary>
            Get a parameter even if it's a @param or :param or in_param.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.DbSyncAdapter.InternalGetParameter(System.Data.Common.DbCommand,System.String)">
            <summary>
            Get a parameter even if it's a @param or :param or param.
            </summary>
        </member>
        <member name="T:Dotmim.Sync.Enumerations.ApplyAction">
            <summary>
            Specifies the options for processing a row when the row cannot be applied during synchronization.
            </summary>
        </member>
        <member name="F:Dotmim.Sync.Enumerations.ApplyAction.Continue">
            <summary>
            Continue processing (ie server wins)
            This is the default behavior.
            </summary>
        </member>
        <member name="F:Dotmim.Sync.Enumerations.ApplyAction.RetryWithForceWrite">
            <summary>
            Force the row to be applied by using logic that is included in synchronization adapter commands.
            </summary>
        </member>
        <member name="F:Dotmim.Sync.Enumerations.ApplyAction.Merge">
            <summary>
            Force the finale row to be applied locally.
            </summary>
        </member>
        <member name="F:Dotmim.Sync.Enumerations.ApplyAction.Throw">
            <summary>
            Force to rollback all the sync processus.
            </summary>
        </member>
        <member name="T:Dotmim.Sync.Enumerations.ConflictResolution">
            <summary>
            Resolution when a conflict occurs.
            </summary>
        </member>
        <member name="F:Dotmim.Sync.Enumerations.ConflictResolution.ServerWins">
            <summary>
            Indicates that the change on the server is the conflict winner.
            </summary>
        </member>
        <member name="F:Dotmim.Sync.Enumerations.ConflictResolution.ClientWins">
            <summary>
            Indicates that the change sent by the client is the conflict winner.
            </summary>
        </member>
        <member name="F:Dotmim.Sync.Enumerations.ConflictResolution.MergeRow">
            <summary>
            Indicates that you will manage the conflict by filling the final row and sent it to both client and server.
            </summary>
        </member>
        <member name="F:Dotmim.Sync.Enumerations.ConflictResolution.Throw">
            <summary>
            Indicates that you want to design this conflict as an error (and handle it from the OnApplyChangesErrorOccured interceptor).
            </summary>
        </member>
        <member name="T:Dotmim.Sync.Enumerations.ConflictResolutionPolicy">
            <summary>
            Represents the options for the conflict resolution policy to use for synchronization.
            Used in the configuration class.
            </summary>
        </member>
        <member name="F:Dotmim.Sync.Enumerations.ConflictResolutionPolicy.ServerWins">
            <summary>
            Indicates that the change on the server wins in case of a conflict.
            </summary>
        </member>
        <member name="F:Dotmim.Sync.Enumerations.ConflictResolutionPolicy.ClientWins">
            <summary>
            Indicates that the change sent by the client wins in case of a conflict.
            </summary>
        </member>
        <member name="T:Dotmim.Sync.Enumerations.ConflictType">
            <summary>
            Defines the types of conflicts that can occur during synchronization.
            </summary>
        </member>
        <member name="F:Dotmim.Sync.Enumerations.ConflictType.ErrorsOccurred">
            <summary>
            The peer database threw an exception while applying a change.
            </summary>
        </member>
        <member name="F:Dotmim.Sync.Enumerations.ConflictType.UniqueKeyConstraint">
            <summary>
            The remote datasource raised an unique key constraint error.
            </summary>
        </member>
        <member name="F:Dotmim.Sync.Enumerations.ConflictType.RemoteExistsLocalExists">
            <summary>
            The Remote and Local datasources have both updated the same row.
            </summary>
        </member>
        <member name="F:Dotmim.Sync.Enumerations.ConflictType.RemoteIsDeletedLocalIsDeleted">
            <summary>
            The Remote and Local datasource have both deleted the same row.
            </summary>
        </member>
        <member name="F:Dotmim.Sync.Enumerations.ConflictType.RemoteExistsLocalNotExists">
            <summary>
            The Remote datasource has updated or inserted a row that does not exists in the local datasource.
            </summary>
        </member>
        <member name="F:Dotmim.Sync.Enumerations.ConflictType.RemoteNotExistsLocalExists">
            <summary>
            The Local datasource has inserted or updated a row that does not exists in the Remote datasource.
            </summary>
        </member>
        <member name="F:Dotmim.Sync.Enumerations.ConflictType.RemoteExistsLocalIsDeleted">
            <summary>
            The Remote datasource has inserted or updated a row that the Local datasource has deleted.
            </summary>
        </member>
        <member name="F:Dotmim.Sync.Enumerations.ConflictType.RemoteIsDeletedLocalExists">
            <summary>
            The Remote datasource has deleted a row that the Local datasource has inserted or updated.
            </summary>
        </member>
        <member name="F:Dotmim.Sync.Enumerations.ConflictType.RemoteIsDeletedLocalNotExists">
            <summary>
            The Remote datasource has deleted a row that does not exists in the Local datasource.
            </summary>
        </member>
        <member name="T:Dotmim.Sync.Enumerations.ConstraintsLevelAction">
            <summary>
            Defines on which level of the database the constraints are applied.
            </summary>
        </member>
        <member name="F:Dotmim.Sync.Enumerations.ConstraintsLevelAction.OnDatabaseLevel">
            <summary>
            Constraints are applied on the database level (usually on Sqlite).
            </summary>
        </member>
        <member name="F:Dotmim.Sync.Enumerations.ConstraintsLevelAction.OnSessionLevel">
            <summary>
            Constraints are applied on the session level (usually on SqlServer).
            </summary>
        </member>
        <member name="F:Dotmim.Sync.Enumerations.ConstraintsLevelAction.OnTableLevel">
            <summary>
            Constraints are applied on the table level (usually on MySql / PostgreSQL).
            </summary>
        </member>
        <member name="T:Dotmim.Sync.Enumerations.ErrorResolution">
            <summary>
            Determines what kind of action should be taken when an error is raised from the datasource
            during an insert / update or delete command.
            </summary>
        </member>
        <member name="F:Dotmim.Sync.Enumerations.ErrorResolution.Throw">
            <summary>
            Throw the error. Default value.Transaction is rollbacked.
            </summary>
        </member>
        <member name="F:Dotmim.Sync.Enumerations.ErrorResolution.ContinueOnError">
            <summary>
            Ignore the error and continue to sync. Error will be stored
            locally in a separate batch info file.
            <para>
            Row is stored locally with a state of <see cref="F:Dotmim.Sync.Enumerations.SyncRowState.ApplyDeletedFailed"/>
            or <see cref="F:Dotmim.Sync.Enumerations.SyncRowState.ApplyModifiedFailed"/> depending on the row state.
            </para>
            </summary>
        </member>
        <member name="F:Dotmim.Sync.Enumerations.ErrorResolution.RetryOneMoreTimeAndThrowOnError">
            <summary>
            Will try one more time once after all the others rows in the table.
            <para>
            If the error is raised again, an exception is thrown and transaction is rollback.
            </para>
            </summary>
        </member>
        <member name="F:Dotmim.Sync.Enumerations.ErrorResolution.RetryOneMoreTimeAndContinueOnError">
            <summary>
            Will try one more time once after all the others rows in the table.
            <para>
            If the error is raised again, Sync continues normally and error will be stored locally in a
            separate batch info file with a state of <see cref="F:Dotmim.Sync.Enumerations.SyncRowState.ApplyDeletedFailed"/>
            or <see cref="F:Dotmim.Sync.Enumerations.SyncRowState.ApplyModifiedFailed"/> depending on the row state.
            </para>
            </summary>
        </member>
        <member name="F:Dotmim.Sync.Enumerations.ErrorResolution.RetryOnNextSync">
            <summary>
            Row is stored locally and will be applied again on next sync. Sync continues normally and
            row is stored locally with a state of <see cref="F:Dotmim.Sync.Enumerations.SyncRowState.RetryDeletedOnNextSync"/>
            or <see cref="F:Dotmim.Sync.Enumerations.SyncRowState.RetryModifiedOnNextSync"/> depending on the row state.
            </summary>
        </member>
        <member name="F:Dotmim.Sync.Enumerations.ErrorResolution.Resolved">
            <summary>
            Considers the row as applied.
            </summary>
        </member>
        <member name="T:Dotmim.Sync.Enumerations.ErrorAction">
            <summary>
            Error action.
            </summary>
        </member>
        <member name="F:Dotmim.Sync.Enumerations.ErrorAction.Throw">
            <summary>
            An error occured and is still throw.
            Failed rows is incremented.
            </summary>
        </member>
        <member name="F:Dotmim.Sync.Enumerations.ErrorAction.Log">
            <summary>
            An error occured and is log, but process will continue.
            Failed rows is incremented.
            </summary>
        </member>
        <member name="F:Dotmim.Sync.Enumerations.ErrorAction.Ignore">
            <summary>
            An error occurd, but process will continue.
            Neither failed rows nor applied rows are incremented.
            </summary>
        </member>
        <member name="F:Dotmim.Sync.Enumerations.ErrorAction.Resolved">
            <summary>
            An error occurd, but is marked as resolved and process will continue.
            Applied Rows is incremented.
            </summary>
        </member>
        <member name="T:Dotmim.Sync.Enumerations.SyncDirection">
            <summary>
            Sync direction : Can be Bidirectional (default), DownloadOnly, UploadOnly.
            </summary>
        </member>
        <member name="F:Dotmim.Sync.Enumerations.SyncDirection.Bidirectional">
            <summary>
            Table will be sync from server to client and from client to server.
            </summary>
        </member>
        <member name="F:Dotmim.Sync.Enumerations.SyncDirection.DownloadOnly">
            <summary>
            Table will be sync from server to client only.
            All changes occured client won't be uploaded to server.
            </summary>
        </member>
        <member name="F:Dotmim.Sync.Enumerations.SyncDirection.UploadOnly">
            <summary>
            Table will be sync from client to server only
            All changes from server won't be downloaded to client.
            </summary>
        </member>
        <member name="F:Dotmim.Sync.Enumerations.SyncDirection.None">
            <summary>
            Table structure is replicated, but not the datas
            Note : The value should be 0, but for compatibility issue with previous version, we go for a new value.
            </summary>
        </member>
        <member name="T:Dotmim.Sync.Enumerations.SyncWay">
            <summary>
            Sync way.
            </summary>
        </member>
        <member name="F:Dotmim.Sync.Enumerations.SyncWay.None">
            <summary>
            No sync engaged.
            </summary>
        </member>
        <member name="F:Dotmim.Sync.Enumerations.SyncWay.Download">
            <summary>
            Sync is selecting then downloading changes from server.
            </summary>
        </member>
        <member name="F:Dotmim.Sync.Enumerations.SyncWay.Upload">
            <summary>
            Sync is selecting then uploading changes from client.
            </summary>
        </member>
        <member name="T:Dotmim.Sync.Enumerations.SyncMode">
            <summary>
            Basic mode : Reading (no transaction) or Writing (with transaction).
            </summary>
        </member>
        <member name="F:Dotmim.Sync.Enumerations.SyncMode.NoTransaction">
            <summary>
            No transaction mode.
            </summary>
        </member>
        <member name="F:Dotmim.Sync.Enumerations.SyncMode.WithTransaction">
            <summary>
            With transaction mode.
            </summary>
        </member>
        <member name="T:Dotmim.Sync.Enumerations.SyncOperation">
            <summary>
            Current sync operation.
            </summary>
        </member>
        <member name="F:Dotmim.Sync.Enumerations.SyncOperation.Normal">
            <summary>
            Normal synchronization.
            </summary>
        </member>
        <member name="F:Dotmim.Sync.Enumerations.SyncOperation.Reinitialize">
            <summary>
            Reinitialize the whole sync database, applying all rows from the server to the client.
            </summary>
        </member>
        <member name="F:Dotmim.Sync.Enumerations.SyncOperation.ReinitializeWithUpload">
            <summary>
            Reinitialize the whole sync database, applying all rows from the server to the client, after trying a client upload.
            </summary>
        </member>
        <member name="F:Dotmim.Sync.Enumerations.SyncOperation.DropAllAndSync">
            <summary>
            Drop all the sync metadatas even tracking tables and scope infos and make a full sync again.
            </summary>
        </member>
        <member name="F:Dotmim.Sync.Enumerations.SyncOperation.DropAllAndExit">
            <summary>
            Drop all the sync metadatas even tracking tables and scope infos and exit.
            </summary>
        </member>
        <member name="F:Dotmim.Sync.Enumerations.SyncOperation.DeprovisionAndSync">
            <summary>
            Deprovision stored procedures and triggers and sync again.
            </summary>
        </member>
        <member name="F:Dotmim.Sync.Enumerations.SyncOperation.AbortSync">
            <summary>
            Exit a Sync session without syncing.
            </summary>
        </member>
        <member name="T:Dotmim.Sync.Enumerations.SyncProgressLevel">
            <summary>
            Defines IProgress levels of verbosity.
            </summary>
        </member>
        <member name="F:Dotmim.Sync.Enumerations.SyncProgressLevel.Sql">
            <summary>
            Progress that contain the most detailed messages and the Sql statement executed.
            </summary>
        </member>
        <member name="F:Dotmim.Sync.Enumerations.SyncProgressLevel.Trace">
            <summary>
            Progress that contain the most detailed messages. These messages may contain sensitive application data.
            </summary>
        </member>
        <member name="F:Dotmim.Sync.Enumerations.SyncProgressLevel.Debug">
            <summary>
            Progress that are used for interactive investigation during development.
            </summary>
        </member>
        <member name="F:Dotmim.Sync.Enumerations.SyncProgressLevel.Information">
            <summary>
            Progress that track the general flow of the application.
            </summary>
        </member>
        <member name="F:Dotmim.Sync.Enumerations.SyncProgressLevel.None">
            <summary>
            Specifies that a progress output should not write any messages.
            </summary>
        </member>
        <member name="T:Dotmim.Sync.Enumerations.SyncProvision">
            <summary>
            Gets the objects we want to provision or deprovision.
            </summary>
        </member>
        <member name="F:Dotmim.Sync.Enumerations.SyncProvision.NotSet">
            <summary>
            No object to provision or deprovision.
            </summary>
        </member>
        <member name="F:Dotmim.Sync.Enumerations.SyncProvision.Table">
            <summary>
            Table to provision or deprovision.
            </summary>
        </member>
        <member name="F:Dotmim.Sync.Enumerations.SyncProvision.TrackingTable">
            <summary>
            Tracking table to provision or deprovision.
            </summary>
        </member>
        <member name="F:Dotmim.Sync.Enumerations.SyncProvision.StoredProcedures">
            <summary>
            Stored procedures to provision or deprovision.
            </summary>
        </member>
        <member name="F:Dotmim.Sync.Enumerations.SyncProvision.Triggers">
            <summary>
            Triggers to provision or deprovision.
            </summary>
        </member>
        <member name="F:Dotmim.Sync.Enumerations.SyncProvision.ScopeInfo">
            <summary>
            Scope info to provision or deprovision.
            </summary>
        </member>
        <member name="F:Dotmim.Sync.Enumerations.SyncProvision.ScopeInfoClient">
            <summary>
            Scope info client to provision or deprovision.
            </summary>
        </member>
        <member name="T:Dotmim.Sync.Enumerations.SyncRowState">
            <summary>
            Gets the state of a SyncRow object.
            </summary>
        </member>
        <member name="F:Dotmim.Sync.Enumerations.SyncRowState.None">
            <summary>
            The row has no state yet.
            </summary>
        </member>
        <member name="F:Dotmim.Sync.Enumerations.SyncRowState.Deleted">
            <summary>
            The row is mark as deleted.
            </summary>
        </member>
        <member name="F:Dotmim.Sync.Enumerations.SyncRowState.Modified">
            <summary>
            The row is mark as modified (update or insert).
            </summary>
        </member>
        <member name="F:Dotmim.Sync.Enumerations.SyncRowState.RetryDeletedOnNextSync">
            <summary>
            The row is mark as to be retry on next sync as a deleted row.
            </summary>
        </member>
        <member name="F:Dotmim.Sync.Enumerations.SyncRowState.RetryModifiedOnNextSync">
            <summary>
            The row is mark as to be retry on next sync as a modified row.
            </summary>
        </member>
        <member name="F:Dotmim.Sync.Enumerations.SyncRowState.ApplyDeletedFailed">
            <summary>
            The row is mark as failed on apply as deleted.
            </summary>
        </member>
        <member name="F:Dotmim.Sync.Enumerations.SyncRowState.ApplyModifiedFailed">
            <summary>
            The row is mark as failed on apply as modified.
            </summary>
        </member>
        <member name="T:Dotmim.Sync.Enumerations.SyncSessionState">
            <summary>
            Defines the state that a synchronization session is in.
            </summary>
        </member>
        <member name="F:Dotmim.Sync.Enumerations.SyncSessionState.Ready">
            <summary>
            The session is ready to synchronize changes.
            </summary>
        </member>
        <member name="F:Dotmim.Sync.Enumerations.SyncSessionState.Synchronizing">
            <summary>
            The session is currently synchronizing changes.
            </summary>
        </member>
        <member name="T:Dotmim.Sync.Enumerations.SyncStage">
            <summary>
            Sync progress step. Used for the user feedback.
            </summary>
        </member>
        <member name="F:Dotmim.Sync.Enumerations.SyncStage.None">
            <summary>
            Sync is not in a specific stage.
            </summary>
        </member>
        <member name="F:Dotmim.Sync.Enumerations.SyncStage.BeginSession">
            <summary>
            Begin a new sync session.
            </summary>
        </member>
        <member name="F:Dotmim.Sync.Enumerations.SyncStage.EndSession">
            <summary>
            End a sync session.
            </summary>
        </member>
        <member name="F:Dotmim.Sync.Enumerations.SyncStage.ScopeLoading">
            <summary>
            Scope loading stage.
            </summary>
        </member>
        <member name="F:Dotmim.Sync.Enumerations.SyncStage.ScopeWriting">
            <summary>
            Scope writing stage.
            </summary>
        </member>
        <member name="F:Dotmim.Sync.Enumerations.SyncStage.SnapshotCreating">
            <summary>
            Creating a snapshot stage.
            </summary>
        </member>
        <member name="F:Dotmim.Sync.Enumerations.SyncStage.SnapshotApplying">
            <summary>
            Applying a snapshot stage.
            </summary>
        </member>
        <member name="F:Dotmim.Sync.Enumerations.SyncStage.Provisioning">
            <summary>
            Schema provisioning stage.
            </summary>
        </member>
        <member name="F:Dotmim.Sync.Enumerations.SyncStage.Deprovisioning">
            <summary>
            Schema deprovisioning stage.
            </summary>
        </member>
        <member name="F:Dotmim.Sync.Enumerations.SyncStage.ChangesSelecting">
            <summary>
            Selecting changes stage.
            </summary>
        </member>
        <member name="F:Dotmim.Sync.Enumerations.SyncStage.ChangesApplying">
            <summary>
            Applying changes stage.
            </summary>
        </member>
        <member name="F:Dotmim.Sync.Enumerations.SyncStage.Migrating">
            <summary>
            Migration stage.
            </summary>
        </member>
        <member name="F:Dotmim.Sync.Enumerations.SyncStage.MetadataCleaning">
            <summary>
            Cleaning metadata stage.
            </summary>
        </member>
        <member name="T:Dotmim.Sync.Enumerations.SyncType">
            <summary>
            Synchronization mode: Normal, Reinitialize or ReinitializeWithUpload.
            </summary>
        </member>
        <member name="F:Dotmim.Sync.Enumerations.SyncType.Normal">
            <summary>
            Normal synchronization.
            </summary>
        </member>
        <member name="F:Dotmim.Sync.Enumerations.SyncType.Reinitialize">
            <summary>
            Reinitialize the whole sync database, applying all rows from the server to the client.
            </summary>
        </member>
        <member name="F:Dotmim.Sync.Enumerations.SyncType.ReinitializeWithUpload">
            <summary>
            Reinitialize the whole sync database, applying all rows from the server to the client, after trying a client upload.
            </summary>
        </member>
        <member name="T:Dotmim.Sync.Enumerations.TransactionMode">
            <summary>
            Transaction mode during the sync process.
            </summary>
        </member>
        <member name="F:Dotmim.Sync.Enumerations.TransactionMode.AllOrNothing">
            <summary>
            Default mode for transaction, when applying changes.
            </summary>
        </member>
        <member name="F:Dotmim.Sync.Enumerations.TransactionMode.PerBatch">
            <summary>
            Each batch file will have its own transaction.
            </summary>
        </member>
        <member name="F:Dotmim.Sync.Enumerations.TransactionMode.None">
            <summary>
            No transaction during applying changes. very risky.
            </summary>
        </member>
        <member name="T:Dotmim.Sync.Extensions.ByteArrayExtensions">
            <summary>
            Byte array extensions.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Extensions.ByteArrayExtensions.ToUtf8String(System.Byte[])">
            <summary>
            Convert a byte array to a UTF8 string.
            </summary>
        </member>
        <member name="T:Dotmim.Sync.Guard">
            <summary>
            A simple guard clause class to provide a single entry point to all guard clauses.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Guard.ThrowIfNull``1(``0,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentNullException" /> if <paramref name="input" /> is null.
            </summary>
            <typeparam name="T">Instance.</typeparam>
            <param name="input">Object to check.</param>
            <param name="message">Exception message.</param>
        </member>
        <member name="M:Dotmim.Sync.Guard.ThrowIfNullOrEmpty(System.String,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentNullException" /> if <paramref name="input" /> is null.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Guard.ThrowIfNullOrEmpty(System.Nullable{System.Guid},System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentNullException" /> if <paramref name="input" /> is null equals to Guid.empty.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Guard.ThrowIfNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentNullException" /> if <paramref name="input" /> is null or enumerable is empty.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Guard.ThrowIfNullOrWhiteSpace(System.String,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentNullException" /> if <paramref name="input" /> is null or empty or whitespace.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Guard.ThrowIfDefault``1(``0,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentNullException" /> if <paramref name="input" /> is equals to Default.
            </summary>
        </member>
        <member name="T:Dotmim.Sync.HashAlgorithm">
            <summary>
            Calculate a hash for each BatchInfo
            Original source code from @gentledepp.
            </summary>
        </member>
        <member name="T:Dotmim.Sync.HashAlgorithm.SHA256">
            <summary>
            Create a hash with SHA256.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.HashAlgorithm.SHA256.EnsureHash(System.IO.Stream,System.String)">
            <summary>
            Ensure the hash of the stream is the same as the hashToCompare.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.HashAlgorithm.SHA256.CompareHash(System.Byte[],System.Byte[])">
            <summary>
            Compare two hashes.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.HashAlgorithm.SHA256.Create(System.String)">
            <summary>
            Create a hash from a string.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.HashAlgorithm.SHA256.Create(System.Byte[])">
            <summary>
            Create a hash from a byte array.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.HashAlgorithm.SHA256.Create(System.IO.Stream)">
            <summary>
            Create a hash from a stream.
            </summary>
        </member>
        <member name="T:Dotmim.Sync.Interceptors">
            <summary>
            Manage all On[Method]s.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Interceptors.GetInterceptors``1">
            <summary>
            Get all Interceptors of T.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Interceptors.HasInterceptors``1">
            <summary>
            Returns a boolean value indicating if we have any Interceptors for the current type T.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Interceptors.Clear``1">
            <summary>
            Remove all Interceptors based on type of ProgressArgs.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Interceptors.Clear">
            <summary>
            Remove all Interceptors.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Interceptors.Clear(System.Guid)">
            <summary>
            Remove interceptor based on Id.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Interceptors.Add``1(System.Action{``0})">
            <summary>
            Add an interceptor of T.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Interceptors.Add``1(System.Func{``0,System.Threading.Tasks.Task})">
            <summary>
            Add an async interceptor of T.
            </summary>
        </member>
        <member name="T:Dotmim.Sync.InterceptorWrapper`1">
            <summary>
            Encapsulate 1 func to intercept one event.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorWrapper`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Dotmim.Sync.InterceptorWrapper`1"/> class.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.InterceptorWrapper`1.IsEmpty">
            <summary>
            Gets a value indicating whether the interceptor is empty.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.InterceptorWrapper`1.Id">
            <summary>
            Gets the Interceptor Id.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorWrapper`1.Set(System.Func{`0,System.Threading.Tasks.Task})">
            <summary>
            Set a Func as interceptor.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorWrapper`1.Set(System.Action{`0})">
            <summary>
            Set an Action as interceptor.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorWrapper`1.RunAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Run the Action or Func as the Interceptor.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorWrapper`1.Dispose">
            <summary>
            Dispose the interceptor.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InterceptorWrapper`1.Dispose(System.Boolean)">
            <summary>
            Dispose the interceptor.
            </summary>
        </member>
        <member name="T:Dotmim.Sync.ISyncInterceptor">
            <summary>
            Interceptor interface.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.ISyncInterceptor.Id">
            <summary>
            Gets the Interceptor Id.
            </summary>
        </member>
        <member name="T:Dotmim.Sync.ISyncInterceptor`1">
            <summary>
            Interceptor interface of T.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.ISyncInterceptor`1.RunAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Run the Action or Func as the Interceptor.
            </summary>
        </member>
        <member name="T:Dotmim.Sync.SynchronousProgress`1">
            <summary>
            Provides an IProgress{T} that invokes callbacks for each reported progress value.
            </summary>
            <typeparam name="T">Specifies the type of the progress report value.</typeparam>
            <remarks>
            Any handler provided to the constructor or event handlers registered with
            the <see cref="E:Dotmim.Sync.SynchronousProgress`1.ProgressChanged"/> event are invoked through a
            <see cref="T:System.Threading.SynchronizationContext"/> instance captured
            when the instance is constructed.  If there is no current SynchronizationContext
            at the time of construction, the callbacks will be invoked on the ThreadPool.
            </remarks>
        </member>
        <member name="F:Dotmim.Sync.SynchronousProgress`1.synchronizationContext">
            <summary>The synchronization context captured upon construction.  This will never be null.</summary>
        </member>
        <member name="F:Dotmim.Sync.SynchronousProgress`1.handler">
            <summary>The handler specified to the constructor.  This may be null.</summary>
        </member>
        <member name="F:Dotmim.Sync.SynchronousProgress`1.invokeHandlers">
            <summary>A cached delegate used to post invocation to the synchronization context.</summary>
        </member>
        <member name="M:Dotmim.Sync.SynchronousProgress`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Dotmim.Sync.SynchronousProgress`1"/> class.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SynchronousProgress`1.#ctor(System.Action{`0})">
            <summary>Initializes a new instance of the <see cref="T:Dotmim.Sync.SynchronousProgress`1"/> class.Initializes the <see cref="T:System.Progress`1"/> with the specified callback.</summary>
            <param name="handler">
            A handler to invoke for each reported progress value.  This handler will be invoked
            in addition to any delegates registered with the <see cref="E:Dotmim.Sync.SynchronousProgress`1.ProgressChanged"/> event.
            Depending on the <see cref="T:System.Threading.SynchronizationContext"/> instance captured by
            could be invoked concurrently with itself.
            </param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="handler"/> is null (Nothing in Visual Basic).</exception>
        </member>
        <member name="E:Dotmim.Sync.SynchronousProgress`1.ProgressChanged">
            <summary>Raised for each reported progress value.</summary>
            <remarks>
            Handlers registered with this event will be invoked on the
            <see cref="T:System.Threading.SynchronizationContext"/> captured when the instance was constructed.
            </remarks>
        </member>
        <member name="M:Dotmim.Sync.SynchronousProgress`1.Report(`0)">
            <summary>Reports a progress change.</summary>
            <param name="value">The value of the updated progress.</param>
        </member>
        <member name="M:Dotmim.Sync.SynchronousProgress`1.OnReport(`0)">
            <summary>Reports a progress change.</summary>
            <param name="value">The value of the updated progress.</param>
        </member>
        <member name="M:Dotmim.Sync.SynchronousProgress`1.InvokeHandlers(System.Object)">
            <summary>Invokes the action and event callbacks.</summary>
            <param name="state">The progress value.</param>
        </member>
        <member name="T:Dotmim.Sync.ProgressStatics">
            <summary>Holds static values for <see cref="T:System.Progress`1"/>.</summary>
            <remarks>This avoids one static instance per type T.</remarks>
        </member>
        <member name="F:Dotmim.Sync.ProgressStatics.DefaultContext">
            <summary>A default synchronization context that targets the ThreadPool.</summary>
        </member>
        <member name="T:Dotmim.Sync.SyncEventsExtensions">
            <summary>
            Sync Events Ids.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncEventsExtensions.LogTrace``1(Microsoft.Extensions.Logging.ILogger,Microsoft.Extensions.Logging.EventId,``0)">
            <summary>
            Log a message with the Trace level. If the logger is not enabled, do nothing.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncEventsExtensions.LogCritical``1(Microsoft.Extensions.Logging.ILogger,Microsoft.Extensions.Logging.EventId,``0)">
            <summary>
            Log a message with the Debug level. If the logger is not enabled, do nothing.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncEventsExtensions.LogDebug``1(Microsoft.Extensions.Logging.ILogger,Microsoft.Extensions.Logging.EventId,``0)">
            <summary>
            Log a message with the Debug level. If the logger is not enabled, do nothing.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncEventsExtensions.LogInformation``1(Microsoft.Extensions.Logging.ILogger,Microsoft.Extensions.Logging.EventId,``0)">
            <summary>
            Log a message with the Error level. If the logger is not enabled, do nothing.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncEventsExtensions.LogError``1(Microsoft.Extensions.Logging.ILogger,Microsoft.Extensions.Logging.EventId,``0)">
            <summary>
            Log error message with the Error level. If the logger is not enabled, do nothing.
            </summary>
        </member>
        <member name="T:Dotmim.Sync.SyncEventsId">
            <summary>
            Sync Events Ids.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncEventsId.Exception">
            <summary>
            Gets the event id for the exception event.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncEventsId.ReportProgress">
            <summary>
            Gets the event id for the report event.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncEventsId.Interceptor">
            <summary>
            Gets the event id for the interceptor event.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncEventsId.CreateEventId(System.Int32,System.String)">
            <summary>
            Creates a new EventId.
            </summary>
        </member>
        <member name="T:Dotmim.Sync.SyncLogger">
            <summary>
            Default logger used in Dotmim.Sync. This logger is synchronous and can log to console and debug output window.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncLogger.MinimumLevel">
            <summary>
            Gets a value indicating the minimum LogLevel value.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncLogger.OutputWriters">
            <summary>
            Gets the output writers to write log messages.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncLogger.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Dotmim.Sync.SyncLogger"/> class.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncLogger.AddConsole">
            <summary>
            Adds an output to console when logging something.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncLogger.AddDebug">
            <summary>
            Adds an output to diagnostics debug window when logging something.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncLogger.SetMinimumLevel(Microsoft.Extensions.Logging.LogLevel)">
            <summary>
            Adds minimum level : 0 Trace, 1 Debug, 2 Information, 3, Warning, 4 Error, 5 Critical, 6 None.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncLogger.BeginScope``1(``0)">
            <summary>
            Begin a new scope.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncLogger.IsEnabled(Microsoft.Extensions.Logging.LogLevel)">
            <summary>
            Gets if the logger can log something, according to the minimum log level parameterized.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncLogger.Log``1(Microsoft.Extensions.Logging.LogLevel,Microsoft.Extensions.Logging.EventId,``0,System.Exception,System.Func{``0,System.Exception,System.String})">
            <summary>
            Log to all output writers configured.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncLogger.Dispose">
            <summary>
            Dispose the logger.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncLogger.Write(Dotmim.Sync.OutputWriter,System.String,System.Nullable{System.ConsoleColor},System.Nullable{System.ConsoleColor})">
            <summary>
            Write a messages without returning to new line.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncLogger.WriteLine(Dotmim.Sync.OutputWriter,System.String,System.Nullable{System.ConsoleColor},System.Nullable{System.ConsoleColor})">
            <summary>
            Write a messages and returns to new line.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncLogger.GetLogMessageFrom``1(``0,Microsoft.Extensions.Logging.EventId)">
            <summary>
            Get a log message from a value and an event id.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncLogger.Dispose(System.Boolean)">
            <summary>
            Dispose the logger.
            </summary>
        </member>
        <member name="T:Dotmim.Sync.OutputWriter">
            <summary>
            Output writer to write to console or debug output window.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.OutputWriter.Write(System.String)">
            <summary>
            Write a message to the output writer.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.OutputWriter.Write(System.String,System.Object[])">
            <summary>
            Write a formatted message to the output writer.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.OutputWriter.WriteLine(System.String)">
            <summary>
            Write a message to the output writer and return to a new line.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.OutputWriter.WriteLine(System.String,System.Object[])">
            <summary>
            Write a formatted message to the output writer and return to a new line.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.OutputWriter.Name">
            <summary>
            Gets the name of the output writer.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.OutputWriter.SupportsColor">
            <summary>
            Gets a value indicating whether the output writer supports color.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.OutputWriter.ResetColor">
            <summary>
            Reset the color of the output writer.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.OutputWriter.SetColor(System.Nullable{System.ConsoleColor},System.Nullable{System.ConsoleColor})">
            <summary>
            Set the color of the output writer.
            </summary>
        </member>
        <member name="T:Dotmim.Sync.ConsoleWriter">
            <summary>
            Console output writer to write to console.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.ConsoleWriter.SupportsColor">
            <inheritdoc/>
        </member>
        <member name="P:Dotmim.Sync.ConsoleWriter.Name">
            <inheritdoc/>
        </member>
        <member name="M:Dotmim.Sync.ConsoleWriter.Write(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Dotmim.Sync.ConsoleWriter.Write(System.String,System.Object[])">
            <inheritdoc/>
        </member>
        <member name="M:Dotmim.Sync.ConsoleWriter.WriteLine(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Dotmim.Sync.ConsoleWriter.WriteLine(System.String,System.Object[])">
            <inheritdoc/>
        </member>
        <member name="M:Dotmim.Sync.ConsoleWriter.ResetColor">
            <inheritdoc/>
        </member>
        <member name="M:Dotmim.Sync.ConsoleWriter.SetColor(System.Nullable{System.ConsoleColor},System.Nullable{System.ConsoleColor})">
            <inheritdoc/>
        </member>
        <member name="T:Dotmim.Sync.DebugWriter">
            <summary>
            Debug output writer to write to debug output window.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.DebugWriter.SupportsColor">
            <inheritdoc/>
        </member>
        <member name="P:Dotmim.Sync.DebugWriter.Name">
            <inheritdoc/>
        </member>
        <member name="M:Dotmim.Sync.DebugWriter.Write(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Dotmim.Sync.DebugWriter.Write(System.String,System.Object[])">
            <inheritdoc/>
        </member>
        <member name="M:Dotmim.Sync.DebugWriter.WriteLine(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Dotmim.Sync.DebugWriter.WriteLine(System.String,System.Object[])">
            <inheritdoc/>
        </member>
        <member name="M:Dotmim.Sync.DebugWriter.ResetColor">
            <inheritdoc/>
        </member>
        <member name="M:Dotmim.Sync.DebugWriter.SetColor(System.Nullable{System.ConsoleColor},System.Nullable{System.ConsoleColor})">
            <inheritdoc/>
        </member>
        <member name="T:Dotmim.Sync.SyncLoggerFactoryExtensions">
            <summary>
            Sync logger factory extensions.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncLoggerFactoryExtensions.AddSyncLogger(Microsoft.Extensions.Logging.ILoggingBuilder,System.Action{Dotmim.Sync.SyncLoggerOptions})">
            <summary>
            Add SyncLogger to the logging pipeline.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncLoggerFactoryExtensions.ToLogString(System.Data.Common.DbConnection)">
            <summary>
            Returns a string that represents the current connection as a json payload.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncLoggerFactoryExtensions.ToLogString(System.Data.Common.DbTransaction)">
            <summary>
            Returns a string that represents the current transaction as a json payload.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncLoggerFactoryExtensions.ToLogString(System.Data.Common.DbCommand)">
            <summary>
            Returns a string that represents the current command as a json payload.
            </summary>
        </member>
        <member name="T:Dotmim.Sync.SyncLoggerOptions">
            <summary>
            Sync Logger Options.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncLoggerOptions.OutputWriters">
            <summary>
            Gets the output writers.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncLoggerOptions.AddConsole">
            <summary>
            Adds an output to console when logging something.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncLoggerOptions.AddDebug">
            <summary>
            Adds an output to diagnostics debug window when logging something.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncLoggerOptions.SetMinimumLevel(Microsoft.Extensions.Logging.LogLevel)">
            <summary>
            Adds minimum level : 0 Trace, 1 Debug, 2 Information, 3, Warning, 4 Error, 5 Critical, 6 None.
            </summary>
        </member>
        <member name="T:Dotmim.Sync.SyncLoggerProvider">
            <summary>
            Sync Logger Provider.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncLoggerProvider.ConfigureOptions">
            <summary>
            Gets get default logger options.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncLoggerProvider.ConfigureSyncOptions">
            <summary>
            Gets get Sync logger options.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncLoggerProvider.#ctor(Microsoft.Extensions.Options.IConfigureOptions{Microsoft.Extensions.Logging.LoggerFilterOptions},Microsoft.Extensions.Options.IConfigureOptions{Dotmim.Sync.SyncLoggerOptions})">
            <summary>
            Initializes a new instance of the <see cref="T:Dotmim.Sync.SyncLoggerProvider"/> class.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncLoggerProvider.CreateLogger(System.String)">
            <summary>
            Create a new logger.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncLoggerProvider.Dispose">
            <summary>
            Dispose the logger.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncLoggerProvider.Dispose(System.Boolean)">
            <summary>
            Dispose the logger.
            </summary>
        </member>
        <member name="T:Dotmim.Sync.Manager.DbMetadata">
            <summary>
            Db Metadata class. Abstract class to get database specific metadata.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Manager.DbMetadata.IsValid(Dotmim.Sync.SyncColumn)">
            <summary>
            Validate if a column definition is actualy supported by the provider.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Manager.DbMetadata.GetMaxLength(Dotmim.Sync.SyncColumn)">
            <summary>
            Gets and validate a max length issued from the database definition.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Manager.DbMetadata.GetOwnerDbType(Dotmim.Sync.SyncColumn)">
            <summary>
            Get the native datastore DbType (that's why we return object instead of SqlDbType or SqliteDbType or MySqlDbType).
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Manager.DbMetadata.GetDbType(Dotmim.Sync.SyncColumn)">
            <summary>
            Get a DbType from a datastore type name.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Manager.DbMetadata.IsReadonly(Dotmim.Sync.SyncColumn)">
            <summary>
            Validate if a column is readonly or not.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Manager.DbMetadata.IsNumericType(Dotmim.Sync.SyncColumn)">
            <summary>
            Check if a type name is a numeric type.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Manager.DbMetadata.IsSupportingScale(Dotmim.Sync.SyncColumn)">
            <summary>
            Check if a type name support scale.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Manager.DbMetadata.GetPrecisionAndScale(Dotmim.Sync.SyncColumn)">
            <summary>
            Get precision and scale from a SchemaColumn.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Manager.DbMetadata.GetPrecision(Dotmim.Sync.SyncColumn)">
            <summary>
            Get precision if supported (MySql supports int(10)).
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Manager.DbMetadata.GetType(Dotmim.Sync.SyncColumn)">
            <summary>
            Get a managed type from a datastore dbType.
            </summary>
        </member>
        <member name="T:Dotmim.Sync.Manager.DbRelationDefinition">
            <summary>
            Relation definition from the datastore.
            This class is used only when retrieving the relation definition from the datastore.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.Manager.DbRelationDefinition.ForeignKey">
            <summary>
            Gets or Sets the foreign key name.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.Manager.DbRelationDefinition.TableName">
            <summary>
            Gets or Sets the table name.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.Manager.DbRelationDefinition.SchemaName">
            <summary>
            Gets or Sets the schema name.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.Manager.DbRelationDefinition.Columns">
            <summary>
            Gets the table columns collection.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.Manager.DbRelationDefinition.ReferenceTableName">
            <summary>
            Gets or Sets the reference table name.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.Manager.DbRelationDefinition.ReferenceSchemaName">
            <summary>
            Gets or Sets the reference schema name.
            </summary>
        </member>
        <member name="T:Dotmim.Sync.Manager.DbRelationColumnDefinition">
            <summary>
            Each column from foreign key and reference key, with the order used.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.Manager.DbRelationColumnDefinition.KeyColumnName">
            <summary>
            Gets or Sets the key column name.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.Manager.DbRelationColumnDefinition.ReferenceColumnName">
            <summary>
            Gets or Sets the reference column name.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.Manager.DbRelationColumnDefinition.Order">
            <summary>
            Gets or Sets the order.
            </summary>
        </member>
        <member name="T:Dotmim.Sync.DatabaseChangesApplied">
            <summary>
            All table changes applied on a provider.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.DatabaseChangesApplied.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Dotmim.Sync.DatabaseChangesApplied"/> class.
            ctor for serialization purpose.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.DatabaseChangesApplied.TableChangesApplied">
            <summary>
            Gets or sets get the list of tables where we have changes applied.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.DatabaseChangesApplied.TotalResolvedConflicts">
            <summary>
            Gets the total number of conflicts that have been applied resolved during the synchronization session.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.DatabaseChangesApplied.TotalAppliedChanges">
            <summary>
            Gets the total number of changes that have been applied during the synchronization session.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.DatabaseChangesApplied.TotalAppliedChangesFailed">
            <summary>
            Gets the total number of changes that have failed to be applied during the synchronization session.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.DatabaseChangesApplied.ToString">
            <summary>
            Gets the total number of changes that have been applied during the synchronization session.
            </summary>
        </member>
        <member name="T:Dotmim.Sync.DatabaseChangesSelected">
            <summary>
            All tables changes selected.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.DatabaseChangesSelected.TableChangesSelected">
            <summary>
            Gets or sets get the changes selected to be applied for a current table.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.DatabaseChangesSelected.TotalChangesSelected">
            <summary>
            Gets the total number of changes that are to be applied during the synchronization session.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.DatabaseChangesSelected.TotalChangesSelectedDeletes">
            <summary>
            Gets the total number of deletes that are to be applied during the synchronization session.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.DatabaseChangesSelected.TotalChangesSelectedUpdates">
            <summary>
            Gets the total number of updates OR inserts that are to be applied during the synchronization session.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.DatabaseChangesSelected.ToString">
            <summary>
            Gets the total number of inserts that are to be applied during the synchronization session.
            </summary>
        </member>
        <member name="T:Dotmim.Sync.DatabaseMetadatasCleaned">
            <summary>
            Get the rows count cleaned for all tables, during a DeleteMetadatasAsync call.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.DatabaseMetadatasCleaned.Tables">
            <summary>
            Gets or sets get the changes selected to be applied for a current table.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.DatabaseMetadatasCleaned.RowsCleanedCount">
            <summary>
            Gets the total number of rows cleaned.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.DatabaseMetadatasCleaned.TimestampLimit">
            <summary>
            Gets or Sets the last timestamp used as the limit to clean the table metadatas. All rows below this limit have beed cleaned.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.DatabaseMetadatasCleaned.ToString">
            <summary>
            Gets the total number of rows cleaned.
            </summary>
        </member>
        <member name="T:Dotmim.Sync.MessageApplyChanges">
            <summary>
            Message exchanged during the Begin session sync stage.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.MessageApplyChanges.#ctor(System.Guid,System.Guid,System.Boolean,System.Nullable{System.Int64},Dotmim.Sync.SyncSet,Dotmim.Sync.Enumerations.ConflictResolutionPolicy,System.Boolean,System.String,Dotmim.Sync.Batch.BatchInfo,Dotmim.Sync.SyncSet,Dotmim.Sync.DatabaseChangesApplied)">
            <summary>
            Initializes a new instance of the <see cref="T:Dotmim.Sync.MessageApplyChanges"/> class.
            Applying changes message.
            Be careful policy could be differente from the schema (especially on client side, it's the reverse one, by default).
            </summary>
        </member>
        <member name="P:Dotmim.Sync.MessageApplyChanges.LocalScopeId">
            <summary>
            Gets or sets the local Scope Id.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.MessageApplyChanges.SenderScopeId">
            <summary>
            Gets or sets the sender Scope Id.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.MessageApplyChanges.IsNew">
            <summary>
            Gets or sets a value indicating whether gets if the sync is a first sync. In this case, the last sync timestamp is ignored.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.MessageApplyChanges.LastTimestamp">
            <summary>
            Gets or sets the Last timestamp used to compare rows.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.MessageApplyChanges.Schema">
            <summary>
            Gets or Sets the schema used for this sync.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.MessageApplyChanges.Policy">
            <summary>
            Gets or Sets the current Conflict resolution policy.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.MessageApplyChanges.Changes">
            <summary>
            Gets or Sets the batch info containing the changes to apply.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.MessageApplyChanges.FailedRows">
            <summary>
            Gets or Sets the failed rows set.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.MessageApplyChanges.ChangesApplied">
            <summary>
            Gets or Sets the changes applied.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.MessageApplyChanges.SnapshoteApplied">
            <summary>
            Gets or sets a value indicating whether gets or Sets if we have already applied a snapshot. So far, we don't reset the tables, even if we are in reinit mode.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.MessageApplyChanges.BatchDirectory">
            <summary>
            Gets or sets the batch directory.
            </summary>
        </member>
        <member name="T:Dotmim.Sync.TableChangesApplied">
            <summary>
            Summary of table changes applied on a source.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.TableChangesApplied.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Dotmim.Sync.TableChangesApplied"/> class.
            ctor for serialization purpose.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.TableChangesApplied.ToString">
            <summary>
            Gets the name of the table that the DmTableSurrogate object represents.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.TableChangesApplied.TableName">
            <summary>
            Gets or sets the name of the table that the DmTableSurrogate object represents.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.TableChangesApplied.SchemaName">
            <summary>
            Gets or sets get or Set the schema used for the DmTableSurrogate.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.TableChangesApplied.State">
            <summary>
            Gets or sets the RowState of the applied rows.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.TableChangesApplied.ResolvedConflicts">
            <summary>
            Gets or sets the resolved conflict rows applied count.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.TableChangesApplied.Applied">
            <summary>
            Gets or sets the rows changes applied count. This count contains resolved conflicts count also.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.TableChangesApplied.Failed">
            <summary>
            Gets or sets the rows changes failed count.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.TableChangesApplied.TotalRowsCount">
            <summary>
            Gets or sets the total rows count to apply for all tables (used for progress during sync).
            </summary>
        </member>
        <member name="P:Dotmim.Sync.TableChangesApplied.TotalAppliedCount">
            <summary>
            Gets or sets the total rows count already applied for all tables (used for progress during sync).
            </summary>
        </member>
        <member name="T:Dotmim.Sync.TableChangesSelected">
            <summary>
            Get changes to be applied (contains Deletes AND Inserts AND Updates).
            </summary>
        </member>
        <member name="M:Dotmim.Sync.TableChangesSelected.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Dotmim.Sync.TableChangesSelected"/> class.
            Ctor for serialization purpose.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.TableChangesSelected.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Dotmim.Sync.TableChangesSelected"/> class.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.TableChangesSelected.TableName">
            <summary>
            Gets or sets the table name.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.TableChangesSelected.SchemaName">
            <summary>
            Gets or sets get or Set the schema used for the DmTableSurrogate.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.TableChangesSelected.Deletes">
            <summary>
            Gets or sets the number of deletes that should be applied to a table during the synchronization session.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.TableChangesSelected.Upserts">
            <summary>
            Gets or sets the number of updates OR inserts that should be applied to a table during the synchronization session.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.TableChangesSelected.TotalChanges">
            <summary>
            Gets the total number of changes that are applied to a table during the synchronization session.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.TableChangesSelected.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
        </member>
        <member name="T:Dotmim.Sync.TableConflictErrorApplied">
            <summary>
            Table Conflict Error Applied.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.TableConflictErrorApplied.HasBeenResolved">
            <summary>
            Gets or sets a value indicating whether gets or Sets result of conflict resolution.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.TableConflictErrorApplied.HasBeenMarkForNextSync">
            <summary>
            Gets or sets a value indicating whether gets or Sets a row to be mark for next sync again.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.TableConflictErrorApplied.HasBeenApplied">
            <summary>
            Gets or sets a value indicating whether gets or Sets a boolean indicating if the conflict resolution has been applied locally.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.TableConflictErrorApplied.Exception">
            <summary>
            Gets or Sets the Exception if an error occured during conflict resolution.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.TableConflictErrorApplied.Row">
            <summary>
            Gets or Sets the row in error / conflict.
            </summary>
        </member>
        <member name="T:Dotmim.Sync.TableMetadatasCleaned">
            <summary>
            TableMetadatasCleaned is a class that contains the summary of metadatas cleaned for one table.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.TableMetadatasCleaned.TableName">
            <summary>
            Gets or sets the name of the table that the DmTableSurrogate object represents.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.TableMetadatasCleaned.SchemaName">
            <summary>
            Gets or sets get or Set the schema used for the DmTableSurrogate.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.TableMetadatasCleaned.TimestampLimit">
            <summary>
            Gets or Sets the last timestamp used as the limit to clean the table metadatas. All rows below this limit have beed cleaned.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.TableMetadatasCleaned.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Dotmim.Sync.TableMetadatasCleaned"/> class.
            Createa new instance of a summary of metadatas cleaned for one table.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.TableMetadatasCleaned.RowsCleanedCount">
            <summary>
            Gets or Sets the metadatas rows count, that have been cleaned.
            </summary>
        </member>
        <member name="T:Dotmim.Sync.BaseOrchestrator">
            <summary>
            Contains methods to apply changes.
            </summary>
            <summary>
            Contains methods to apply changes.
            </summary>
            <summary>
            Contains methods to load and save batch info.
            </summary>
            <summary>
            Contains methods to handle conflicts.
            </summary>
            <summary>
            Contains methods to reset a table, disable and enable constraints.
            </summary>
            <summary>
            Contains internals methods and properties for the orchestrator.
            </summary>
            <summary>
            Contains the logic to handle errors during the sync process.
            </summary>
            <summary>
            Contains the logic to get the schema from the database.
            </summary>
            <summary>
            Contains the logic to get the last timestamp from the orchestrator database.
            </summary>
            <summary>
            Contains internal methods to create, drop, check stored procedures.
            </summary>
            <summary>
            Contains internals methods to manage tables.
            </summary>
            <summary>
            Contains internals methods to create tracking tables.
            </summary>
            <summary>
            Contains internal methods to create triggers.
            </summary>
            <summary>
            Contains internal methods to get command from provider, check connection is opened, affect connection and transaction.
            </summary>
            <summary>
            Contains internals methods to set commands parameters.
            </summary>
            <summary>
            Contains the logic to get changes.
            </summary>
            <summary>
            Contains internals methods to clear metadatas.
            </summary>
            <summary>
            Contains internal provisioning methods.
            </summary>
            <summary>
            Contains the logic to handle client scope info.
            </summary>
            <summary>
            Contains the logic to handle client scope info.
            </summary>
            <summary>
            Contains the logic to handle scopes tables.
            </summary>
            <summary>
            Contains the logic to upgrade the database schema to the last version.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.InternalApplyChangesAsync(Dotmim.Sync.ScopeInfo,Dotmim.Sync.SyncContext,Dotmim.Sync.MessageApplyChanges,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.IProgress{Dotmim.Sync.ProgressArgs},System.Threading.CancellationToken)">
            <summary>
            Apply changes : Delete / Insert / Update
            the fromScope is local client scope when this method is called from server
            the fromScope is server scope when this method is called from client.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.InternalApplyTableChangesAsync(Dotmim.Sync.ScopeInfo,Dotmim.Sync.SyncContext,Dotmim.Sync.SyncTable,Dotmim.Sync.MessageApplyChanges,Dotmim.Sync.SyncTable,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,Dotmim.Sync.Enumerations.SyncRowState,Dotmim.Sync.DatabaseChangesApplied,System.IProgress{Dotmim.Sync.ProgressArgs},System.Threading.CancellationToken)">
            <summary>
            Apply changes internal method for one type of query: Insert, Update or Delete for every batch from a table.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.InternalApplySingleRowAsync(Dotmim.Sync.SyncContext,System.Data.Common.DbCommand,Dotmim.Sync.SyncRow,Dotmim.Sync.SyncTable,Dotmim.Sync.DbSyncAdapter,Dotmim.Sync.Enumerations.SyncRowState,Dotmim.Sync.MessageApplyChanges,Dotmim.Sync.Builders.DbCommandType,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.IProgress{Dotmim.Sync.ProgressArgs},System.Threading.CancellationToken)">
            <summary>
            Apply a single row.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.InternalApplyBatchRowsAsync(Dotmim.Sync.SyncContext,System.Data.Common.DbCommand,System.Collections.Generic.List{Dotmim.Sync.SyncRow},Dotmim.Sync.SyncTable,Dotmim.Sync.Enumerations.SyncRowState,Dotmim.Sync.MessageApplyChanges,Dotmim.Sync.Builders.DbCommandType,Dotmim.Sync.DbSyncAdapter,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.IProgress{Dotmim.Sync.ProgressArgs},System.Threading.CancellationToken)">
            <summary>
            Apply a batch of rows.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.InternalApplyConflictsAndErrorsAsync(Dotmim.Sync.ScopeInfo,Dotmim.Sync.SyncContext,Dotmim.Sync.SyncTable,Dotmim.Sync.Enumerations.SyncRowState,Dotmim.Sync.SyncTable,System.Collections.Generic.List{Dotmim.Sync.SyncRow},System.Collections.Generic.List{System.ValueTuple{Dotmim.Sync.SyncRow,System.Exception}},Dotmim.Sync.MessageApplyChanges,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.IProgress{Dotmim.Sync.ProgressArgs},System.Threading.CancellationToken)">
            <summary>
            Apply conflicts and errors.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.InternalApplyCleanErrorsAsync(Dotmim.Sync.ScopeInfo,Dotmim.Sync.SyncContext,Dotmim.Sync.Batch.BatchInfo,Dotmim.Sync.MessageApplyChanges,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.IProgress{Dotmim.Sync.ProgressArgs},System.Threading.CancellationToken)">
            <summary>
            Internal method to apply clean errors.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.InternalApplyDeleteAsync(Dotmim.Sync.ScopeInfo,Dotmim.Sync.SyncContext,Dotmim.Sync.Batch.BatchInfo,Dotmim.Sync.SyncRow,Dotmim.Sync.SyncTable,System.Nullable{System.Int64},System.Nullable{System.Guid},System.Boolean,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.IProgress{Dotmim.Sync.ProgressArgs},System.Threading.CancellationToken)">
            <summary>
            Apply a delete on a row. if forceWrite, force the delete.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.InternalApplyUpdateAsync(Dotmim.Sync.ScopeInfo,Dotmim.Sync.SyncContext,Dotmim.Sync.Batch.BatchInfo,Dotmim.Sync.SyncRow,Dotmim.Sync.SyncTable,System.Nullable{System.Int64},System.Nullable{System.Guid},System.Boolean,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.IProgress{Dotmim.Sync.ProgressArgs},System.Threading.CancellationToken)">
            <summary>
            Apply a single update in the current datasource. if forceWrite, force the update.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.LoadBatchInfos">
             <summary>
             Load all batch infos from the batch directory (see <see cref="P:Dotmim.Sync.SyncOptions.BatchDirectory"/>).
             <example>
             <code>
             var batchInfos = agent.LocalOrchestrator.LoadBatchInfos();
            
             foreach (var batchInfo in batchInfos)
                 Console.WriteLine(batchInfo.RowsCount);
             </code>
             </example>
             </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.LoadTablesFromBatchInfo(Dotmim.Sync.Batch.BatchInfo,System.Nullable{Dotmim.Sync.Enumerations.SyncRowState})">
            <inheritdoc cref="M:Dotmim.Sync.BaseOrchestrator.LoadTablesFromBatchInfo(System.String,Dotmim.Sync.Batch.BatchInfo,System.Nullable{Dotmim.Sync.Enumerations.SyncRowState})"/>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.LoadTablesFromBatchInfo(System.String,Dotmim.Sync.Batch.BatchInfo,System.Nullable{Dotmim.Sync.Enumerations.SyncRowState})">
             <summary>
             Load all tables from a batch info. All rows serialized on disk are loaded in memory once you are iterating.
            
             <code>
             var batchInfos = await agent.LocalOrchestrator.LoadBatchInfos();
             foreach (var batchInfo in batchInfos)
             {
                // Load all rows from error tables specifying the specific SyncRowState states
                var allTables = agent.LocalOrchestrator.LoadTablesFromBatchInfo(batchInfo, SyncRowState.ApplyDeletedFailed | SyncRowState.ApplyModifiedFailed);
            
                // Enumerate all rows in error
                foreach (var table in allTables)
                  foreach (var row in table.Rows)
                    Console.WriteLine(row);
             }
             </code>
             </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.LoadTableFromBatchInfo(Dotmim.Sync.Batch.BatchInfo,System.String,System.String,System.Nullable{Dotmim.Sync.Enumerations.SyncRowState})">
            <inheritdoc cref="M:Dotmim.Sync.BaseOrchestrator.LoadTableFromBatchInfo(Dotmim.Sync.Batch.BatchInfo,System.String,System.String,System.Nullable{Dotmim.Sync.Enumerations.SyncRowState})"/>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.LoadTableFromBatchInfo(System.String,Dotmim.Sync.Batch.BatchInfo,System.String,System.String,System.Nullable{Dotmim.Sync.Enumerations.SyncRowState})">
            <summary>
            Load a table with all rows from a <see cref="T:Dotmim.Sync.Batch.BatchInfo"/> instance. You need a <see cref="T:Dotmim.Sync.ScopeInfoClient"/> instance to be able to load rows for this client.
            <para>
            Once loaded, all rows are in memory.
            </para>
            <example>
            <code>
            // get the local client scope info
            var cScopeInfoClient = await localOrchestrator.GetScopeInfoClientAsync(scopeName, parameters);
            // get all changes from server
            var changes = await remoteOrchestrator.GetChangesAsync(cScopeInfoClient);
            // load changes for table ProductCategory in memory
            var productCategoryTable = await localOrchestrator.LoadBatchInfo(scopeName, changes, "ProductCategory")
            foreach (var productCategoryRow in productCategoryTable.Rows)
            {
               ....
            }
            </code>
            </example>
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.LoadTableFromBatchPartInfo(System.String,System.Nullable{Dotmim.Sync.Enumerations.SyncRowState},System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <summary>
            Load a table from a batch part info.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.LoadTableFromBatchPartInfo(System.String,System.String,System.Nullable{Dotmim.Sync.Enumerations.SyncRowState},System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <summary>
            Load a table from a batch part info.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.SaveTableToBatchPartInfoAsync(Dotmim.Sync.Batch.BatchInfo,Dotmim.Sync.Batch.BatchPartInfo,Dotmim.Sync.SyncTable)">
            <summary>
            Save a batch part info containing all rows from a sync table.
            </summary>
            <param name="batchInfo">Represents the directory containing all batch parts and the schema associated.</param>
            <param name="batchPartInfo">Represents the table to serialize in a batch part.</param>
            <param name="syncTable">The table to serialize.</param>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.SaveTableToBatchPartInfoAsync(System.String,Dotmim.Sync.Batch.BatchInfo,Dotmim.Sync.Batch.BatchPartInfo,Dotmim.Sync.SyncTable)">
            <inheritdoc cref="M:Dotmim.Sync.BaseOrchestrator.SaveTableToBatchPartInfoAsync(Dotmim.Sync.Batch.BatchInfo,Dotmim.Sync.Batch.BatchPartInfo,Dotmim.Sync.SyncTable)"/>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.InternalLoadTableFromBatchInfo(Dotmim.Sync.SyncContext,Dotmim.Sync.Batch.BatchInfo,System.String,System.String,System.Nullable{Dotmim.Sync.Enumerations.SyncRowState})">
            <summary>
            Load the Batch info in memory, in a SyncTable.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.InternalLoadTableFromBatchPartInfo(Dotmim.Sync.SyncContext,System.String,System.Nullable{Dotmim.Sync.Enumerations.SyncRowState},System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <summary>
            Load the Batch part info in memory, in a SyncTable.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.InternalSaveTableToBatchPartInfoAsync(Dotmim.Sync.SyncContext,Dotmim.Sync.Batch.BatchInfo,Dotmim.Sync.Batch.BatchPartInfo,Dotmim.Sync.SyncTable)">
            <summary>
            Save a sync table to a batch part info.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.InternalGetConflictRowAsync(Dotmim.Sync.ScopeInfo,Dotmim.Sync.SyncContext,Dotmim.Sync.SyncTable,Dotmim.Sync.SyncRow,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.IProgress{Dotmim.Sync.ProgressArgs},System.Threading.CancellationToken)">
            <summary>
            Try to get a source row that is in conflict.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.InternalGetConflict(Dotmim.Sync.SyncContext,Dotmim.Sync.SyncRow,Dotmim.Sync.SyncRow)">
            <summary>
            We have a conflict, try to get the source row and generate a conflict.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.GetConflictResolutionAsync(Dotmim.Sync.ScopeInfo,Dotmim.Sync.SyncContext,System.Guid,Dotmim.Sync.SyncRow,Dotmim.Sync.SyncTable,Dotmim.Sync.Enumerations.ConflictResolutionPolicy,System.Guid,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.IProgress{Dotmim.Sync.ProgressArgs},System.Threading.CancellationToken)">
            <summary>
            A conflict has occured, we try to ask for the solution to the user.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.HandleConflictAsync(Dotmim.Sync.ScopeInfo,Dotmim.Sync.SyncContext,Dotmim.Sync.Batch.BatchInfo,System.Guid,System.Guid,Dotmim.Sync.SyncRow,Dotmim.Sync.SyncTable,Dotmim.Sync.Enumerations.ConflictResolutionPolicy,System.Nullable{System.Int64},System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.IProgress{Dotmim.Sync.ProgressArgs},System.Threading.CancellationToken)">
            <summary>
            Handle a conflict
            The int returned is the conflict count I need.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.ResetTableAsync(Dotmim.Sync.ScopeInfo,System.String,System.String,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.IProgress{Dotmim.Sync.ProgressArgs},System.Threading.CancellationToken)">
            <summary>
            Reset a table designed from objectName and optionally ownerName, deleting all rows from this table and corresponding tracking_table. This method is used when you want to Reinitialize your database.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.ResetTablesAsync(Dotmim.Sync.ScopeInfo,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.IProgress{Dotmim.Sync.ProgressArgs},System.Threading.CancellationToken)">
            <summary>
            Reset all tables, deleting all rows from table and tracking_table. This method is used when you want to Reinitialize your database.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.DisableConstraintsAsync(Dotmim.Sync.ScopeInfo,System.String,System.String,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.IProgress{Dotmim.Sync.ProgressArgs},System.Threading.CancellationToken)">
             <summary>
             Disable a table's constraints.
             <para>
             Usually this method is surrounded by a connection / transaction.
             </para>
             <example>
             <code>
             var localOrchestrator = new LocalOrchestrator(clientProvider);
            
             using var sqlConnection = new SqlConnection(clientProvider.ConnectionString);
            
             sqlConnection.Open();
             using var sqlTransaction = sqlConnection.BeginTransaction();
            
             var scopeInfo = await localOrchestrator.GetScopeInfoAsync(sqlConnection, sqlTransaction);
             await localOrchestrator.DisableConstraintsAsync(scopeInfo, "ProductCategory", default,
                 sqlConnection, sqlTransaction);
            
             // .. Do some random insert in the ProductCategory table
             await DoSomeRandomInsertInProductCategoryTableAsync(sqlConnection, sqlTransaction);
            
             await localOrchestrator.EnableConstraintsAsync(scopeInfo, "ProductCategory", default,
                 sqlConnection, sqlTransaction);
            
             sqlTransaction.Commit();
             sqlConnection.Close();
             </code>
             </example>
             </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.EnableConstraintsAsync(Dotmim.Sync.ScopeInfo,System.String,System.String,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.IProgress{Dotmim.Sync.ProgressArgs},System.Threading.CancellationToken)">
             <summary>
             Enable a table's constraints.
             <para>
             Usually this method is surrounded by a connection / transaction.
             </para>
             <example>
             <code>
             var localOrchestrator = new LocalOrchestrator(clientProvider);
            
             using var sqlConnection = new SqlConnection(clientProvider.ConnectionString);
            
             sqlConnection.Open();
             using var sqlTransaction = sqlConnection.BeginTransaction();
            
             var scopeInfo = await localOrchestrator.GetScopeInfoAsync(sqlConnection, sqlTransaction);
             await localOrchestrator.DisableConstraintsAsync(scopeInfo, "ProductCategory", default,
                 sqlConnection, sqlTransaction);
            
             // .. Do some random insert in the ProductCategory table
             await DoSomeRandomInsertInProductCategoryTableAsync(sqlConnection, sqlTransaction);
            
             await localOrchestrator.EnableConstraintsAsync(scopeInfo, "ProductCategory", default,
                 sqlConnection, sqlTransaction);
            
             sqlTransaction.Commit();
             sqlConnection.Close();
             </code>
             </example>
             </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.ResetTableAsync(Dotmim.Sync.ScopeInfo,Dotmim.Sync.SyncContext,System.String,System.String,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.IProgress{Dotmim.Sync.ProgressArgs},System.Threading.CancellationToken)">
            <summary>
            Reset a table, deleting rows from table and tracking_table.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.InternalDisableConstraintsAsync(Dotmim.Sync.ScopeInfo,Dotmim.Sync.SyncContext,Dotmim.Sync.SyncTable,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.IProgress{Dotmim.Sync.ProgressArgs},System.Threading.CancellationToken)">
            <summary>
            Disabling all constraints on synced tables.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.InternalEnableConstraintsAsync(Dotmim.Sync.ScopeInfo,Dotmim.Sync.SyncContext,Dotmim.Sync.SyncTable,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.IProgress{Dotmim.Sync.ProgressArgs},System.Threading.CancellationToken)">
            <summary>
            Enabling all constraints on synced tables.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.InternalResetTableAsync(Dotmim.Sync.ScopeInfo,Dotmim.Sync.SyncContext,Dotmim.Sync.SyncTable,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.IProgress{Dotmim.Sync.ProgressArgs},System.Threading.CancellationToken)">
            <summary>
            Reset a table, deleting rows from table and tracking_table.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.BaseOrchestrator.Serializer">
            <summary>
            Gets a static serializer globally used by all orchestrators.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.BaseOrchestrator.Interceptors">
            <summary>
            Gets all the interceptors for this orchestrator.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.#ctor(Dotmim.Sync.CoreProvider,Dotmim.Sync.SyncOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Dotmim.Sync.BaseOrchestrator"/> class.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.BaseOrchestrator.Provider">
            <summary>
            Gets or Sets the provider used by this local orchestrator.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.BaseOrchestrator.Options">
            <summary>
            Gets the options used by this local orchestrator.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.BaseOrchestrator.CompleteTime">
            <summary>
            Gets or Sets the end time for this orchestrator.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.BaseOrchestrator.Logger">
            <summary>
            Gets or Sets the logger used by this orchestrator.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.ClearInterceptors``1">
            <summary>
            Remove all Interceptors based on type of ProgressArgs.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.ClearInterceptors">
            <summary>
            Remove all Interceptors.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.ClearInterceptors(System.Guid)">
            <summary>
            Remove interceptor based on Id.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.HasInterceptors``1">
            <summary>
            Returns a boolean value indicating if we have any Interceptors for the current type T.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.GetSyncAdapter(Dotmim.Sync.SyncTable,Dotmim.Sync.ScopeInfo)">
            <summary>
            Get the provider sync adapter.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.GetScopeBuilder(System.String)">
            <summary>
            Get a provider scope builder by scope table name.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.GetHelloAsync">
            <summary>
            Check if a database exists, regarding the provider you are using. Returns database name and database version.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.GetHelloAsync(System.String)">
            <summary>
            Check if a database exists, regarding the provider you are using. Returns database name and database version.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.GetSnapshotDirectoryAsync(Dotmim.Sync.SyncParameters,System.IProgress{Dotmim.Sync.ProgressArgs},System.Threading.CancellationToken)">
            <summary>
            Get a snapshot root directory name and folder directory name.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.GetSnapshotDirectoryAsync(System.String,Dotmim.Sync.SyncParameters,System.IProgress{Dotmim.Sync.ProgressArgs},System.Threading.CancellationToken)">
            <summary>
            Get a snapshot root directory name and folder directory name.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.ToString">
            <summary>
            Gets the inner provider name if any.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.AddInterceptor``1(System.Action{``0})">
            <summary>
            Add an interceptor of T.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.AddInterceptor``1(System.Func{``0,System.Threading.Tasks.Task})">
            <summary>
            Add an async interceptor of T.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.InterceptAsync``1(``0,System.IProgress{Dotmim.Sync.ProgressArgs},System.Threading.CancellationToken)">
            <summary>
            Try to proc a On[Method].
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.ReportProgress(Dotmim.Sync.SyncContext,System.IProgress{Dotmim.Sync.ProgressArgs},Dotmim.Sync.ProgressArgs,System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <summary>
            Try to report progress.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.OpenConnectionAsync(Dotmim.Sync.SyncContext,System.Data.Common.DbConnection,System.IProgress{Dotmim.Sync.ProgressArgs},System.Threading.CancellationToken)">
            <summary>
            Open a connection.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.CloseConnectionAsync(Dotmim.Sync.SyncContext,System.Data.Common.DbConnection,System.IProgress{Dotmim.Sync.ProgressArgs},System.Threading.CancellationToken)">
            <summary>
            Close a connection.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.InternalIsOutDatedAsync(Dotmim.Sync.SyncContext,Dotmim.Sync.ScopeInfoClient,Dotmim.Sync.ScopeInfo,System.IProgress{Dotmim.Sync.ProgressArgs},System.Threading.CancellationToken)">
            <summary>
            Check if the orchestrator database is outdated.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.InternalCanCleanFolderAsync(System.String,Dotmim.Sync.SyncParameters,Dotmim.Sync.Batch.BatchInfo,System.IProgress{Dotmim.Sync.ProgressArgs},System.Threading.CancellationToken)">
            <summary>
            Internal routine to clean tmp folders. MUST be compare also with Options.CleanFolder.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.InternalGetSnapshotDirectoryPathAsync(System.String,Dotmim.Sync.SyncParameters,System.IProgress{Dotmim.Sync.ProgressArgs},System.Threading.CancellationToken)">
            <summary>
            Internal routine to get the snapshot root directory and batch directory name.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.GetSyncError(Dotmim.Sync.SyncContext,System.Exception,System.String,System.String)">
            <summary>
            Returns a new instance of <see cref="T:Dotmim.Sync.SyncException"/>  based on the current exception and optional message, from the method caller.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.InternalGetHelloAsync(Dotmim.Sync.SyncContext,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.IProgress{Dotmim.Sync.ProgressArgs},System.Threading.CancellationToken)">
            <summary>
            Get hello from database.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.HandleErrorAsync(Dotmim.Sync.ScopeInfo,Dotmim.Sync.SyncContext,Dotmim.Sync.Batch.BatchInfo,Dotmim.Sync.SyncRow,Dotmim.Sync.Enumerations.SyncRowState,Dotmim.Sync.SyncTable,System.Exception,System.Guid,System.Nullable{System.Int64},System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.IProgress{Dotmim.Sync.ProgressArgs},System.Threading.CancellationToken)">
            <summary>
            Handle a conflict
            The int returned is the conflict count I need.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.GetSchemaAsync(System.String,Dotmim.Sync.SyncSetup,System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <summary>
            Read the schema stored from the orchestrator database, through the provider.
            <example>
            Example:
            <code>
             var remoteOrchestrator = new RemoteOrchestrator(serverProvider);
             var setup = new SyncSetup("ProductCategory", "Product");
             var schema = await remoteOrchestrator.GetSchemaAsync(scopeName, setup);
            </code>
            </example>
            </summary>
            <returns>Schema containing tables, columns, relations, primary keys.</returns>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.GetSchemaAsync(Dotmim.Sync.SyncSetup,System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <inheritdoc cref="M:Dotmim.Sync.BaseOrchestrator.GetSchemaAsync(System.String,Dotmim.Sync.SyncSetup,System.Data.Common.DbConnection,System.Data.Common.DbTransaction)"/>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.GetAllTablesAsync(System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <summary>
            Read all tables from database. Don't need a setup to get tables. This method returns all tables whatever they are tracked or not.
            <example>
            Example:
            <code>
             var remoteOrchestrator = new RemoteOrchestrator(serverProvider);
             var setup = await remoteOrchestrator.GetAllTablesAsync()
            </code>
            </example>
            </summary>
            <returns>SyncSetup containing tables names and column names.</returns>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.InternalGetSchemaAsync(Dotmim.Sync.SyncContext,Dotmim.Sync.SyncSetup,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.IProgress{Dotmim.Sync.ProgressArgs},System.Threading.CancellationToken)">
            <summary>
            update configuration object with tables desc from server database.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.InternalGetAllTablesAsync(Dotmim.Sync.SyncContext,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.IProgress{Dotmim.Sync.ProgressArgs},System.Threading.CancellationToken)">
            <summary>
            Get all tables with column names from database.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.FillSyncTableWithColumns(Dotmim.Sync.SyncContext,Dotmim.Sync.SetupTable,Dotmim.Sync.SyncTable,System.Collections.Generic.IEnumerable{Dotmim.Sync.SyncColumn})">
            <summary>
            Generate the DmTable configuration from a given columns list
            Validate that all columns are currently supported by the provider.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.SetPrimaryKeysAsync(Dotmim.Sync.SyncContext,Dotmim.Sync.SyncTable,Dotmim.Sync.Builders.DbTableBuilder,System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <summary>
            Check then add primary keys to schema table.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.SetRelations(Dotmim.Sync.SyncContext,System.Collections.Generic.List{Dotmim.Sync.Manager.DbRelationDefinition},Dotmim.Sync.SyncSet)">
            <summary>
            For all relations founded, create the SyncRelation and add it to schema.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.GetLocalTimestampAsync(System.String,System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <summary>
            Get the last timestamp from the orchestrator database.
            <example>
            Example:
            <code>
             var remoteOrchestrator = new RemoteOrchestrator(serverProvider);
             var ts = await remoteOrchestrator.GetLocalTimestampAsync()
            </code>
            </example>
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.GetLocalTimestampAsync(System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <inheritdoc cref="M:Dotmim.Sync.BaseOrchestrator.GetLocalTimestampAsync(System.String,System.Data.Common.DbConnection,System.Data.Common.DbTransaction)"/>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.InternalGetLocalTimestampAsync(Dotmim.Sync.SyncContext,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.IProgress{Dotmim.Sync.ProgressArgs},System.Threading.CancellationToken)">
            <summary>
            Read a scope info.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.CreateStoredProcedureAsync(Dotmim.Sync.ScopeInfo,System.String,System.String,Dotmim.Sync.Builders.DbStoredProcedureType,System.Boolean)">
            <summary>
            Create a <strong>Stored Procedure</strong> for a given table present in an existing scopeInfo.
            <example>
            <code>
            var remoteOrchestrator = new RemoteOrchestrator(sqlProvider, options);
            var scopeInfo = await remoteOrchestrator.GetScopeInfoAsync(setup);
            await remoteOrchestrator.CreateStoredProcedureAsync(scopeInfo, "Employee", null, DbStoredProcedureType.SelectChanges);
            </code>
            </example>
            </summary>
            <param name="scopeInfo">ScopeInfo instance used to defines stored procedure generation (name, prefix, suffix, filters ....).</param>
            <param name="tableName"><strong>Table Name</strong>. Should exists in ScopeInfo instance.</param>
            <param name="schemaName">Optional <strong>Schema Name</strong>. Only available for <strong>Sql Server</strong>.</param>
            <param name="storedProcedureType">Stored Procedure type. See <see cref="T:Dotmim.Sync.Builders.DbStoredProcedureType"/> enumeration.</param>
            <param name="overwrite">If specified the stored procedure is generated again, even if already exists.</param>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.CreateStoredProceduresAsync(Dotmim.Sync.ScopeInfo,System.String,System.String,System.Boolean)">
            <summary>
            Create all <strong>Stored Procedures</strong> for a given table present in an existing scopeInfo.
            <example>
            <code>
            var remoteOrchestrator = new RemoteOrchestrator(sqlProvider, options);
            var scopeInfo = await remoteOrchestrator.GetScopeInfoAsync(setup);
            await remoteOrchestrator.CreateStoredProceduresAsync(scopeInfo, "Employee");
            </code>
            </example>
            </summary>
            <param name="scopeInfo">ScopeInfo instance used to defines stored procedure generation (name, prefix, suffix, filters ....).</param>
            <param name="tableName"><strong>Table Name</strong>. Should exists in ScopeInfo instance.</param>
            <param name="schemaName">Optional <strong>Schema Name</strong>. Only available for <strong>Sql Server</strong>.</param>
            <param name="overwrite">If specified all the stored procedures are generated again, even if they already exist.</param>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.ExistStoredProcedureAsync(Dotmim.Sync.ScopeInfo,System.String,System.String,Dotmim.Sync.Builders.DbStoredProcedureType)">
            <summary>
            Check if a <strong>Stored Procedure</strong>, for a given table, exists.
            <example>
            <code>
            var remoteOrchestrator = new RemoteOrchestrator(sqlProvider, options);
            var scopeInfo = await remoteOrchestrator.GetScopeInfoAsync(setup);
            var exists = await remoteOrchestrator.ExistStoredProcedureAsync(scopeInfo, "Employee", null, DbStoredProcedureType.SelectChanges);
            </code>
            </example>
            </summary>
            <param name="scopeInfo">ScopeInfo instance used to defines stored procedure generation (name, prefix, suffix, filters ....).</param>
            <param name="tableName"><strong>Table Name</strong>. Should exists in ScopeInfo instance.</param>
            <param name="schemaName">Optional <strong>Schema Name</strong>. Only available for <strong>Sql Server</strong>.</param>
            <param name="storedProcedureType">Stored Procedure type. See <see cref="T:Dotmim.Sync.Builders.DbStoredProcedureType"/> enumeration.</param>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.DropStoredProcedureAsync(Dotmim.Sync.ScopeInfo,System.String,System.String,Dotmim.Sync.Builders.DbStoredProcedureType)">
            <summary>
            Drop a <strong>Stored Procedure</strong> for a given table present in an existing scopeInfo.
            <example>
            <code>
            var remoteOrchestrator = new RemoteOrchestrator(sqlProvider, options);
            var scopeInfo = await remoteOrchestrator.GetScopeInfoAsync(setup);
            await remoteOrchestrator.DropStoredProcedureAsync(scopeInfo, "Employee", null, DbStoredProcedureType.SelectChanges);
            </code>
            </example>
            </summary>
            <param name="scopeInfo">ScopeInfo instance used to defines stored procedure generation (name, prefix, suffix, filters ....).</param>
            <param name="tableName"><strong>Table Name</strong>. Should exists in ScopeInfo instance.</param>
            <param name="schemaName">Optional <strong>Schema Name</strong>. Only available for <strong>Sql Server</strong>.</param>
            <param name="storedProcedureType">Stored Procedure type. See <see cref="T:Dotmim.Sync.Builders.DbStoredProcedureType"/> enumeration.</param>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.DropStoredProceduresAsync(Dotmim.Sync.ScopeInfo,System.String,System.String)">
            <summary>
            Drop all <strong>Stored Procedures</strong> for a given table present in an existing scopeInfo.
            <example>
            <code>
            var remoteOrchestrator = new RemoteOrchestrator(sqlProvider, options);
            var scopeInfo = await remoteOrchestrator.GetScopeInfoAsync(setup);
            await remoteOrchestrator.DropStoredProceduresAsync(scopeInfo, "Employee");
            </code>
            </example>
            </summary>
            <param name="scopeInfo">ScopeInfo instance used to defines stored procedure generation (name, prefix, suffix, filters ....).</param>
            <param name="tableName"><strong>Table Name</strong>. Should exists in ScopeInfo instance.</param>
            <param name="schemaName">Optional <strong>Schema Name</strong>. Only available for <strong>Sql Server</strong>.</param>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.InternalCreateStoredProcedureAsync(Dotmim.Sync.ScopeInfo,Dotmim.Sync.SyncContext,Dotmim.Sync.Builders.DbTableBuilder,Dotmim.Sync.Builders.DbStoredProcedureType,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.IProgress{Dotmim.Sync.ProgressArgs},System.Threading.CancellationToken)">
            <summary>
            Internal create Stored Procedure routine.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.InternalDropStoredProcedureAsync(Dotmim.Sync.ScopeInfo,Dotmim.Sync.SyncContext,Dotmim.Sync.Builders.DbTableBuilder,Dotmim.Sync.Builders.DbStoredProcedureType,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.IProgress{Dotmim.Sync.ProgressArgs},System.Threading.CancellationToken)">
            <summary>
            Internal drop storedProcedure routine.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.InternalExistsStoredProcedureAsync(Dotmim.Sync.ScopeInfo,Dotmim.Sync.SyncContext,Dotmim.Sync.Builders.DbTableBuilder,Dotmim.Sync.Builders.DbStoredProcedureType,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.IProgress{Dotmim.Sync.ProgressArgs},System.Threading.CancellationToken)">
            <summary>
            Internal exists storedProcedure procedure routine.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.InternalDropStoredProceduresAsync(Dotmim.Sync.ScopeInfo,Dotmim.Sync.SyncContext,Dotmim.Sync.Builders.DbTableBuilder,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.IProgress{Dotmim.Sync.ProgressArgs},System.Threading.CancellationToken)">
            <summary>
            Internal drop storedProcedures routine.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.InternalCreateStoredProceduresAsync(Dotmim.Sync.ScopeInfo,Dotmim.Sync.SyncContext,System.Boolean,Dotmim.Sync.Builders.DbTableBuilder,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.IProgress{Dotmim.Sync.ProgressArgs},System.Threading.CancellationToken)">
            <summary>
            Internal create storedProcedures routine.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.CreateTableAsync(Dotmim.Sync.ScopeInfo,System.String,System.String,System.Boolean)">
            <summary>
            Create a <strong>Table</strong> for a given table present in an existing scopeInfo.
            <example>
            <code>
            var remoteOrchestrator = new RemoteOrchestrator(sqlProvider, options);
            var scopeInfo = await remoteOrchestrator.GetScopeInfoAsync(setup);
            await remoteOrchestrator.CreateTableAsync(scopeInfo, "Employee");
            </code>
            </example>
            </summary>
            <param name="scopeInfo">ScopeInfo instance used to defines table generation (name, columns....).</param>
            <param name="tableName"><strong>Table Name</strong>. Should exists in ScopeInfo instance.</param>
            <param name="schemaName">Optional <strong>Schema Name</strong>. Only available for <strong>Sql Server</strong>.</param>
            <param name="overwrite">If specified the table is dropped, if exists, then created.</param>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.CreateTablesAsync(Dotmim.Sync.ScopeInfo,System.Boolean)">
            <summary>
            Create all <strong>Tables</strong> present in an existing scopeInfo.
            <example>
            <code>
            var remoteOrchestrator = new RemoteOrchestrator(sqlProvider, options);
            var scopeInfo = await remoteOrchestrator.GetScopeInfoAsync(setup);
            await remoteOrchestrator.CreateTablesAsync(scopeInfo);
            </code>
            </example>
            </summary>
            <param name="scopeInfo">ScopeInfo instance used to defines table generation (name, columns....).</param>
            <param name="overwrite">If specified all tables are dropped, if exists, then created.</param>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.ExistTableAsync(Dotmim.Sync.ScopeInfo,System.String,System.String)">
            <summary>
            Check if <strong>Table</strong> exists, for a given table present in an existing scopeInfo.
            <example>
            <code>
            var remoteOrchestrator = new RemoteOrchestrator(sqlProvider, options);
            var scopeInfo = await remoteOrchestrator.GetScopeInfoAsync(setup);
            var exists = await remoteOrchestrator.ExistTableAsync(scopeInfo, "Employee");
            </code>
            </example>
            </summary>
            <param name="scopeInfo">ScopeInfo instance used to defines table generation (name, columns....).</param>
            <param name="tableName"><strong>Table Name</strong>. Should exists in ScopeInfo instance.</param>
            <param name="schemaName">Optional <strong>Schema Name</strong>. Only available for <strong>Sql Server</strong>.</param>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.DropTableAsync(Dotmim.Sync.ScopeInfo,System.String,System.String)">
            <summary>
            Drop a <strong>Table</strong> for a given table present in an existing scopeInfo.
            <example>
            <code>
            var remoteOrchestrator = new RemoteOrchestrator(sqlProvider, options);
            var scopeInfo = await remoteOrchestrator.GetScopeInfoAsync(setup);
            var exists = await remoteOrchestrator.DropTableAsync(scopeInfo, "Employee");
            </code>
            </example>
            </summary>
            <param name="scopeInfo">ScopeInfo instance used to defines table generation (name, columns....).</param>
            <param name="tableName"><strong>Table Name</strong>. Should exists in ScopeInfo instance.</param>
            <param name="schemaName">Optional <strong>Schema Name</strong>. Only available for <strong>Sql Server</strong>.</param>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.DropTablesAsync(Dotmim.Sync.ScopeInfo)">
            <summary>
            Drop all <strong>Tables</strong> present in an existing scopeInfo.
            <example>
            <code>
            var remoteOrchestrator = new RemoteOrchestrator(sqlProvider, options);
            var scopeInfo = await remoteOrchestrator.GetScopeInfoAsync(setup);
            await remoteOrchestrator.DropTablesAsync(scopeInfo);
            </code>
            </example>
            </summary>
            <param name="scopeInfo">ScopeInfo instance used to defines table generation (name, columns....).</param>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.InternalCreateTableAsync(Dotmim.Sync.ScopeInfo,Dotmim.Sync.SyncContext,Dotmim.Sync.Builders.DbTableBuilder,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.IProgress{Dotmim.Sync.ProgressArgs},System.Threading.CancellationToken)">
            <summary>
            Internal create table routine.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.InternalCreateSchemaAsync(Dotmim.Sync.ScopeInfo,Dotmim.Sync.SyncContext,Dotmim.Sync.Builders.DbTableBuilder,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.IProgress{Dotmim.Sync.ProgressArgs},System.Threading.CancellationToken)">
            <summary>
            Internal create table routine.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.InternalDropTableAsync(Dotmim.Sync.ScopeInfo,Dotmim.Sync.SyncContext,Dotmim.Sync.Builders.DbTableBuilder,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.IProgress{Dotmim.Sync.ProgressArgs},System.Threading.CancellationToken)">
            <summary>
            Internal drop table routine.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.InternalExistsTableAsync(Dotmim.Sync.ScopeInfo,Dotmim.Sync.SyncContext,Dotmim.Sync.Builders.DbTableBuilder,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.IProgress{Dotmim.Sync.ProgressArgs},System.Threading.CancellationToken)">
            <summary>
            Internal exists table procedure routine.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.InternalExistsSchemaAsync(Dotmim.Sync.ScopeInfo,Dotmim.Sync.SyncContext,Dotmim.Sync.Builders.DbTableBuilder,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.IProgress{Dotmim.Sync.ProgressArgs},System.Threading.CancellationToken)">
            <summary>
            Internal exists schema procedure routine.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.InternalExistsColumnAsync(Dotmim.Sync.ScopeInfo,Dotmim.Sync.SyncContext,System.String,Dotmim.Sync.Builders.DbTableBuilder,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.IProgress{Dotmim.Sync.ProgressArgs},System.Threading.CancellationToken)">
            <summary>
            Internal exists column procedure routine.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.CreateTrackingTableAsync(Dotmim.Sync.ScopeInfo,System.String,System.String,System.Boolean,System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <summary>
            Create a <strong>Tracking Table</strong> for a given table present in an existing scopeInfo.
            <example>
            <code>
            var remoteOrchestrator = new RemoteOrchestrator(sqlProvider, options);
            var scopeInfo = await remoteOrchestrator.GetScopeInfoAsync(setup);
            await remoteOrchestrator.CreateTrackingTableAsync(scopeInfo, "Employee");
            </code>
            </example>
            </summary>
            <param name="scopeInfo">ScopeInfo instance used to defines tracking table generation (name, prefix, suffix...).</param>
            <param name="tableName"><strong>Table Name</strong>. Should exists in ScopeInfo instance.</param>
            <param name="schemaName">Optional <strong>Schema Name</strong>. Only available for <strong>Sql Server</strong>.</param>
            <param name="overwrite">If specified the tracking table is dropped, if exists, then created.</param>
            <param name="connection">Optional Connection.</param>
            <param name="transaction">Optional Transaction.</param>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.ExistTrackingTableAsync(Dotmim.Sync.ScopeInfo,System.String,System.String,System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <summary>
            Check if a <strong>Tracking Table</strong> exists, for a given table present in an existing scopeInfo.
            <example>
            <code>
            var remoteOrchestrator = new RemoteOrchestrator(sqlProvider, options);
            var scopeInfo = await remoteOrchestrator.GetScopeInfoAsync(setup);
            var exists = await remoteOrchestrator.ExistTrackingTableAsync(scopeInfo, "Employee");
            </code>
            </example>
            </summary>
            <param name="scopeInfo">ScopeInfo instance used to defines tracking table generation (name, prefix, suffix...).</param>
            <param name="tableName"><strong>Table Name</strong>. Should exists in ScopeInfo instance.</param>
            <param name="schemaName">Optional <strong>Schema Name</strong>. Only available for <strong>Sql Server</strong>.</param>
            <param name="connection">Optional Connection.</param>
            <param name="transaction">Optional Transaction.</param>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.CreateTrackingTablesAsync(Dotmim.Sync.ScopeInfo,System.Boolean,System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <summary>
            Create ALL <strong>Tracking Tables</strong> for a given table present in an existing scopeInfo.
            <example>
            <code>
            var remoteOrchestrator = new RemoteOrchestrator(sqlProvider, options);
            var scopeInfo = await remoteOrchestrator.GetScopeInfoAsync(setup);
            await remoteOrchestrator.CreateTrackingTablesAsync(scopeInfo);
            </code>
            </example>
            </summary>
            <param name="scopeInfo">ScopeInfo instance used to defines tracking table generation (name, prefix, suffix...).</param>
            <param name="overwrite">If specified the tracking table is dropped, if exists, then created.</param>
            <param name="connection">Optional Connection.</param>
            <param name="transaction">Optional Transaction.</param>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.DropTrackingTableAsync(Dotmim.Sync.ScopeInfo,System.String,System.String,System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <summary>
            Drop a tracking table.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.DropTrackingTablesAsync(Dotmim.Sync.ScopeInfo,System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <summary>
            Drop all <strong>Tracking Tables</strong> for a given table present in an existing scopeInfo.
            <example>
            <code>
            var remoteOrchestrator = new RemoteOrchestrator(sqlProvider, options);
            var scopeInfo = await remoteOrchestrator.GetScopeInfoAsync(setup);
            await remoteOrchestrator.DropTrackingTablesAsync(scopeInfo);
            </code>
            </example>
            </summary>
            <param name="scopeInfo">ScopeInfo instance used to defines tracking table generation (name, prefix, suffix...).</param>
            <param name="connection">Optional Connection.</param>
            <param name="transaction">Optional Transaction.</param>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.InternalCreateTrackingTableAsync(Dotmim.Sync.ScopeInfo,Dotmim.Sync.SyncContext,Dotmim.Sync.Builders.DbTableBuilder,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.IProgress{Dotmim.Sync.ProgressArgs},System.Threading.CancellationToken)">
            <summary>
            Internal create tracking table routine.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.InternalDropTrackingTableAsync(Dotmim.Sync.ScopeInfo,Dotmim.Sync.SyncContext,Dotmim.Sync.Builders.DbTableBuilder,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.IProgress{Dotmim.Sync.ProgressArgs},System.Threading.CancellationToken)">
            <summary>
            Internal drop tracking table routine.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.InternalExistsTrackingTableAsync(Dotmim.Sync.ScopeInfo,Dotmim.Sync.SyncContext,Dotmim.Sync.Builders.DbTableBuilder,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.IProgress{Dotmim.Sync.ProgressArgs},System.Threading.CancellationToken)">
            <summary>
            Internal exists tracking table procedure routine.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.CreateTriggerAsync(Dotmim.Sync.ScopeInfo,System.String,System.String,Dotmim.Sync.Builders.DbTriggerType,System.Boolean,System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <summary>
            Create a <strong>Trigger</strong> for a given table present in an existing scopeInfo.
            <example>
            <code>
            var remoteOrchestrator = new RemoteOrchestrator(sqlProvider, options);
            var scopeInfo = await remoteOrchestrator.GetScopeInfoAsync(setup);
            await remoteOrchestrator.CreateTriggerAsync(scopeInfo, "Employee", DbTriggerType.Insert);
            </code>
            </example>
            </summary>
            <param name="scopeInfo">ScopeInfo instance used to defines trigger generation (name, prefix, suffix...).</param>
            <param name="tableName"><strong>Table Name</strong>. Should exists in ScopeInfo instance.</param>
            <param name="schemaName">Optional <strong>Schema Name</strong>. Only available for <strong>Sql Server</strong>.</param>
            <param name="triggerType">Trigger type to create.</param>
            <param name="overwrite">If specified the trigger is dropped, if exists, then created again.</param>
            <param name="connection">Optional Connection.</param>
            <param name="transaction">Optional Transaction.</param>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.CreateTriggersAsync(Dotmim.Sync.ScopeInfo,System.String,System.String,System.Boolean,System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <summary>
            Create all <strong>Triggers</strong> for a given table present in an existing scopeInfo.
            <example>
            <code>
            var remoteOrchestrator = new RemoteOrchestrator(sqlProvider, options);
            var scopeInfo = await remoteOrchestrator.GetScopeInfoAsync(setup);
            await remoteOrchestrator.CreateTriggersAsync(scopeInfo, "Employee");
            </code>
            </example>
            </summary>
            <param name="scopeInfo">ScopeInfo instance used to defines trigger generation (name, prefix, suffix...).</param>
            <param name="tableName"><strong>Table Name</strong>. Should exists in ScopeInfo instance.</param>
            <param name="schemaName">Optional <strong>Schema Name</strong>. Only available for <strong>Sql Server</strong>.</param>
            <param name="overwrite">If specified the triggers are dropped, if exists, then created again.</param>
            <param name="connection">Optional Connection.</param>
            <param name="transaction">Optional Transaction.</param>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.ExistTriggerAsync(Dotmim.Sync.ScopeInfo,System.String,System.String,Dotmim.Sync.Builders.DbTriggerType,System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <summary>
            Check if a <strong>Trigger</strong>exists, for a given table present in an existing scopeInfo.
            <example>
            <code>
            var remoteOrchestrator = new RemoteOrchestrator(sqlProvider, options);
            var scopeInfo = await remoteOrchestrator.GetScopeInfoAsync(setup);
            await remoteOrchestrator.ExistTriggerAsync(scopeInfo, "Employee");
            </code>
            </example>
            </summary>
            <param name="scopeInfo">ScopeInfo instance used to defines trigger generation (name, prefix, suffix...).</param>
            <param name="tableName"><strong>Table Name</strong>. Should exists in ScopeInfo instance.</param>
            <param name="schemaName">Optional <strong>Schema Name</strong>. Only available for <strong>Sql Server</strong>.</param>
            <param name="triggerType">Trigger type to check if exist.</param>
            <param name="connection">Optional Connection.</param>
            <param name="transaction">Optional Transaction.</param>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.DropTriggerAsync(Dotmim.Sync.ScopeInfo,System.String,System.String,Dotmim.Sync.Builders.DbTriggerType,System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <summary>
            Drop a <strong>Trigger</strong>, for a given table present in an existing scopeInfo.
            <example>
            <code>
            var remoteOrchestrator = new RemoteOrchestrator(sqlProvider, options);
            var scopeInfo = await remoteOrchestrator.GetScopeInfoAsync(setup);
            await remoteOrchestrator.DropTriggerAsync(scopeInfo, "Employee", null, DbTriggerType.Insert);
            </code>
            </example>
            </summary>
            <param name="scopeInfo">ScopeInfo instance used to defines trigger generation (name, prefix, suffix...).</param>
            <param name="tableName"><strong>Table Name</strong>. Should exists in ScopeInfo instance.</param>
            <param name="schemaName">Optional <strong>Schema Name</strong>. Only available for <strong>Sql Server</strong>.</param>
            <param name="triggerType">Trigger type to drop.</param>
            <param name="connection">Optional Connection.</param>
            <param name="transaction">Optional Transaction.</param>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.DropTriggersAsync(Dotmim.Sync.ScopeInfo,System.String,System.String,System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <summary>
            Drop all <strong>Triggers</strong>, for a given table present in an existing scopeInfo.
            <example>
            <code>
            var remoteOrchestrator = new RemoteOrchestrator(sqlProvider, options);
            var scopeInfo = await remoteOrchestrator.GetScopeInfoAsync(setup);
            await remoteOrchestrator.DropTriggersAsync(scopeInfo, "Employee");
            </code>
            </example>
            </summary>
            <param name="scopeInfo">ScopeInfo instance used to defines trigger generation (name, prefix, suffix...).</param>
            <param name="tableName"><strong>Table Name</strong>. Should exists in ScopeInfo instance.</param>
            <param name="schemaName">Optional <strong>Schema Name</strong>. Only available for <strong>Sql Server</strong>.</param>
            <param name="connection">Optional Connection.</param>
            <param name="transaction">Optional Transaction.</param>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.InternalCreateTriggerAsync(Dotmim.Sync.ScopeInfo,Dotmim.Sync.SyncContext,Dotmim.Sync.Builders.DbTableBuilder,Dotmim.Sync.Builders.DbTriggerType,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.IProgress{Dotmim.Sync.ProgressArgs},System.Threading.CancellationToken)">
            <summary>
            Internal create trigger routine.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.InternalCreateTriggersAsync(Dotmim.Sync.ScopeInfo,Dotmim.Sync.SyncContext,System.Boolean,Dotmim.Sync.Builders.DbTableBuilder,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.IProgress{Dotmim.Sync.ProgressArgs},System.Threading.CancellationToken)">
            <summary>
            Internal create triggers routine.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.InternalDropTriggerAsync(Dotmim.Sync.ScopeInfo,Dotmim.Sync.SyncContext,Dotmim.Sync.Builders.DbTableBuilder,Dotmim.Sync.Builders.DbTriggerType,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.IProgress{Dotmim.Sync.ProgressArgs},System.Threading.CancellationToken)">
            <summary>
            Internal drop trigger routine.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.InternalDropTriggersAsync(Dotmim.Sync.ScopeInfo,Dotmim.Sync.SyncContext,Dotmim.Sync.Builders.DbTableBuilder,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.IProgress{Dotmim.Sync.ProgressArgs},System.Threading.CancellationToken)">
            <summary>
            Internal drop triggers routine.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.InternalExistsTriggerAsync(Dotmim.Sync.ScopeInfo,Dotmim.Sync.SyncContext,Dotmim.Sync.Builders.DbTableBuilder,Dotmim.Sync.Builders.DbTriggerType,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.IProgress{Dotmim.Sync.ProgressArgs},System.Threading.CancellationToken)">
            <summary>
            Internal exists trigger procedure routine.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.CreateChangesTable(Dotmim.Sync.SyncTable,Dotmim.Sync.SyncSet)">
            <summary>
            Create a change table that contains only primary keys and mutable columns.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.RemoveCommands">
            <summary>
            Remove a Command from internal shared dictionary.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.InternalGetCommandAsync(Dotmim.Sync.ScopeInfo,Dotmim.Sync.SyncContext,Dotmim.Sync.DbSyncAdapter,Dotmim.Sync.Builders.DbCommandType,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.IProgress{Dotmim.Sync.ProgressArgs},System.Threading.CancellationToken)">
            <summary>
            Get the command from provider, check connection is opened, affect connection and transaction
            Prepare the command parameters and add scope parameters.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.InternalSetCommandParametersValues(Dotmim.Sync.SyncContext,System.Data.Common.DbCommand,Dotmim.Sync.Builders.DbCommandType,Dotmim.Sync.DbSyncAdapter,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,Dotmim.Sync.SyncRow,System.Nullable{System.Guid},System.Nullable{System.Int64},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.IProgress{Dotmim.Sync.ProgressArgs},System.Threading.CancellationToken)">
            <summary>
            Set command parameters value mapped to Row.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.InternalSetUpsertsParameters(System.Data.Common.DbCommand,Dotmim.Sync.DbSyncAdapter)">
            <summary>
            Set the Upserts stored procedure parameters.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.InternalSetSelectRowParameters(System.Data.Common.DbCommand,Dotmim.Sync.DbSyncAdapter)">
            <summary>
            Set the SelectRow stored procedure parameters.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.InternalSetDeleteRowParameters(System.Data.Common.DbCommand,Dotmim.Sync.DbSyncAdapter)">
            <summary>
            Set the DeleteRow stored procedure parameters.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.InternalSetDeleteMetadataParameters(System.Data.Common.DbCommand,Dotmim.Sync.DbSyncAdapter)">
            <summary>
            Set the DeleteMetadata stored procedure parameters.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.InternalSetUpdateMetadataParameters(System.Data.Common.DbCommand,Dotmim.Sync.DbSyncAdapter)">
            <summary>
            Set the UpdateMetadata stored procedure parameters.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.InternalSetSelectMetadataParameters(System.Data.Common.DbCommand,Dotmim.Sync.DbSyncAdapter)">
            <summary>
            Set the SelectMetadata stored procedure parameters.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.InternalSetResetParameters(System.Data.Common.DbCommand,Dotmim.Sync.DbSyncAdapter)">
            <summary>
            Set the SelectMetadata stored procedure parameters.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.InternalSetSelectChangesParameters(System.Data.Common.DbCommand,Dotmim.Sync.DbSyncAdapter,Dotmim.Sync.SyncFilter)">
            <summary>
            Set the GetChanges stored procedure parameters, with Filter or without filter.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.InternalSetSelectInitializeChangesParameters(System.Data.Common.DbCommand,Dotmim.Sync.DbSyncAdapter,Dotmim.Sync.SyncFilter)">
            <summary>
            Set the Initialize stored procedure parameters, with Filter or without filter.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.InternalGetChangesAsync(Dotmim.Sync.ScopeInfo,Dotmim.Sync.SyncContext,System.Boolean,System.Nullable{System.Int64},System.Nullable{System.Guid},System.Boolean,Dotmim.Sync.Batch.BatchInfo,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.IProgress{Dotmim.Sync.ProgressArgs},System.Threading.CancellationToken)">
            <summary>
            Gets a batch of changes to synchronize when given batch size,
            destination knowledge, and change data retriever parameters.
            </summary>
            <returns>A DbSyncContext object that will be used to retrieve the modified data.</returns>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.InternalReadSyncTableChangesAsync(Dotmim.Sync.ScopeInfo,Dotmim.Sync.SyncContext,System.Nullable{System.Guid},Dotmim.Sync.SyncTable,Dotmim.Sync.Batch.BatchInfo,System.Boolean,System.Nullable{System.Int64},System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.IProgress{Dotmim.Sync.ProgressArgs},System.Threading.CancellationToken)">
            <summary>
            Read changes from a sync table.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.InternalAddRowToBatchPartInfoAsync(Dotmim.Sync.SyncContext,Dotmim.Sync.Serialization.LocalJsonSerializer,Dotmim.Sync.SyncRow,Dotmim.Sync.Batch.BatchInfo,Dotmim.Sync.Batch.BatchPartInfo,System.Collections.Generic.List{Dotmim.Sync.Batch.BatchPartInfo},Dotmim.Sync.SyncTable,Dotmim.Sync.TableChangesSelected,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.IProgress{Dotmim.Sync.ProgressArgs},System.Threading.CancellationToken)">
            <summary>
            Add a row to a batch part info.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.InternalGetEstimatedChangesCountAsync(Dotmim.Sync.ScopeInfo,Dotmim.Sync.SyncContext,System.Boolean,System.Nullable{System.Int64},System.Nullable{System.Guid},System.Boolean,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.IProgress{Dotmim.Sync.ProgressArgs},System.Threading.CancellationToken)">
            <summary>
            Gets changes rows count estimation.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.InternalGetSelectChangesCommandAsync(Dotmim.Sync.ScopeInfo,Dotmim.Sync.SyncContext,Dotmim.Sync.SyncTable,System.Boolean,System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <summary>
            Get the correct Select changes command
            Can be either
            - SelectInitializedChanges              : All changes for first sync
            - SelectChanges                         : All changes filtered by timestamp
            - SelectInitializedChangesWithFilters   : All changes for first sync with filters
            - SelectChangesWithFilters              : All changes filtered by timestamp with filters.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.CreateSyncRowFromReader(Dotmim.Sync.SyncContext,System.Data.IDataReader,Dotmim.Sync.SyncTable)">
            <summary>
            Create a new SyncRow from a dataReader.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.EnsureLastBatchInfo(Dotmim.Sync.ScopeInfo,Dotmim.Sync.SyncContext,Dotmim.Sync.Batch.BatchInfo,System.Collections.Generic.IEnumerable{Dotmim.Sync.Batch.BatchPartInfo},System.Collections.Generic.IEnumerable{Dotmim.Sync.SyncTable})">
            <summary>
            Ensure we have a correct order for last batch in batch part infos.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.InternalDeleteMetadatasAsync(System.Collections.Generic.IEnumerable{Dotmim.Sync.ScopeInfo},Dotmim.Sync.SyncContext,System.Int64,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.IProgress{Dotmim.Sync.ProgressArgs},System.Threading.CancellationToken)">
            <summary>
            Delete metadatas rows from the tracking table.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.InternalUpdateMetadatasAsync(Dotmim.Sync.ScopeInfo,Dotmim.Sync.SyncContext,Dotmim.Sync.SyncRow,Dotmim.Sync.SyncTable,System.Nullable{System.Guid},System.Boolean,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.IProgress{Dotmim.Sync.ProgressArgs},System.Threading.CancellationToken)">
            <summary>
            Update a metadata row.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.InternalProvisionAsync(Dotmim.Sync.ScopeInfo,Dotmim.Sync.SyncContext,System.Boolean,Dotmim.Sync.Enumerations.SyncProvision,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.IProgress{Dotmim.Sync.ProgressArgs},System.Threading.CancellationToken)">
            <summary>
            Internal provision method.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.InternalDeprovisionAsync(Dotmim.Sync.ScopeInfo,Dotmim.Sync.SyncContext,Dotmim.Sync.Enumerations.SyncProvision,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.IProgress{Dotmim.Sync.ProgressArgs},System.Threading.CancellationToken)">
            <summary>
            Internal method to deprovision a scope.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.GetAllScopeInfoClientsAsync(System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
             <summary>
             Get all scopes info clients instances.
             <example>
             This code gets the min last sync timestamp
             <code>
             var cAllScopeInfoClients = await agent.LocalOrchestrator.GetAllScopeInfoClientsAsync();
            
             var minServerTimeStamp = cAllScopeInfoClients.Min(sic => sic.LastServerSyncTimestamp);
             var minClientTimeStamp = cAllScopeInfoClients.Min(sic => sic.LastSyncTimestamp);
             var minLastSync = cAllScopeInfoClients.Min(sic => sic.LastSync);
             </code>
             </example>
             </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.SaveScopeInfoClientAsync(Dotmim.Sync.ScopeInfoClient,System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
             <summary>
             Save a <see cref="T:Dotmim.Sync.ScopeInfoClient"/> instance to the local data source.
             <example>
             <code>
              var cScopeInfoClient = await localOrchestrator.GetScopeInfoClientAsync();
            
              if (cScopeInfoClient.IsNewScope)
              {
                cScopeInfoClient.IsNewScope = false;
                cScopeInfoClient.LastSync = DateTime.Now;
                cScopeInfoClient.LastSyncTimestamp = 0;
                cScopeInfoClient.LastServerSyncTimestamp = 0;
            
                await agent.LocalOrchestrator.SaveScopeInfoClientAsync(cScopeInfoClient);
              }
             </code>
             </example>
             </summary>
             <returns><see cref="T:Dotmim.Sync.ScopeInfoClient"/> instance.</returns>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.InternalCreateScopeInfoClient(System.String,Dotmim.Sync.SyncParameters)">
            <summary>
            Create an instance of scope info client.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.InternalExistsScopeInfoClientAsync(Dotmim.Sync.SyncContext,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.IProgress{Dotmim.Sync.ProgressArgs},System.Threading.CancellationToken)">
            <summary>
            Internal Sxists Scope Info Client.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.InternalLoadScopeInfoClientAsync(Dotmim.Sync.SyncContext,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.IProgress{Dotmim.Sync.ProgressArgs},System.Threading.CancellationToken)">
            <summary>
            Internal load a scope info client.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.InternalLoadAllScopeInfoClientsAsync(Dotmim.Sync.SyncContext,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.IProgress{Dotmim.Sync.ProgressArgs},System.Threading.CancellationToken)">
            <summary>
            Internal load all client histories scopes.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.InternalSaveScopeInfoClientAsync(Dotmim.Sync.ScopeInfoClient,Dotmim.Sync.SyncContext,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.IProgress{Dotmim.Sync.ProgressArgs},System.Threading.CancellationToken)">
            <summary>
            Internal upsert scope info client.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.InternalSetSaveScopeInfoClientParameters(Dotmim.Sync.ScopeInfoClient,System.Data.Common.DbCommand)">
            <summary>
            Set the parameters for the scope info client.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.InternalReadScopeInfoClient(System.Data.Common.DbDataReader)">
            <summary>
            Read a scope info client from a reader.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.GetAllScopeInfosAsync(System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <summary>
            Get all scope infos from a data source. A scope contains the <see cref="T:Dotmim.Sync.SyncSetup"/> setup and the <see cref="T:Dotmim.Sync.SyncSet"/> schema.
            <para>
            If the <strong>scope_info</strong> table is not existing, it will be created.
            </para>
            <example>
            <code>
             var localOrchestrator = new LocalOrchestrator(clientProvider);
             var scopeInfo = await localOrchestrator.GetAllScopeInfosAsync();
            </code>
            </example>
            </summary>
            <returns><see cref="T:Dotmim.Sync.ScopeInfo"/> instance.</returns>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.SaveScopeInfoAsync(Dotmim.Sync.ScopeInfo,System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <summary>
            Save a <see cref="T:Dotmim.Sync.ScopeInfo"/> instance to the local data source.
            <example>
            <code>
             var scopeInfo = await localOrchestrator.GetScopeInfoAsync();
             scopeInfo.Setup = setup;
             scopeInfo.Schema = schema;
             scopeInfo.ScopeName = "v1";
             await localOrchestrator.SaveScopeInfoAsync(scopeInfo);
            </code>
            </example>
            </summary>
            <returns><see cref="T:Dotmim.Sync.ScopeInfo"/> instance.</returns>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.DeleteScopeInfoAsync(Dotmim.Sync.ScopeInfo,System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <summary>
            Delete a <see cref="T:Dotmim.Sync.ScopeInfo"/> instance to the local data source.
            <example>
            <code>
             var scopeInfo = await localOrchestrator.GetScopeInfoAsync("v0");
             await localOrchestrator.DeleteScopeInfoAsync(scopeInfo);
            </code>
            </example>
            </summary>
            <returns><see cref="T:Dotmim.Sync.ScopeInfo"/> instance.</returns>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.InternalSetParameterValue(System.Data.Common.DbCommand,System.String,System.Object)">
            <summary>
            Set a parameter value to a command.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.InternalCreateScopeInfo(System.String)">
            <summary>
            Returns a new scope info with the correct version.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.InternalGetScopeInfoAsync(Dotmim.Sync.SyncContext,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.IProgress{Dotmim.Sync.ProgressArgs},System.Threading.CancellationToken)">
            <summary>
            Internal load a ScopeInfo by scope name.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.InternalLoadScopeInfoAsync(Dotmim.Sync.SyncContext,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.IProgress{Dotmim.Sync.ProgressArgs},System.Threading.CancellationToken)">
            <summary>
            Internal load a scope by scope name.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.InternalExistsScopeInfoAsync(System.String,Dotmim.Sync.SyncContext,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.IProgress{Dotmim.Sync.ProgressArgs},System.Threading.CancellationToken)">
            <summary>
            Internal exists scope.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.InternalLoadAllScopeInfosAsync(Dotmim.Sync.SyncContext,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.IProgress{Dotmim.Sync.ProgressArgs},System.Threading.CancellationToken)">
            <summary>
            Internal load all scopes. scopeName arg is just here for getting context.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.InternalSaveScopeInfoAsync(Dotmim.Sync.ScopeInfo,Dotmim.Sync.SyncContext,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.IProgress{Dotmim.Sync.ProgressArgs},System.Threading.CancellationToken)">
            <summary>
            Internal upsert scope info in a scope table.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.InternalDeleteScopeInfoAsync(Dotmim.Sync.ScopeInfo,Dotmim.Sync.SyncContext,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.IProgress{Dotmim.Sync.ProgressArgs},System.Threading.CancellationToken)">
            <summary>
            Internal delete scope info in a scope table.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.CreateScopeInfoClientTableAsync(System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <summary>
            Create a scope_info_client table in the local data source, if not exists.
            <example>
            <code>
             await localOrchestrator.CreateScopeInfoClientTableAsync();
            </code>
            </example>
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.CreateScopeInfoTableAsync(System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <summary>
            Create a scope_info table in the local data source, if not exists.
            <example>
            <code>
             await localOrchestrator.CreateScopeInfoTableAsync();
            </code>
            </example>
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.ExistScopeInfoTableAsync(System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <summary>
            Check if a scope_info table exists in the local data source.
            <example>
            <code>
             var exists = await localOrchestrator.ExistScopeInfoTableAsync();
            </code>
            </example>
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.ExistScopeInfoClientTableAsync(System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <summary>
            Check if a scope_info_client table exists in the local data source.
            <example>
            <code>
             var exists = await localOrchestrator.ExistScopeInfoClientTableAsync();
            </code>
            </example>
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.InternalExistsScopeInfoTableAsync(Dotmim.Sync.SyncContext,Dotmim.Sync.Builders.DbScopeType,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.IProgress{Dotmim.Sync.ProgressArgs},System.Threading.CancellationToken)">
            <summary>
            Internal exists scope table routine.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.InternalDropScopeInfoTableAsync(Dotmim.Sync.SyncContext,Dotmim.Sync.Builders.DbScopeType,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.IProgress{Dotmim.Sync.ProgressArgs},System.Threading.CancellationToken)">
            <summary>
            Internal drop scope info table routine.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.InternalCreateScopeInfoTableAsync(Dotmim.Sync.SyncContext,Dotmim.Sync.Builders.DbScopeType,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.IProgress{Dotmim.Sync.ProgressArgs},System.Threading.CancellationToken)">
            <summary>
            Internal create scope info table routine.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.IsScopeInfoSchemaValidAsync(Dotmim.Sync.SyncContext,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.IProgress{Dotmim.Sync.ProgressArgs},System.Threading.CancellationToken)">
            <summary>
            Returns if the scope info schema is valid.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.IsScopeInfoClientSchemaValidAsync(Dotmim.Sync.SyncContext,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.IProgress{Dotmim.Sync.ProgressArgs},System.Threading.CancellationToken)">
            <summary>
            Returns if the scope info client schema is valid.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.MigrateScopeInfoClientTableAsync(Dotmim.Sync.SyncContext,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.IProgress{Dotmim.Sync.ProgressArgs},System.Threading.CancellationToken)">
            <summary>
            Migrate the scope info client table to the new version.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.MigrateScopeInfoTableAsync(Dotmim.Sync.SyncContext,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.IProgress{Dotmim.Sync.ProgressArgs},System.Threading.CancellationToken)">
            <summary>
            Migrate the scope info table to the new version.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.BaseOrchestrator.UpgradeAutoToLastVersion(Dotmim.Sync.SyncContext,System.Version,Dotmim.Sync.SyncTable,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.IProgress{Dotmim.Sync.ProgressArgs},System.Threading.CancellationToken)">
            <summary>
            Auto upgrade the database schema to the last version.
            </summary>
        </member>
        <member name="T:Dotmim.Sync.LocalOrchestrator">
            <summary>
            Contains methods to apply changes on the local provider.
            </summary>
            <summary>
            Contains the logic to get changes from the local datasource.
            </summary>
            <summary>
            <para>
            The <c>LocalOrchestrator</c> object allows you to interact with the local datsource, (using a sync provider to access it).
            </para>
            <para>
            Use a <c>LocalOrchestrator</c> object only when you want to interact with a client datasource.
            If you want to interact with your server datasource, consider using a <c>RemoteOrchestrator</c> instead.
            </para>
            <example>
            You can access your <c>LocalOrchestrator</c> instance from your <see cref="T:Dotmim.Sync.SyncAgent"/>:
            <code>
            var syncAgent = new SyncAgent(clientProvider, serverProvider, options);
            var localOrchestrator = syncAgent.LocalOrchestrator;
            </code>
            You can also create an instance, without using a <see cref="T:Dotmim.Sync.SyncAgent"/>:
            <code>
            var localOrchestrator = new LocalOrchestrator(clientProvider, options);
            </code>
            </example>
            </summary>
            <summary>
            Contains the logic to update all the rows that are not tracked on the client side.
            </summary>
            <summary>
            Contains methods to clear metadatas on the local provider.
            </summary>
            <summary>
            Contains all methods related to provisioning a local database.
            </summary>
            <summary>
            Contains the logic to handle client scope info.
            </summary>
            <summary>
            Contains methods to get a scope info from the remote data source. A scope contains the <see cref="T:Dotmim.Sync.SyncSetup"/> setup and the <see cref="T:Dotmim.Sync.SyncSet"/> schema.
            </summary>
            <summary>
            Contains the logic to handle errors during the sync process.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.LocalOrchestrator.InternalApplyChangesAsync(Dotmim.Sync.ScopeInfo,Dotmim.Sync.ScopeInfoClient,Dotmim.Sync.SyncContext,Dotmim.Sync.ServerSyncChanges,Dotmim.Sync.ClientSyncChanges,Dotmim.Sync.Enumerations.ConflictResolutionPolicy,System.Boolean,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.IProgress{Dotmim.Sync.ProgressArgs},System.Threading.CancellationToken)">
            <summary>
            Apply changes locally.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.LocalOrchestrator.InternalApplySnapshotAsync(Dotmim.Sync.ScopeInfo,Dotmim.Sync.ScopeInfoClient,Dotmim.Sync.SyncContext,Dotmim.Sync.ServerSyncChanges,Dotmim.Sync.ClientSyncChanges,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.IProgress{Dotmim.Sync.ProgressArgs},System.Threading.CancellationToken)">
            <summary>
            Apply a snapshot locally.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.LocalOrchestrator.GetChangesAsync(Dotmim.Sync.ScopeInfoClient,System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
             <summary>
             Get changes from <strong>client</strong> datasource to be send to the <strong>server</strong>.
             <para>
             You need an instance of <see cref="T:Dotmim.Sync.ScopeInfoClient"/> (containing all required info)
             to be able to get changes from your local datasource.
             </para>
             <example>
             Example:
             <code>
              var localOrchestrator = new LocalOrchestrator(clientProvider);
              var cScopeInfoClient = await localOrchestrator.GetScopeInfoClientAsync(scopeName, parameters);
              var changes = await localOrchestrator.GetChangesAsync(cScopeInfoClient);
             </code>
             </example>
             </summary>
             <returns>
             Returns a <see cref="T:Dotmim.Sync.ClientSyncChanges"/> instance.
             <para>
             All changes are serialized on disk and can be load in memory from the <c>ClientBatchInfo</c> property (of type <see cref="T:Dotmim.Sync.Batch.BatchInfo"/>).
             </para>
             <example>
             You can load in memory the changes using the <c>LoadTableFromBatchInfoAsync()</c> method:
             <code>
             var productCategoryTable = await localOrchestrator.LoadTableFromBatchInfoAsync(
                 scopeName, changes.ClientBatchInfo, "ProductCategory");
            
             foreach (var productCategoryRow in productCategoryTable.Rows)
             {
                ....
             }
             </code>
             </example>
             </returns>
        </member>
        <member name="M:Dotmim.Sync.LocalOrchestrator.GetEstimatedChangesCountAsync(Dotmim.Sync.ScopeInfoClient,System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <summary>
            Get <strong>an estimation count</strong> of the changes from <strong>client</strong> datasource to be send to the <strong>server</strong>.
            <para>
            You need an instance of <see cref="T:Dotmim.Sync.ScopeInfoClient"/> (containing all required info)
            to be able to get the estimation count of the changes from your local datasource.
            </para>
            <example>
            Example:
            <code>
             var localOrchestrator = new LocalOrchestrator(clientProvider);
             var cScopeInfoClient = await localOrchestrator.GetScopeInfoClientAsync(scopeName, parameters);
             var estimatedChanges = await localOrchestrator.GetEstimatedChangesCountAsync(cScopeInfoClient);
            </code>
            </example>
            </summary>
            <returns>
            Returns a <see cref="T:Dotmim.Sync.ClientSyncChanges"/> instance.
            <para>
            No changes are downloaded, so far the <c>ClientBatchInfo</c> property is always <c>null</c>.
            </para>
            The propery <c>ClientChangesSelected</c> (of type <see cref="T:Dotmim.Sync.DatabaseChangesSelected"/>)
            contains an estimation count of the changes from your local datsource for
            all the tables from your setup.
            </returns>
        </member>
        <member name="M:Dotmim.Sync.LocalOrchestrator.InternalGetChangesAsync(Dotmim.Sync.ScopeInfo,Dotmim.Sync.SyncContext,Dotmim.Sync.ScopeInfoClient,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.IProgress{Dotmim.Sync.ProgressArgs},System.Threading.CancellationToken)">
            <summary>
            Get changes from local database from a specific scope you already fetched from local database.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.LocalOrchestrator.#ctor(Dotmim.Sync.CoreProvider,Dotmim.Sync.SyncOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Dotmim.Sync.LocalOrchestrator"/> class.
            Create a local orchestrator, used to orchestrate the whole sync on the client side.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.LocalOrchestrator.#ctor(Dotmim.Sync.CoreProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Dotmim.Sync.LocalOrchestrator"/> class.
            Create a local orchestrator, used to orchestrate the whole sync on the client side.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.LocalOrchestrator.BeginSessionAsync(System.String,System.IProgress{Dotmim.Sync.ProgressArgs},System.Threading.CancellationToken)">
            <summary>
            Called when a new synchronization session has started. Initialize the SyncContext instance, used for this session.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.LocalOrchestrator.EndSessionAsync(Dotmim.Sync.SyncResult,System.String,System.IProgress{Dotmim.Sync.ProgressArgs},System.Threading.CancellationToken)">
            <summary>
            Called when the synchronization session is over.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.LocalOrchestrator.InternalBeginSessionAsync(Dotmim.Sync.SyncContext,System.IProgress{Dotmim.Sync.ProgressArgs},System.Threading.CancellationToken)">
            <summary>
            Called when a session is starting.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.LocalOrchestrator.InternalEndSessionAsync(Dotmim.Sync.SyncContext,Dotmim.Sync.SyncResult,Dotmim.Sync.ClientSyncChanges,Dotmim.Sync.SyncException,System.IProgress{Dotmim.Sync.ProgressArgs},System.Threading.CancellationToken)">
            <summary>
            Called when the sync is over.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.LocalOrchestrator.UpdateUntrackedRowsAsync(System.String,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.IProgress{Dotmim.Sync.ProgressArgs},System.Threading.CancellationToken)">
            <summary>
            Update all untracked rows from the client database.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.LocalOrchestrator.UpdateUntrackedRowsAsync(System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.IProgress{Dotmim.Sync.ProgressArgs},System.Threading.CancellationToken)">
            <summary>
            Update all untracked rows from the client database.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.LocalOrchestrator.InternalUpdateUntrackedRowsAsync(Dotmim.Sync.ScopeInfo,Dotmim.Sync.SyncContext,Dotmim.Sync.SyncTable,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.IProgress{Dotmim.Sync.ProgressArgs},System.Threading.CancellationToken)">
            <summary>
            Internal update untracked rows routine.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.LocalOrchestrator.DeleteMetadatasAsync(System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <summary>
            Delete all metadatas from tracking tables, based on min timestamp from scope info client table.
            <example>
            <code>
            var localOrchestrator = new LocalOrchestrator(clientProvider);
            await localOrchestrator.DeleteMetadatasAsync();
            </code>
            </example>
            </summary>
        </member>
        <member name="M:Dotmim.Sync.LocalOrchestrator.DeleteMetadatasAsync(System.Int64,System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <summary>
            Delete all metadatas from tracking tables, based on min timestamp.
            <example>
            <code>
            var localOrchestrator = new LocalOrchestrator(clientProvider);
            await localOrchestrator.DeleteMetadatasAsync();
            </code>
            </example>
            </summary>
        </member>
        <member name="M:Dotmim.Sync.LocalOrchestrator.InternalDeleteMetadatasAsync(Dotmim.Sync.SyncContext,System.Nullable{System.Int64},System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.IProgress{Dotmim.Sync.ProgressArgs},System.Threading.CancellationToken)">
            <summary>
            Delete metadatas items from tracking tables.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.LocalOrchestrator.ProvisionAsync(Dotmim.Sync.ScopeInfo,Dotmim.Sync.Enumerations.SyncProvision,System.Boolean,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.IProgress{Dotmim.Sync.ProgressArgs},System.Threading.CancellationToken)">
            <summary>
            Provision a local datasource (<strong>triggers</strong>, <strong>stored procedures</strong> (if supported), <strong>tracking tables</strong> and <strong>tables</strong> if needed. Create also <strong>scope_info</strong> and <strong>scope_info_client</strong> tables.
            <para>
            The <paramref name="provision" /> argument specify the objects to provision. See <see cref="T:Dotmim.Sync.Enumerations.SyncProvision" /> enumeration.
            </para>
            <para>
            The <paramref name="sScopeInfo"/> argument contains the schema to apply and should be retrieved from a <c>scope_info</c> table (most of the time from your server datasource).
            </para>
            <para>
            <example>
            <code>
            var remoteOrchestrator = new RemoteOrchestrator(serverProvider);
            var sScopeInfo = await remoteOrchestrator.GetScopeInfoAsync();
            var cScopeInfo = await localOrchestrator.ProvisionAsync(sScopeInfo);
            </code>
            </example>
            </para>
            </summary>
            <param name="sScopeInfo">A <see cref="T:Dotmim.Sync.ScopeInfo"/> instance coming from your server datasource or your client datasource (if exists).</param>
            <param name="provision">If you do not specify <c>provision</c>, a default value <c>SyncProvision.Table | SyncProvision.StoredProcedures | SyncProvision.Triggers | SyncProvision.TrackingTable</c> is used.</param>
            <param name="overwrite">If specified, all metadatas are generated and overwritten even if they already exists.</param>
            <param name="connection">optional connection.</param>
            <param name="transaction">optional transaction.</param>
            <param name="progress">optional IProgress of ProgressArgs token.</param>
            <param name="cancellationToken">optional cancellation token.</param>
            <returns>
            A <see cref="T:Dotmim.Sync.ScopeInfo"/> instance, saved locally in the client datasource.
            </returns>
        </member>
        <member name="M:Dotmim.Sync.LocalOrchestrator.DeprovisionAsync(Dotmim.Sync.Enumerations.SyncProvision,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.IProgress{Dotmim.Sync.ProgressArgs},System.Threading.CancellationToken)">
            <summary>
            Deprovision your client datasource.
            <example>
            <code>
            var localOrchestrator = new LocalOrchestrator(clientProvider);
            await localOrchestrator.DeprovisionAsync();
            </code>
            </example>
            </summary>
            <remarks>
            By default, <strong>DMS</strong> will never deprovision a table, if not explicitly set with the <c>provision</c> argument. <strong>scope_info</strong> and <strong>scope_info_client</strong> tables
            are not deprovisioned by default to preserve existing configurations.
            </remarks>
            <param name="provision">If you do not specify <c>provision</c>, a default value <c>SyncProvision.StoredProcedures | SyncProvision.Triggers</c> is used.</param>
            <param name="connection">optional connection.</param>
            <param name="transaction">optional transaction.</param>
            <param name="progress">option IProgress{ProgressArgs}.</param>
            <param name="cancellationToken">optional cancellation token.</param>
        </member>
        <member name="M:Dotmim.Sync.LocalOrchestrator.DeprovisionAsync(System.String,Dotmim.Sync.Enumerations.SyncProvision,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.IProgress{Dotmim.Sync.ProgressArgs},System.Threading.CancellationToken)">
            <inheritdoc cref="M:Dotmim.Sync.LocalOrchestrator.DeprovisionAsync(Dotmim.Sync.Enumerations.SyncProvision,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.IProgress{Dotmim.Sync.ProgressArgs},System.Threading.CancellationToken)" />
        </member>
        <member name="M:Dotmim.Sync.LocalOrchestrator.DeprovisionAsync(Dotmim.Sync.SyncSetup,Dotmim.Sync.Enumerations.SyncProvision,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.IProgress{Dotmim.Sync.ProgressArgs},System.Threading.CancellationToken)">
            <inheritdoc cref="M:Dotmim.Sync.LocalOrchestrator.DeprovisionAsync(System.String,Dotmim.Sync.SyncSetup,Dotmim.Sync.Enumerations.SyncProvision,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.IProgress{Dotmim.Sync.ProgressArgs},System.Threading.CancellationToken)" />
        </member>
        <member name="M:Dotmim.Sync.LocalOrchestrator.DeprovisionAsync(System.String,Dotmim.Sync.SyncSetup,Dotmim.Sync.Enumerations.SyncProvision,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.IProgress{Dotmim.Sync.ProgressArgs},System.Threading.CancellationToken)">
            <summary>
            Deprovision your client datasource.
            <example>
            <code>
            var localOrchestrator = new LocalOrchestrator(clientProvider);
            var setup = new SyncSetup("ProductCategory", "Product");
            await localOrchestrator.DeprovisionAsync(setup);
            </code>
            </example>
            </summary>
            <remarks>
            By default, <strong>DMS</strong> will never deprovision a table, if not explicitly set with the <c>provision</c> argument. <strong>scope_info</strong> and <strong>scope_info_client</strong> tables
            are not deprovisioned by default to preserve existing configurations.
            </remarks>
            <param name="scopeName">scopeName. If not defined, SyncOptions.DefaultScopeName is used.</param>
            <param name="setup">Setup containing tables to deprovision.</param>
            <param name="provision">If you do not specify <c>provision</c>, a default value <c>SyncProvision.StoredProcedures | SyncProvision.Triggers</c> is used.</param>
            <param name="connection">Optional Connection.</param>
            <param name="transaction">Optional Transaction.</param>
            <param name="progress">option IProgress{ProgressArgs}.</param>
            <param name="cancellationToken">optional cancellation token.</param>
        </member>
        <member name="M:Dotmim.Sync.LocalOrchestrator.DropAllAsync(System.Boolean,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.IProgress{Dotmim.Sync.ProgressArgs},System.Threading.CancellationToken)">
            <summary>
            Drop everything related to DMS. Tracking tables, triggers, tracking tables, sync_scope and sync_scope_client tables.
            <example>
            Deprovision a client database:
            <code>
            var localOrchestrator = new LocalOrchestrator(clientProvider);
            await localOrchestrator.DropAllAsync();
            </code>
            </example>
            </summary>
        </member>
        <member name="M:Dotmim.Sync.LocalOrchestrator.InternalProvisionClientAsync(Dotmim.Sync.ScopeInfo,Dotmim.Sync.ScopeInfo,Dotmim.Sync.SyncContext,Dotmim.Sync.Enumerations.SyncProvision,System.Boolean,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.IProgress{Dotmim.Sync.ProgressArgs},System.Threading.CancellationToken)">
            <summary>
            Provision the local database based on the scope info parameter.
            Scope info parameter should contains Schema and Setup properties.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.LocalOrchestrator.GetScopeInfoClientAsync(System.String,Dotmim.Sync.SyncParameters,System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <summary>
            Get a Scope Info Client.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.LocalOrchestrator.InternalEnsureScopeInfoClientAsync(Dotmim.Sync.SyncContext,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.IProgress{Dotmim.Sync.ProgressArgs},System.Threading.CancellationToken)">
            <summary>
            Get the client scope histories.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.LocalOrchestrator.GetScopeInfoAsync(System.String,System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
             <summary>
             Get a scope info from the remote data source. A scope contains the <see cref="T:Dotmim.Sync.SyncSetup"/> setup and the <see cref="T:Dotmim.Sync.SyncSet"/> schema.
             <para>
             If the <strong>scope_info</strong> table is not existing, it will be created. If no scope is found, an empty scope will be created with empty schema and setup properties.
             </para>
             <example>
             <code>
              var localOrchestrator = new LocalOrchestrator(clientProvider);
              var scopeInfo = await localOrchestrator.GetScopeInfoAsync();
              foreach (var schemaTable in scopeInfo.Schema.Tables)
              {
                Console.WriteLine($"Table Name: {schemaTable.ObjectName}");
            
                foreach (var column in schemaTable.Columns)
                      Console.WriteLine($"Column Name: {column.ObjectName}");
              }
             </code>
             </example>
             </summary>
             <returns><see cref="T:Dotmim.Sync.ScopeInfo"/> instance.</returns>
        </member>
        <member name="M:Dotmim.Sync.LocalOrchestrator.GetScopeInfoAsync(System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <inheritdoc cref="M:Dotmim.Sync.LocalOrchestrator.GetScopeInfoAsync(System.String,System.Data.Common.DbConnection,System.Data.Common.DbTransaction)"/>
        </member>
        <member name="M:Dotmim.Sync.LocalOrchestrator.InternalEnsureScopeInfoAsync(Dotmim.Sync.SyncContext,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.IProgress{Dotmim.Sync.ProgressArgs},System.Threading.CancellationToken)">
            <summary>
            Ensure the scope info is created on the client side. If the scope info table is not existing, it will be created.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.LocalOrchestrator.InternalIsConflictingSetupAsync(Dotmim.Sync.SyncContext,Dotmim.Sync.SyncSetup,Dotmim.Sync.ScopeInfo,Dotmim.Sync.ScopeInfo,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.IProgress{Dotmim.Sync.ProgressArgs},System.Threading.CancellationToken)">
            <summary>
            Check if a setup is conflicting with the current setup on the client side.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.LocalOrchestrator.ManualUpgradeWithFiltersParameterAsync(System.Collections.Generic.IList{Dotmim.Sync.ScopeInfoClientUpgrade},System.IProgress{Dotmim.Sync.ProgressArgs},System.Boolean)">
             <summary>
             Upgrade your client database to the last version.
             <para>
             This upgrade is manually since <strong>we need the parameters</strong> you are using, to <strong>save them</strong> in the client database.
             Please provide all the entries (scope name + sync parameters) you are using <strong>locally</strong>, to sync to server.
             </para>
             <example>
             Here is an example where we are migrating a local datasource where 2 scopes have been already used (1 with filters and the other one without filters)
             <code>
             var entries = new List[ScopeInfoClientUpgrade]();
             var entry = new ScopeInfoClientUpgrade
             {
                Parameters = new SyncParameters(("ProductCategoryId", new Guid("Your_GUID_Filter_Value"))),
                ScopeName = "v1"
             };
             entries.Add(entry);
             entry = new ScopeInfoClientUpgrade {ScopeName = "v2"};
             entries.Add(entry);
            
             var (scopeInfos, scopeInfoClients) = await localOrchestrator.ManualUpgradeWithFiltersParameterAsync(entries, progress, evaluationOnly);
             </code>
             </example>
             </summary>
             <param name="entries">List of all entries you are using locally (an entry is a scope name + syncparameters with value) you are using to sync to server.</param>
             <param name="progress">Progress of upgrade.</param>
             <param name="evaluateOnly">if set to True, the upgrade will not be applied at the end. Usefull to test your upgrade and see if anything is breaking at some point.</param>
             <returns>
             The new scopeInfos and scopeInfoClients rows from your new upgrade sync config tables.
             </returns>
        </member>
        <member name="M:Dotmim.Sync.LocalOrchestrator.NeedsToUpgradeAsync(Dotmim.Sync.SyncContext)">
            <summary>
            Check if the client database needs to be upgraded.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.LocalOrchestrator.InternalUpgradeAsync(Dotmim.Sync.SyncContext,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.IProgress{Dotmim.Sync.ProgressArgs},System.Threading.CancellationToken)">
            <summary>
            Check if the client database needs to be upgraded.
            </summary>
        </member>
        <member name="T:Dotmim.Sync.RemoteOrchestrator">
            <summary>
            Contains internal methods to apply changes on remote provider.
            </summary>
            <summary>
            Contains the logic to get changes from the server side.
            </summary>
            <summary>
            Contains methods to clear metadatas on the remote provider.
            </summary>
            <summary>
            Contains remote orchestrator provisioning methods.
            </summary>
            <summary>
            Remote orchestrator, used to orchestrates the whole sync on the server side.
            </summary>
            <summary>
            Contains the logic to get the current operation type.
            </summary>
            <summary>
            Contains the logic to get a snapshot from the server and create a snapshot on the server.
            </summary>
            <summary>
            Contains the logic to handle client scope info.
            </summary>
            <summary>
            Contains methods to get a scope info from the remote data source.
            </summary>
            <summary>
            Contains the logic to upgrade the server database structure.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.RemoteOrchestrator.InternalApplyThenGetChangesAsync(Dotmim.Sync.ScopeInfoClient,Dotmim.Sync.ScopeInfo,Dotmim.Sync.SyncContext,Dotmim.Sync.ClientSyncChanges,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.IProgress{Dotmim.Sync.ProgressArgs},System.Threading.CancellationToken)">
            <summary>
            Apply changes on remote provider.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.RemoteOrchestrator.GetChangesAsync(Dotmim.Sync.ScopeInfoClient,System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
             <summary>
             Get changes from <strong>server</strong> datasource to be send to a particular <strong>client</strong>.
             <para>
             You need an instance of <see cref="T:Dotmim.Sync.ScopeInfoClient"/> (containing all required info) from the client side
             to be able to get changes from the server side.
             </para>
             <example>
             Example:
             <code>
              var localOrchestrator = new LocalOrchestrator(clientProvider);
              var remoteOrchestrator = new RemoteOrchestrator(remoteProvider);
              var cScopeInfoClient = await localOrchestrator.GetScopeInfoClientAsync(scopeName, parameters);
              // You can load a client scope info from the server database also, if you know the clientId
              // var cScopeInfoClient = await remoteOrchestrator.GetScopeInfoClientAsync(clientId, scopeName, parameters);
              var changes = await remoteOrchestrator.GetChangesAsync(cScopeInfoClient);
             </code>
             </example>
             </summary>
             <returns>
             Returns a <see cref="T:Dotmim.Sync.ServerSyncChanges"/> instance.
             <para>
             All changes are serialized on disk and can be load in memory from the <c>ServerBatchInfo</c> property (of type <see cref="T:Dotmim.Sync.Batch.BatchInfo"/>).
             </para>
             <example>
             You can load in memory the changes using the <c>LoadTableFromBatchInfoAsync()</c> method:
             <code>
             var productCategoryTable = await remoteOrchestrator.LoadTableFromBatchInfoAsync(
                 scopeName, changes.ClientBatchInfo, "ProductCategory");
            
             foreach (var productCategoryRow in productCategoryTable.Rows)
             {
                ....
             }
             </code>
             </example>
             </returns>
        </member>
        <member name="M:Dotmim.Sync.RemoteOrchestrator.GetEstimatedChangesCountAsync(Dotmim.Sync.ScopeInfoClient,System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <summary>
            Get <strong>an estimation count</strong> of the changes from <strong>server</strong> datasource to be send to a particular <strong>client</strong>.
            <para>
            You need an instance of <see cref="T:Dotmim.Sync.ScopeInfoClient"/> (containing all required info) from the client side
            to be able to get changes from the server side.
            </para>
            <example>
            Example:
            <code>
             var localOrchestrator = new LocalOrchestrator(clientProvider);
             var remoteOrchestrator = new RemoteOrchestrator(remoteProvider);
             var cScopeInfoClient = await localOrchestrator.GetScopeInfoClientAsync(scopeName, parameters);
             // You can load a client scope info from the server database also, if you know the clientId
             var cScopeInfoClient = await remoteOrchestrator.GetScopeInfoClientAsync(clientId, scopeName, parameters);
             var estimatedChanges = await remoteOrchestrator.GetEstimatedChangesCountAsync(cScopeInfoClient);
            </code>
            </example>
            </summary>
            <returns>
            Returns a <see cref="T:Dotmim.Sync.ServerSyncChanges"/> instance.
            <para>
            No changes are downloaded, so far the <c>ServerBatchInfo</c> property is always <c>null</c>.
            </para>
            The propery <c>ServerChangesSelected</c> (of type <see cref="T:Dotmim.Sync.DatabaseChangesSelected"/>)
            contains an estimation count of the changes from your server datsource for
            all the tables from your setup.
            </returns>
        </member>
        <member name="M:Dotmim.Sync.RemoteOrchestrator.DeleteMetadatasAsync(System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <summary>
            Delete all metadatas from tracking tables, based on min timestamp from scope info client table.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.RemoteOrchestrator.DeleteMetadatasAsync(System.Int64,System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <summary>
            Delete metadatas items from tracking tables.
            </summary>
            <param name="timeStampStart">Timestamp start. Used to limit the delete metadatas rows from now to this timestamp.</param>
            <param name="connection">Optional Connection.</param>
            <param name="transaction">Optional Transaction.</param>
        </member>
        <member name="M:Dotmim.Sync.RemoteOrchestrator.InternalDeleteMetadatasAsync(System.Nullable{System.Int64},Dotmim.Sync.SyncContext,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.IProgress{Dotmim.Sync.ProgressArgs},System.Threading.CancellationToken)">
            <summary>
            Delete metadatas items from tracking tables.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.RemoteOrchestrator.ProvisionAsync(System.String,Dotmim.Sync.SyncSetup,Dotmim.Sync.Enumerations.SyncProvision,System.Boolean,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.IProgress{Dotmim.Sync.ProgressArgs},System.Threading.CancellationToken)">
            <summary>
            Provision a server datasource (<strong>triggers</strong>, <strong>stored procedures</strong> (if supported) and <strong>tracking tables</strong> if needed. Create also <strong>scope_info</strong> and <strong>scope_info_client</strong> tables.
            <para>
            The <paramref name="provision" /> argument specify the objects to provision. See <see cref="T:Dotmim.Sync.Enumerations.SyncProvision" /> enumeration.
            </para>
            <para>
            If The <paramref name="setup" /> argument is not specified, setup is retrieved from the scope_info table. Means that you have done a provision before.
            </para>
            <para>
            <example>
            <code>
            var remoteOrchestrator = new RemoteOrchestrator(serverProvider);
            var setup = new SyncSetup("ProductCategory", "Product");
            var sScopeInfo = await remoteOrchestrator.ProvisionAsync(setup);
            </code>
            </example>
            </para>
            </summary>
            <param name="scopeName">Scope name.</param>
            <param name="setup">Setup containing all tables to provision on the server side.</param>
            <param name="provision">If you do not specify <c>provision</c>, a default value <c>SyncProvision.StoredProcedures | SyncProvision.Triggers | SyncProvision.TrackingTable</c> is used.</param>
            <param name="overwrite">If specified, all metadatas are generated and overwritten even if they already exists.</param>
            <param name="connection">Optional Connection.</param>
            <param name="transaction">Optional Transaction.</param>
            <param name="progress">option IProgress{ProgressArgs}.</param>
            <param name="cancellationToken">optional cancellation token.</param>
            <returns>
            A <see cref="T:Dotmim.Sync.ScopeInfo"/> instance, saved locally in the server datasource.
            </returns>
        </member>
        <member name="M:Dotmim.Sync.RemoteOrchestrator.ProvisionAsync(Dotmim.Sync.ScopeInfo,Dotmim.Sync.Enumerations.SyncProvision,System.Boolean,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.IProgress{Dotmim.Sync.ProgressArgs},System.Threading.CancellationToken)">
            <summary>
            Provision a server datasource (<strong>triggers</strong>, <strong>stored procedures</strong> (if supported) and <strong>tracking tables</strong> if needed. Create also <strong>scope_info</strong> and <strong>scope_info_client</strong> tables.
            <para>
            The <paramref name="provision" /> argument specify the objects to provision. See <see cref="T:Dotmim.Sync.Enumerations.SyncProvision" /> enumeration.
            </para>
            <para>
            <example>
            <code>
            var remoteOrchestrator = new RemoteOrchestrator(serverProvider);
            var serverScope = await remoteOrchestrator.GetScopeInfoAsync();
            var schema = await remoteOrchestrator.GetSchemaAsync(setup);
            serverScope.Schema = schema;
            serverScope.Setup = setup;
            var sScopeInfo = await localOrchestrator.ProvisionAsync(serverScope);
            </code>
            </example>
            </para>
            </summary>
            <param name="serverScopeInfo"><see cref="T:Dotmim.Sync.ScopeInfo"/> instance to provision on server side.</param>
            <param name="provision">If you do not specify <c>provision</c>, a default value <c>SyncProvision.StoredProcedures | SyncProvision.Triggers | SyncProvision.TrackingTable</c> is used.</param>
            <param name="overwrite">If specified, all metadatas are generated and overwritten even if they already exists.</param>
            <param name="connection">Optional Connection.</param>
            <param name="transaction">Optional Transaction.</param>
            <param name="progress">option IProgress{ProgressArgs}.</param>
            <param name="cancellationToken">optional cancellation token.</param>
            <returns>
            A <see cref="T:Dotmim.Sync.ScopeInfo"/> instance, saved locally in the server datasource.
            </returns>
        </member>
        <member name="M:Dotmim.Sync.RemoteOrchestrator.ProvisionAsync(Dotmim.Sync.Enumerations.SyncProvision,System.Boolean,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.IProgress{Dotmim.Sync.ProgressArgs},System.Threading.CancellationToken)">
            <inheritdoc cref="M:Dotmim.Sync.RemoteOrchestrator.ProvisionAsync(System.String,Dotmim.Sync.SyncSetup,Dotmim.Sync.Enumerations.SyncProvision,System.Boolean,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.IProgress{Dotmim.Sync.ProgressArgs},System.Threading.CancellationToken)"/>
        </member>
        <member name="M:Dotmim.Sync.RemoteOrchestrator.ProvisionAsync(System.String,Dotmim.Sync.Enumerations.SyncProvision,System.Boolean,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.IProgress{Dotmim.Sync.ProgressArgs},System.Threading.CancellationToken)">
            <inheritdoc cref="M:Dotmim.Sync.RemoteOrchestrator.ProvisionAsync(System.String,Dotmim.Sync.SyncSetup,Dotmim.Sync.Enumerations.SyncProvision,System.Boolean,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.IProgress{Dotmim.Sync.ProgressArgs},System.Threading.CancellationToken)"/>
        </member>
        <member name="M:Dotmim.Sync.RemoteOrchestrator.ProvisionAsync(Dotmim.Sync.SyncSetup,Dotmim.Sync.Enumerations.SyncProvision,System.Boolean,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.IProgress{Dotmim.Sync.ProgressArgs},System.Threading.CancellationToken)">
            <inheritdoc cref="M:Dotmim.Sync.RemoteOrchestrator.ProvisionAsync(System.String,Dotmim.Sync.SyncSetup,Dotmim.Sync.Enumerations.SyncProvision,System.Boolean,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.IProgress{Dotmim.Sync.ProgressArgs},System.Threading.CancellationToken)"/>
        </member>
        <member name="M:Dotmim.Sync.RemoteOrchestrator.DeprovisionAsync(Dotmim.Sync.Enumerations.SyncProvision,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.IProgress{Dotmim.Sync.ProgressArgs},System.Threading.CancellationToken)">
            <summary>
            Deprovision your server datasource.
            <example>
            Deprovision a server database:
            <code>
            var remoteOrchestrator = new RemoteOrchestrator(serverProvider);
            await remoteOrchestrator.DeprovisionAsync();
            </code>
            </example>
            </summary>
            <remarks>
            By default, <strong>DMS</strong> will never deprovision a table, if not explicitly set with the <c>provision</c> argument. <strong>scope_info</strong> and <strong>scope_info_client</strong> tables
            are not deprovisioned by default to preserve existing configurations.
            </remarks>
            <param name="provision">If you do not specify <c>provision</c>, a default value <c>SyncProvision.StoredProcedures | SyncProvision.Triggers</c> is used.</param>
            <param name="connection">Optional Connection.</param>
            <param name="transaction">Optional Transaction.</param>
            <param name="progress">option IProgress{ProgressArgs}.</param>
            <param name="cancellationToken">optional cancellation token.</param>
        </member>
        <member name="M:Dotmim.Sync.RemoteOrchestrator.DeprovisionAsync(System.String,Dotmim.Sync.Enumerations.SyncProvision,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.IProgress{Dotmim.Sync.ProgressArgs},System.Threading.CancellationToken)">
            <inheritdoc cref="M:Dotmim.Sync.RemoteOrchestrator.DeprovisionAsync(Dotmim.Sync.Enumerations.SyncProvision,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.IProgress{Dotmim.Sync.ProgressArgs},System.Threading.CancellationToken)"/>
        </member>
        <member name="M:Dotmim.Sync.RemoteOrchestrator.DeprovisionAsync(Dotmim.Sync.SyncSetup,Dotmim.Sync.Enumerations.SyncProvision,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.IProgress{Dotmim.Sync.ProgressArgs},System.Threading.CancellationToken)">
            <inheritdoc cref="M:Dotmim.Sync.RemoteOrchestrator.DeprovisionAsync(System.String,Dotmim.Sync.SyncSetup,Dotmim.Sync.Enumerations.SyncProvision,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.IProgress{Dotmim.Sync.ProgressArgs},System.Threading.CancellationToken)"/>
        </member>
        <member name="M:Dotmim.Sync.RemoteOrchestrator.DeprovisionAsync(System.String,Dotmim.Sync.SyncSetup,Dotmim.Sync.Enumerations.SyncProvision,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.IProgress{Dotmim.Sync.ProgressArgs},System.Threading.CancellationToken)">
            <summary>
            Deprovision your client datasource.
            <example>
            Deprovision a client database:
            <code>
            var remoteOrchestrator = new RemoteOrchestrator(serverProvider);
            var setup = new SyncSetup("ProductCategory", "Product");
            await remoteOrchestrator.DeprovisionAsync(setup);
            </code>
            </example>
            </summary>
            <remarks>
            By default, <strong>DMS</strong> will never deprovision a table, if not explicitly set with the <c>provision</c> argument. <strong>scope_info</strong> and <strong>scope_info_client</strong> tables
            are not deprovisioned by default to preserve existing configurations.
            </remarks>
            <param name="scopeName">scopeName. If not defined, SyncOptions.DefaultScopeName is used.</param>
            <param name="setup">Setup containing tables to deprovision.</param>
            <param name="provision">If you do not specify <c>provision</c>, a default value <c>SyncProvision.StoredProcedures | SyncProvision.Triggers</c> is used.</param>
            <param name="connection">Optional Connection.</param>
            <param name="transaction">Optional Transaction.</param>
            <param name="progress">optional IProgress{ProgressArgs}.</param>
            <param name="cancellationToken">optional cancellation token.</param>
        </member>
        <member name="M:Dotmim.Sync.RemoteOrchestrator.DropAllAsync(System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.IProgress{Dotmim.Sync.ProgressArgs},System.Threading.CancellationToken)">
            <summary>
            Drop everything related to DMS. Tracking tables, triggers, tracking tables, sync_scope and sync_scope_client tables.
            <example>
            Deprovision a server database:
            <code>
            var remoteOrchestrator = new RemoteOrchestrator(serverProvider);
            await remoteOrchestrator.DropAllAsync();
            </code>
            </example>
            </summary>
        </member>
        <member name="M:Dotmim.Sync.RemoteOrchestrator.InternalProvisionServerAsync(Dotmim.Sync.ScopeInfo,Dotmim.Sync.SyncContext,Dotmim.Sync.Enumerations.SyncProvision,System.Boolean,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.IProgress{Dotmim.Sync.ProgressArgs},System.Threading.CancellationToken)">
            <summary>
            Check if the server datasource should be provisioned.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.RemoteOrchestrator.InternalShouldProvisionServerAsync(Dotmim.Sync.ScopeInfo,Dotmim.Sync.SyncContext,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.IProgress{Dotmim.Sync.ProgressArgs},System.Threading.CancellationToken)">
            <summary>
            Check if the server datasource should be provisioned.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.RemoteOrchestrator.#ctor(Dotmim.Sync.CoreProvider,Dotmim.Sync.SyncOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Dotmim.Sync.RemoteOrchestrator"/> class.
            Create a remote orchestrator, used to orchestrates the whole sync on the server side.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.RemoteOrchestrator.#ctor(Dotmim.Sync.CoreProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Dotmim.Sync.RemoteOrchestrator"/> class.
            Create a remote orchestrator, used to orchestrates the whole sync on the server side.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.RemoteOrchestrator.BeginSessionAsync(System.String,System.IProgress{Dotmim.Sync.ProgressArgs},System.Threading.CancellationToken)">
            <summary>
            Called when a new synchronization session has started. Initialize the SyncContext instance, used for this session.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.RemoteOrchestrator.EndSessionAsync(Dotmim.Sync.SyncResult,System.String,System.IProgress{Dotmim.Sync.ProgressArgs},System.Threading.CancellationToken)">
            <summary>
            Called when the synchronization session is over.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.RemoteOrchestrator.InternalBeginSessionAsync(Dotmim.Sync.SyncContext,System.IProgress{Dotmim.Sync.ProgressArgs},System.Threading.CancellationToken)">
            <summary>
            Called when a session is starting.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.RemoteOrchestrator.InternalEndSessionAsync(Dotmim.Sync.SyncContext,Dotmim.Sync.SyncResult,Dotmim.Sync.ServerSyncChanges,Dotmim.Sync.SyncException,System.IProgress{Dotmim.Sync.ProgressArgs},System.Threading.CancellationToken)">
            <summary>
            Called when the sync is over.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.RemoteOrchestrator.InternalGetOperationAsync(Dotmim.Sync.ScopeInfo,Dotmim.Sync.ScopeInfo,Dotmim.Sync.ScopeInfoClient,Dotmim.Sync.SyncContext,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.IProgress{Dotmim.Sync.ProgressArgs},System.Threading.CancellationToken)">
            <summary>
            Gets the current operation type.
            The interceptor is called to allow the user to change the operation type.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.RemoteOrchestrator.GetSnapshotAsync(Dotmim.Sync.ScopeInfo)">
            <summary>
            Get a snapshot.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.RemoteOrchestrator.CreateSnapshotAsync(Dotmim.Sync.SyncSetup,Dotmim.Sync.SyncParameters,System.IProgress{Dotmim.Sync.ProgressArgs})">
            <summary>
            Create a snapshot, based on the Setup object.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.RemoteOrchestrator.CreateSnapshotAsync(System.String,Dotmim.Sync.SyncSetup,Dotmim.Sync.SyncParameters,System.IProgress{Dotmim.Sync.ProgressArgs})">
            <summary>
            Create a snapshot, based on the Setup object.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.RemoteOrchestrator.InternalGetSnapshotAsync(Dotmim.Sync.ScopeInfo,Dotmim.Sync.SyncContext,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.IProgress{Dotmim.Sync.ProgressArgs},System.Threading.CancellationToken)">
            <summary>
            Get a snapshot.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.RemoteOrchestrator.InternalCreateSnapshotAsync(Dotmim.Sync.ScopeInfo,Dotmim.Sync.SyncContext,System.Int64,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.IProgress{Dotmim.Sync.ProgressArgs},System.Threading.CancellationToken)">
            <summary>
            Create a snapshot.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.RemoteOrchestrator.GetScopeInfoClientAsync(System.Guid,System.String,Dotmim.Sync.SyncParameters,System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <summary>
            Get a Scope Info Client from Server database.
            <para>
            Client should have already made a sync to be present in the server database scope_info_client table.
            </para>
            <example>
            <code>
            var remoteOrchestrator = new RemoteOrchestrator(serverProvider);
            var cScopeInfoClient = await remoteOrchestrator.GetScopeInfoClientAsync(clientId, default, parameters);
            </code>
            </example>
            </summary>
        </member>
        <member name="M:Dotmim.Sync.RemoteOrchestrator.GetScopeInfoAsync(System.String,System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
             <summary>
             Get a scope info from the remote data source. A scope contains the <see cref="T:Dotmim.Sync.SyncSetup"/> setup and the <see cref="T:Dotmim.Sync.SyncSet"/> schema.
             <para>
             If the <strong>scope_info</strong> table is not existing, it will be created. If no scope is found, an empty scope will be created with empty schema and setup properties.
             </para>
             <example>
             <code>
              var remoteOrchestrator = new RemoteOrchestrator(clientProvider);
              var scopeInfo = await remoteOrchestrator.GetScopeInfoAsync();
              foreach (var schemaTable in scopeInfo.Schema.Tables)
              {
                Console.WriteLine($"Table Name: {schemaTable.ObjectName}");
            
                foreach (var column in schemaTable.Columns)
                      Console.WriteLine($"Column Name: {column.ObjectName}");
              }
             </code>
             </example>
             </summary>
             <param name="scopeName">Scope Name.</param>
             <param name="connection">Optional Connection.</param>
             <param name="transaction">Optional Transaction.</param>
        </member>
        <member name="M:Dotmim.Sync.RemoteOrchestrator.GetScopeInfoAsync(System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <inheritdoc cref="M:Dotmim.Sync.RemoteOrchestrator.GetScopeInfoAsync(System.String,System.Data.Common.DbConnection,System.Data.Common.DbTransaction)"/>
        </member>
        <member name="M:Dotmim.Sync.RemoteOrchestrator.GetScopeInfoAsync(Dotmim.Sync.SyncSetup,System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
             <summary>
             Get a scope info from the remote data source. A scope contains the <see cref="T:Dotmim.Sync.SyncSetup"/> setup and the <see cref="T:Dotmim.Sync.SyncSet"/> schema.
             <para>
             If the <strong>scope_info</strong> table is not existing, it will be created. The setup argument is used to get the tables schema and fill the <strong>Setup</strong> and <strong>Schema</strong> properties.
             </para>
             <example>
             <code>
              var remoteOrchestrator = new RemoteOrchestrator(clientProvider);
              var setup = new SyncSetup("Product, ProductCategory");
              var scopeInfo = await remoteOrchestrator.GetScopeInfoAsync(setup);
              foreach (var schemaTable in scopeInfo.Schema.Tables)
              {
                Console.WriteLine($"Table Name: {schemaTable.ObjectName}");
            
                foreach (var column in schemaTable.Columns)
                      Console.WriteLine($"Column Name: {column.ObjectName}");
              }
             </code>
             </example>
             </summary>
             <param name="setup">Setup.</param>
             <param name="connection">Optional Connection.</param>
             <param name="transaction">Optional Transaction.</param>
        </member>
        <member name="M:Dotmim.Sync.RemoteOrchestrator.GetScopeInfoAsync(System.String,Dotmim.Sync.SyncSetup,System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <inheritdoc cref="M:Dotmim.Sync.RemoteOrchestrator.GetScopeInfoAsync(Dotmim.Sync.SyncSetup,System.Data.Common.DbConnection,System.Data.Common.DbTransaction)"/>
        </member>
        <member name="M:Dotmim.Sync.RemoteOrchestrator.InternalEnsureScopeInfoAsync(Dotmim.Sync.SyncContext,Dotmim.Sync.SyncSetup,System.Boolean,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.IProgress{Dotmim.Sync.ProgressArgs},System.Threading.CancellationToken)">
            <summary>
            Ensure the scope info is present on the remote data source. If not, creates a new one.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.RemoteOrchestrator.InternalIsConflictingSetupAsync(Dotmim.Sync.SyncContext,Dotmim.Sync.SyncSetup,Dotmim.Sync.ScopeInfo,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.IProgress{Dotmim.Sync.ProgressArgs},System.Threading.CancellationToken)">
            <summary>
            Check if the setup is conflicting with the server setup. If it is, user can choose to rollback, abort or continue.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.RemoteOrchestrator.NeedsToUpgradeAsync(Dotmim.Sync.SyncContext)">
            <summary>
            Check if we need to upgrade the Database Structure.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.RemoteOrchestrator.InternalUpgradeAsync(Dotmim.Sync.SyncContext,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.IProgress{Dotmim.Sync.ProgressArgs},System.Threading.CancellationToken)">
             <summary>
             Upgrade your <strong>server</strong> database to the last version. <strong>0.9.6</strong>
             <para>
             As usual on the server side, the upgrade is manually, but pretty simple.
             </para>
             <example>
             Here is an example where we are migrating a local server datasource where 2 scopes have been already used (1 with filters and the other one without filters)
             <code>
             var serverProvider = new SqlSyncProvider(serverCstring);
             var remoteOrchestrator = new RemoteOrchestrator(serverProvider, syncOptions);
            
             var needsUpgrade = await remoteOrchestrator.NeedsToUpgradeAsync();
            
             if (needsUpgrade)
                var (scopeInfos, scopeInfoClients) = await remoteOrchestrator.UpgradeAsync(progress, evaluationOnly);
             </code>
             </example>
             </summary>
             <returns>
             The new scopeInfos and scopeInfoClients rows from your new upgrade sync config tables.
             </returns>
        </member>
        <member name="M:Dotmim.Sync.RemoteOrchestrator.UpgradeToLastVersionAsync(Dotmim.Sync.SyncContext,System.Version,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.IProgress{Dotmim.Sync.ProgressArgs},System.Threading.CancellationToken)">
            <summary>
            Upgrade the server database to the last version.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.RemoteOrchestrator.UpgradeOldestVersions(Dotmim.Sync.SyncContext,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.IProgress{Dotmim.Sync.ProgressArgs},System.Threading.CancellationToken)">
            <summary>
            Upgrade the server database to the last version.
            </summary>
        </member>
        <member name="T:Dotmim.Sync.DbConnectionRunnerExtensions">
            <summary>
            Extensions for the DbConnectionRunner. This class is used to encapsulate a connection and a transaction.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.DbConnectionRunnerExtensions.GetConnectionAsync(Dotmim.Sync.BaseOrchestrator,Dotmim.Sync.SyncContext,Dotmim.Sync.Enumerations.SyncMode,Dotmim.Sync.Enumerations.SyncStage,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.IProgress{Dotmim.Sync.ProgressArgs},System.Threading.CancellationToken)">
            <summary>
            Create a connection and transaction, encapsulated in a <see cref="T:Dotmim.Sync.DbConnectionRunner"/> instance that is disposable.
            </summary>
        </member>
        <member name="T:Dotmim.Sync.DbConnectionRunner">
            <summary>
            Disposable runner to encapsulate a connection and a transaction.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.DbConnectionRunner.#ctor(Dotmim.Sync.BaseOrchestrator,Dotmim.Sync.SyncContext,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.Boolean,System.Boolean,System.IProgress{Dotmim.Sync.ProgressArgs},System.Threading.CancellationToken)">
            <summary>
            Initializes a new instance of the <see cref="T:Dotmim.Sync.DbConnectionRunner"/> class.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.DbConnectionRunner.Orchestrator">
            <summary>
            Gets or sets the orchestrator.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.DbConnectionRunner.Context">
            <summary>
            Gets the sync context.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.DbConnectionRunner.Connection">
            <summary>
            Gets or sets the connection.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.DbConnectionRunner.Transaction">
            <summary>
            Gets or sets the transaction.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.DbConnectionRunner.AlreadyOpened">
            <summary>
            Gets a value indicating whether the connection is already opened.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.DbConnectionRunner.AlreadyInTransaction">
            <summary>
            Gets a value indicating whether the transaction is already opened.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.DbConnectionRunner.CancellationToken">
            <summary>
            Gets the cancellation token.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.DbConnectionRunner.Progress">
            <summary>
            Gets the progress.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.DbConnectionRunner.CommitAsync(System.Boolean)">
            <summary>
            Commit the transaction and call an interceptor.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.DbConnectionRunner.CloseAsync">
            <summary>
            Commit the transaction and call an interceptor.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.DbConnectionRunner.RollbackAsync(System.String)">
            <summary>
            Rollback a transaction.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.DbConnectionRunner.Dispose">
            <summary>
            This code added to correctly implement the disposable pattern.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.DbConnectionRunner.Dispose(System.Boolean)">
            <summary>
            Dispose the current transaction and connection.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.DbConnectionRunner.DisposeAsync">
            <summary>
            Async dispose, when using "await using var runner = await this.GetConnectionAsync()".
            </summary>
        </member>
        <member name="T:Dotmim.Sync.ScopeInfoClientUpgrade">
            <summary>
            Scope info client upgrade.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.ScopeInfoClientUpgrade.ScopeName">
            <summary>
            Gets or sets the scope name.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.ScopeInfoClientUpgrade.Parameters">
            <summary>
            Gets the parameters.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.ScopeInfoClientUpgrade.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Dotmim.Sync.ScopeInfoClientUpgrade"/> class.
            </summary>
        </member>
        <member name="T:Dotmim.Sync.SyncParameter">
            <summary>
            Encapsulates information sent from the client to the server.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncParameter.Name">
            <summary>
            Gets or sets the name of the column from the table involved in filter.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncParameter.Value">
            <summary>
            Gets or sets the value of the parameter.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncParameter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Dotmim.Sync.SyncParameter"/> class by using default values.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncParameter.#ctor(System.String,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Dotmim.Sync.SyncParameter"/> class by
            using name and value parameters.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncParameter.ToString">
            <summary>
            Gets the string representation of the SyncParameter.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncParameter.GetAllNamesProperties">
            <inheritdoc cref="M:Dotmim.Sync.SyncNamedItem`1.GetAllNamesProperties"/>
        </member>
        <member name="T:Dotmim.Sync.SyncParameters">
            <summary>
            Parameters used to filter rows.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncParameters.InnerCollection">
            <summary>
            Gets or Sets the InnerCollection (Exposed as Public for serialization purpose).
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncParameters.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Dotmim.Sync.SyncParameters"/> class.
            Create a default collection for SerializersFactory.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncParameters.#ctor(System.ValueTuple{System.String,System.Object}[])">
            <summary>
            Initializes a new instance of the <see cref="T:Dotmim.Sync.SyncParameters"/> class.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncParameters.#ctor(Dotmim.Sync.SyncParameter[])">
            <summary>
            Initializes a new instance of the <see cref="T:Dotmim.Sync.SyncParameters"/> class.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncParameters.Add``1(System.String,``0)">
            <summary>
            Add a new sync parameter.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncParameters.Add(Dotmim.Sync.SyncParameter)">
            <summary>
            Add a new sync parameter.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncParameters.AddRange(System.Collections.Generic.IEnumerable{Dotmim.Sync.SyncParameter})">
            <summary>
            Add an array of parameters.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncParameters.Item(System.String)">
            <summary>
            Get a parameters by its name.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncParameters.Clear">
            <summary>
            Clear.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncParameters.GetHash">
            <summary>
            Get a hash code to identify the parameters uniquely.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncParameters.DefaultScopeHash">
            <summary>
            Gets get default hash code for the default scope.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncParameters.Count">
            <summary>
            Gets the count of parameters.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncParameters.IsReadOnly">
            <summary>
            Gets a value indicating whether gets if the collection is readonly.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncParameters.System#Collections#Generic#IList{Dotmim#Sync#SyncParameter}#Item(System.Int32)">
            <summary>
            Gets the index of a parameter.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncParameters.Item(System.Int32)">
            <summary>
            Gets the Sync parameter by its index.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncParameters.Insert(System.Int32,Dotmim.Sync.SyncParameter)">
            <summary>
            Insert a parameter at a specific index.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncParameters.Remove(Dotmim.Sync.SyncParameter)">
            <summary>
            Remove a parameter.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncParameters.Remove(System.String)">
            <summary>
            Remove a parameter by its name.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncParameters.Contains(Dotmim.Sync.SyncParameter)">
            <summary>
            Check if the collection contains a parameter.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncParameters.Contains(System.String)">
            <summary>
            Check if the collection contains a parameter by its name.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncParameters.CopyTo(Dotmim.Sync.SyncParameter[],System.Int32)">
            <summary>
            Copy the parameters to an array.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncParameters.IndexOf(Dotmim.Sync.SyncParameter)">
            <summary>
            Gets the index of a parameter.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncParameters.RemoveAt(System.Int32)">
            <summary>
            Remove a parameter at a specific index.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncParameters.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets the enumerator.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncParameters.GetEnumerator">
            <summary>
            Gets the enumerator.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncParameters.ToString">
            <summary>
            Gets the string representation of the parameters, using the count property.
            </summary>
        </member>
        <member name="T:Dotmim.Sync.ScopeInfo">
            <summary>
            Mapping sur la table ScopeInfo.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.ScopeInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Dotmim.Sync.ScopeInfo"/> class.
            For serialization purpose.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.ScopeInfo.Name">
            <summary>
            Gets or sets scope name. Shared by all clients and the server.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.ScopeInfo.Schema">
            <summary>
            Gets or sets scope schema. stored locally on the client.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.ScopeInfo.Setup">
            <summary>
            Gets or sets setup. stored locally on the client.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.ScopeInfo.Version">
            <summary>
            Gets or Sets the schema version.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.ScopeInfo.LastCleanupTimestamp">
            <summary>
            Gets or Sets the last timestamp a sync has occured. This timestamp is set just 'before' sync start.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.ScopeInfo.Properties">
            <summary>
            Gets or Sets the additional properties.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.ScopeInfo.ToString">
            <summary>
            Get the scope name / last cleanup / setup tables count.
            </summary>
        </member>
        <member name="T:Dotmim.Sync.ScopeInfoClient">
            <summary>
            Mapping sur la table ScopeInfo.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.ScopeInfoClient.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Dotmim.Sync.ScopeInfoClient"/> class.
            For serialization purpose.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.ScopeInfoClient.Id">
            <summary>
            Gets or sets id of the scope owner.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.ScopeInfoClient.Name">
            <summary>
            Gets or sets scope name. Shared by all clients and the server.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.ScopeInfoClient.Hash">
            <summary>
            Gets or sets scope Hash: Filters hash or null.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.ScopeInfoClient.LastSyncTimestamp">
            <summary>
            Gets or Sets the last timestamp a sync has occured. This timestamp is set just 'before' sync start.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.ScopeInfoClient.LastServerSyncTimestamp">
            <summary>
            Gets or Sets the last server timestamp a sync has occured for this scope client.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.ScopeInfoClient.IsNewScope">
            <summary>
            Gets or sets a value indicating whether gets or Sets if the client scope is new in the local datasource.
            If new, we will override timestamp for first synchronisation to be sure to get all datas from server.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.ScopeInfoClient.Parameters">
            <summary>
            Gets or Sets the parameters.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.ScopeInfoClient.LastSync">
            <summary>
            Gets or Sets the last datetime when a sync has successfully ended.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.ScopeInfoClient.LastSyncDuration">
            <summary>
            Gets or Sets the last duration a sync has occured.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.ScopeInfoClient.Properties">
            <summary>
            Gets or Sets the additional properties.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.ScopeInfoClient.Errors">
            <summary>
            Gets or Sets the errors batch info occured on last sync.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.ScopeInfoClient.LastSyncDurationString">
            <summary>
            Gets a readable version of LastSyncDuration.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.ScopeInfoClient.ShadowScope(Dotmim.Sync.ScopeInfoClient)">
            <summary>
            Make a shadow copy of an old scope to get the last sync information copied on this scope.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.ScopeInfoClient.ToString">
            <summary>
            Gets the scope info as a string.
            </summary>
        </member>
        <member name="T:Dotmim.Sync.Serialization.ArrayJsonConverter">
            <summary>
            ArrayJsonConverter used to convert an array of objects to a json array.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Serialization.ArrayJsonConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Reads an array of objects from the reader.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Serialization.ArrayJsonConverter.Write(System.Text.Json.Utf8JsonWriter,System.Collections.Generic.List{System.Object[]},System.Text.Json.JsonSerializerOptions)">
            <summary>
            Writes an array of objects to the writer.
            </summary>
        </member>
        <member name="T:Dotmim.Sync.Serialization.IConverter">
            <summary>
            Interface for converters.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.Serialization.IConverter.Key">
            <summary>
            Gets the unique key for this converter.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Serialization.IConverter.BeforeSerialize(Dotmim.Sync.SyncRow,Dotmim.Sync.SyncTable)">
            <summary>
            Convert a row before being serialized.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Serialization.IConverter.AfterDeserialized(Dotmim.Sync.SyncRow,Dotmim.Sync.SyncTable)">
            <summary>
            Convert a row afeter being deserialized.
            </summary>
        </member>
        <member name="T:Dotmim.Sync.Serialization.ISerializerFactory">
            <summary>
            Represents a factory of generic serializers.
            This object should be able to get a serializer of each type of T.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.Serialization.ISerializerFactory.Key">
            <summary>
            Gets the key for the serializer.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Serialization.ISerializerFactory.GetSerializer">
            <summary>
            Gets the serializer.
            </summary>
        </member>
        <member name="T:Dotmim.Sync.Serialization.ISerializer">
            <summary>
            Represents a generic serializer for a defined type.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Serialization.ISerializer.DeserializeAsync(System.IO.Stream,System.Type)">
            <summary>
            Deserialize an object from a stream.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Serialization.ISerializer.DeserializeAsync``1(System.IO.Stream)">
            <summary>
            Deserialize an object from a stream.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Serialization.ISerializer.Deserialize``1(System.String)">
            <summary>
            Deserialize an object from a string.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Serialization.ISerializer.SerializeAsync``1(``0)">
            <summary>
            Serialize an object to a stream.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Serialization.ISerializer.SerializeAsync(System.Object,System.Type)">
            <summary>
            Serialize an object to a stream.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Serialization.ISerializer.Serialize(System.Object,System.Type)">
            <summary>
            Serialize an object to a byte array.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Serialization.ISerializer.Serialize``1(``0)">
            <summary>
            Serialize an object to a byte array.
            </summary>
        </member>
        <member name="T:Dotmim.Sync.Serialization.JsonObjectSerializerFactory">
            <summary>
            Serializer factory for JSON serialization.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.Serialization.JsonObjectSerializerFactory.Key">
            <summary>
            Gets the key for the JSON serializer.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Serialization.JsonObjectSerializerFactory.GetSerializer">
            <summary>
            Gets the JSON serializer.
            </summary>
        </member>
        <member name="T:Dotmim.Sync.Serialization.JsonObjectSerializer">
            <summary>
            Json object serializer.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Serialization.JsonObjectSerializer.DeserializeAsync``1(System.IO.Stream)">
            <summary>
            Deserialize an object from a stream.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Serialization.JsonObjectSerializer.Deserialize``1(System.String)">
            <summary>
            Deserialize an object from a string.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Serialization.JsonObjectSerializer.SerializeAsync``1(``0)">
            <summary>
            Serialize an object to a stream.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Serialization.JsonObjectSerializer.SerializeAsync(System.Object,System.Type)">
            <summary>
            Serialize an object to a stream.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Serialization.JsonObjectSerializer.Serialize``1(``0)">
            <summary>
            Serialize an object to a byte array.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Serialization.JsonObjectSerializer.Serialize(System.Object,System.Type)">
            <summary>
            Serialize an object to a byte array.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Serialization.JsonObjectSerializer.DeserializeAsync(System.IO.Stream,System.Type)">
            <summary>
            Deserialize an object from a stream.
            </summary>
        </member>
        <member name="T:Dotmim.Sync.Serialization.JsonReader">
            <summary>
            Json reader to read a stream and get the properties.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Serialization.JsonReader.#ctor(System.IO.Stream,System.Text.Json.JsonReaderOptions,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Dotmim.Sync.Serialization.JsonReader"/> class.
            Create a fast forward json reader.
            </summary>
            <param name="stream">Stream to read.</param>
            <param name="jsonReaderOptions">options.</param>
            <param name="bufferSize">buffer size. will adapt if needed.</param>
            <exception cref="T:System.Exception">If stream is not readable.</exception>
        </member>
        <member name="P:Dotmim.Sync.Serialization.JsonReader.Stream">
            <summary>
            Gets stream to read.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.Serialization.JsonReader.Value">
            <summary>
            Gets the token value. Can be a value or a property name.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.Serialization.JsonReader.TokenType">
            <summary>
            Gets the token type.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.Serialization.JsonReader.Depth">
            <summary>
            Gets the current depth.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Serialization.JsonReader.Read">
            <summary>
            Read the next value. Can be any TokenType.
            </summary>
            <returns>true if a token has been read otherwise false.</returns>
        </member>
        <member name="M:Dotmim.Sync.Serialization.JsonReader.Values">
            <summary>
            Enumerate over the stream and read the properties.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Serialization.JsonReader.Skip">
            <summary>
            Skips the children of the current token.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Serialization.JsonReader.ReadAsString">
            <summary>
            Read the next token and get the value as a string.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Serialization.JsonReader.GetString">
            <summary>
            Gets the current token value as a string, if the token is a property name or a string.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Serialization.JsonReader.TryGetString(System.String@)">
            <summary>
            Try to get the current token value as a string, if the token is a property name or a string.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Serialization.JsonReader.ReadAsEscapedString">
            <summary>
            Read the next token and get the value as a string.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Serialization.JsonReader.GetEscapedString">
            <summary>
            Gets the current token value as a string, if the token is a property name or a string.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Serialization.JsonReader.TryGetEscapedString(System.String@)">
            <summary>
            Try to get the current token value as a string, if the token is a property name or a string.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Serialization.JsonReader.ReadAsGuid">
            <summary>
            Read the next token and get the value as a Guid.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Serialization.JsonReader.GetGuid">
            <summary>
            Gets the current token value as a Guid, if the token is a string.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Serialization.JsonReader.TryGetGuid(System.Guid@)">
            <summary>
            Try to get the current token value as a Guid, if the token is a string.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Serialization.JsonReader.ReadAsTimeSpan">
            <summary>
            Read the next token and get the value as a TimeSpan.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Serialization.JsonReader.GetTimeSpan">
            <summary>
            Gets the current token value as a TimeSpan, if the token is a string.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Serialization.JsonReader.TryGetTimeSpan(System.TimeSpan@)">
            <summary>
            Try to get the current token value as a TimeSpan, if the token is a string.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Serialization.JsonReader.ReadAsDateTimeOffset">
            <summary>
            Read the next token and get the value as a DateTimeOffset.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Serialization.JsonReader.GetDateTimeOffset">
            <summary>
            Gets the current token value as a DateTimeOffset, if the token is a string.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Serialization.JsonReader.TryGetDateTimeOffset(System.DateTimeOffset@)">
            <summary>
            Try to get the current token value as a DateTimeOffset, if the token is a string.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Serialization.JsonReader.ReadAsDateTime">
            <summary>
            Read the next token and get the value as a DateTime.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Serialization.JsonReader.GetDateTime">
            <summary>
            Gets the current token value as a DateTime, if the token is a string.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Serialization.JsonReader.TryGetDateTime(System.DateTime@)">
            <summary>
            Try to get the current token value as a DateTime, if the token is a string.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Serialization.JsonReader.ReadAsDouble">
            <summary>
            Read the next token and get the value as a double.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Serialization.JsonReader.GetDouble">
            <summary>
            Gets the current token value as a double, if the token is a number.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Serialization.JsonReader.TryGetDouble(System.Double@)">
            <summary>
            Try to get the current token value as a double, if the token is a number.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Serialization.JsonReader.ReadAsDecimal">
            <summary>
            Read the next token and get the value as a decimal.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Serialization.JsonReader.GetDecimal">
            <summary>
            Gets the current token value as a decimal, if the token is a number.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Serialization.JsonReader.TryGetDecimal(System.Decimal@)">
            <summary>
            Try to get the current token value as a decimal, if the token is a number.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Serialization.JsonReader.ReadAsSingle">
            <summary>
            Read the next token and get the value as a float.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Serialization.JsonReader.GetSingle">
            <summary>
            Gets the current token value as a float, if the token is a number.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Serialization.JsonReader.TryGetSingle(System.Single@)">
            <summary>
            Try to get the current token value as a float, if the token is a number.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Serialization.JsonReader.ReadAsInt64">
            <summary>
            Read the next token and get the value as a long.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Serialization.JsonReader.GetInt64">
            <summary>
            Try to get the current token value as a long, if the token is a number.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Serialization.JsonReader.TryGetInt64(System.Int64@)">
            <summary>
            Try to get the current token value as a long, if the token is a number.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Serialization.JsonReader.ReadAsInt32">
            <summary>
            Read the next token and get the value as a int.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Serialization.JsonReader.GetInt32">
            <summary>
            Gets the current token value as a int, if the token is a number.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Serialization.JsonReader.TryGetInt32(System.Int32@)">
            <summary>
            Try to get the current token value as a int, if the token is a number.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Serialization.JsonReader.ReadAsInt16">
            <summary>
            Read the next token and get the value as a short.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Serialization.JsonReader.GetInt16">
            <summary>
            Gets the current token value as a short, if the token is a number.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Serialization.JsonReader.TryGetInt16(System.Int16@)">
            <summary>
            Try to get the current token value as a short, if the token is a number.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Serialization.JsonReader.ReadAsByte">
            <summary>
            Read the next token and get the value as a byte.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Serialization.JsonReader.GetByte">
            <summary>
            Gets the current token value as a byte, if the token is a number.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Serialization.JsonReader.TryGetByte(System.Byte@)">
            <summary>
            Try to get the current token value as a byte, if the token is a number.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Serialization.JsonReader.ReadAsBoolean">
            <summary>
            Read the next token and get the value as a bool.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Serialization.JsonReader.GetBoolean">
            <summary>
            Gets the current token value as a bool, if the token is a boolean.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Serialization.JsonReader.TryGetBoolean(System.Boolean@)">
            <summary>
            Try to get the current token value as a bool, if the token is a boolean.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Serialization.JsonReader.ReadAsBytesFromBase64">
            <summary>
            Read the next token as a base 64 string and convert the value as a byte array.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Serialization.JsonReader.GetBytesFromBase64">
            <summary>
            Gets the current token value as a byte array, if the token is a base 64 string.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Serialization.JsonReader.TryGetBytesFromBase64(System.Byte[]@)">
            <summary>
            Try to get the current token value as a byte array, if the token is a base 64 string.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Serialization.JsonReader.ReadAsSpanFromBase64">
            <summary>
            Read the next token as a base 64 string and convert the value as a byte array.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Serialization.JsonReader.GetSpanFromBase64">
            <summary>
            Gets the current token value as a byte array, if the token is a base 64 string.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Serialization.JsonReader.Dispose">
            <summary>
            Dispose the reader.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Serialization.JsonReader.Dispose(System.Boolean)">
            <summary>
            Dispose the reader.
            </summary>
        </member>
        <member name="T:Dotmim.Sync.Serialization.JsonReaderValue">
            <summary>
            Json reader value.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Serialization.JsonReaderValue.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Dotmim.Sync.Serialization.JsonReaderValue"/> struct.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.Serialization.JsonReaderValue.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.Serialization.JsonReaderValue.TokenType">
            <summary>
            Gets or sets the token type.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.Serialization.JsonReaderValue.Depth">
            <summary>
            Gets or sets the depth.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Serialization.JsonReaderValue.op_Equality(Dotmim.Sync.Serialization.JsonReaderValue,Dotmim.Sync.Serialization.JsonReaderValue)">
            <summary>
            Compare two JsonReaderValue.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Serialization.JsonReaderValue.op_Inequality(Dotmim.Sync.Serialization.JsonReaderValue,Dotmim.Sync.Serialization.JsonReaderValue)">
            <summary>
            Compare two JsonReaderValue.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Serialization.JsonReaderValue.ToString">
            <summary>
            Returns the pair key value of the current token.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Serialization.JsonReaderValue.Equals(System.Object)">
            <summary>
            Compare two JsonReaderValue.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Serialization.JsonReaderValue.GetHashCode">
            <summary>
            Gets the hash code.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Serialization.JsonReaderValue.Equals(Dotmim.Sync.Serialization.JsonReaderValue)">
            <summary>
            Compare two JsonReaderValue.
            </summary>
        </member>
        <member name="T:Dotmim.Sync.Serialization.LocalJsonSerializer">
            <summary>
            Serialize json rows locally.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Serialization.LocalJsonSerializer.#ctor(Dotmim.Sync.BaseOrchestrator,Dotmim.Sync.SyncContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Dotmim.Sync.Serialization.LocalJsonSerializer"/> class.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Serialization.LocalJsonSerializer.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:Dotmim.Sync.Serialization.LocalJsonSerializer"/> class.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.Serialization.LocalJsonSerializer.Extension">
            <summary>
            Gets the file extension.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.Serialization.LocalJsonSerializer.IsOpen">
            <summary>
            Gets or sets a value indicating whether returns if the file is opened.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Serialization.LocalJsonSerializer.GetSchemaTableFromFile(System.String)">
            <summary>
            Get the table contained in a serialized file.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Serialization.LocalJsonSerializer.CloseFile">
            <summary>
            Close the current file, close the writer.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Serialization.LocalJsonSerializer.CloseFileAsync">
            <summary>
            Close the current file, close the writer.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Serialization.LocalJsonSerializer.OpenFileAsync(System.String,Dotmim.Sync.SyncTable,Dotmim.Sync.Enumerations.SyncRowState,System.Boolean)">
            <summary>
            Open the file and write header.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Serialization.LocalJsonSerializer.WriteRowToFileAsync(Dotmim.Sync.SyncRow,Dotmim.Sync.SyncTable)">
            <summary>
            Append a sync row to the writer.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Serialization.LocalJsonSerializer.OnWritingRow(System.Func{Dotmim.Sync.SyncTable,System.Object[],System.Threading.Tasks.Task{System.String}})">
            <summary>
            Interceptor on writing row.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Serialization.LocalJsonSerializer.OnReadingRow(System.Func{Dotmim.Sync.SyncTable,System.String,System.Threading.Tasks.Task{System.Object[]}})">
            <summary>
            Interceptor on reading row.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Serialization.LocalJsonSerializer.GetCurrentFileSizeAsync">
            <summary>
            Gets the current file size.
            </summary>
            <returns>Current file size as long.</returns>
        </member>
        <member name="M:Dotmim.Sync.Serialization.LocalJsonSerializer.GetRowsFromFile(System.String,Dotmim.Sync.SyncTable)">
            <summary>
            Enumerate all rows from file.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Serialization.LocalJsonSerializer.Dispose">
            <summary>
            Dispose the current instance.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Serialization.LocalJsonSerializer.DisposeAsync">
            <summary>
            Dispose the current instance.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Serialization.LocalJsonSerializer.Dispose(System.Boolean)">
            <summary>
            Dispose the current instance.
            </summary>
        </member>
        <member name="T:Dotmim.Sync.Serialization.ObjectToInferredTypesConverter">
            <summary>
            Convert an object to an inferred type (string, bool, long, double or datetimeoffset).
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Serialization.ObjectToInferredTypesConverter.ReadValue(System.Text.Json.Utf8JsonReader@)">
            <summary>
            Read the next value and infer the type between string, bool, long, double or datetimeoffset.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Serialization.ObjectToInferredTypesConverter.WriteValue(System.Text.Json.Utf8JsonWriter,System.Object,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Write value using options.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Serialization.ObjectToInferredTypesConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Read the next value and infer the type between string, bool, long, double or datetimeoffset.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Serialization.ObjectToInferredTypesConverter.Write(System.Text.Json.Utf8JsonWriter,System.Object,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Write value using options.
            </summary>
        </member>
        <member name="T:Dotmim.Sync.Serialization.SerializersFactory">
            <summary>
            Collection of serializers. By default, only the Json serializer is available.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.Serialization.SerializersFactory.JsonSerializerFactory">
            <summary>
            Gets get the default Json serializer.
            </summary>
        </member>
        <member name="T:Dotmim.Sync.Serialization.SerializerInfo">
            <summary>
            Serializer info used to store the serializer key and the client batch size when using a custom serializer.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Serialization.SerializerInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Dotmim.Sync.Serialization.SerializerInfo"/> class.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Serialization.SerializerInfo.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Dotmim.Sync.Serialization.SerializerInfo"/> class.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.Serialization.SerializerInfo.SerializerKey">
            <summary>
            Gets or sets the serializer key.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.Serialization.SerializerInfo.ClientBatchSize">
            <summary>
            Gets or sets the client batch size.
            </summary>
        </member>
        <member name="T:Dotmim.Sync.SetupColumns">
            <summary>
            List of columns within a table, to add to the sync process.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SetupColumns.InnerCollection">
            <summary>
            Gets or sets exposing the InnerCollection for serialization purpose.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SetupColumns.#ctor">
            <inheritdoc cref="T:Dotmim.Sync.SetupColumns"/>
        </member>
        <member name="M:Dotmim.Sync.SetupColumns.Add(System.String)">
            <summary>
            Add a new column to the list of columns to be added to the sync.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SetupColumns.AddRange(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Add a range of columns to the sync process setup.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SetupColumns.AddRange(System.String[])">
            <summary>
            Add a range of columns to the sync process setup.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SetupColumns.Clear">
            <summary>
            Clear all columns.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SetupColumns.Item(System.String)">
            <summary>
            Get a Column by its name.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SetupColumns.Count">
            <summary>
            Gets get the count of columns.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SetupColumns.IsReadOnly">
            <summary>
            Gets a value indicating whether get if the collection is readonly.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SetupColumns.System#Collections#Generic#IList{System#String}#Item(System.Int32)">
            <summary>
            Get a Column by its index.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SetupColumns.Item(System.Int32)">
            <summary>
            Get a Column by its index.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SetupColumns.Remove(System.String)">
            <summary>
            Remove a column from the list of columns to be added to the sync.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SetupColumns.Contains(System.String)">
            <summary>
            Check if the column exists in the list of columns to be added to the sync.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SetupColumns.CopyTo(System.String[],System.Int32)">
            <summary>
            Copy the list of columns to an array.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SetupColumns.IndexOf(System.String)">
            <summary>
            Get the index of a column in the list of columns to be added to the sync.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SetupColumns.RemoveAt(System.Int32)">
            <summary>
            Remove a column from the list of columns to be added to the sync.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SetupColumns.ToString">
            <summary>
            Returns a string representation of the number of columns in the list.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SetupColumns.Insert(System.Int32,System.String)">
            <summary>
            Insert a column at a specific index in the list of columns to be added to the sync.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SetupColumns.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the list of columns to be added to the sync.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SetupColumns.System#Collections#Generic#IEnumerable{System#String}#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the list of columns to be added to the sync.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SetupColumns.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the list of columns to be added to the sync.
            </summary>
        </member>
        <member name="T:Dotmim.Sync.SetupFilter">
            <summary>
            Design a filter clause on Dmtable.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SetupFilter.TableName">
            <summary>
            Gets or Sets the name of the table where the filter will be applied (and so the _Changes stored proc).
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SetupFilter.SchemaName">
            <summary>
            Gets or Sets the schema name of the table where the filter will be applied (and so the _Changes stored proc).
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SetupFilter.Joins">
            <summary>
            Gets or sets the custom joins list, used with custom wheres.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SetupFilter.CustomWheres">
            <summary>
            Gets or sets the custom joins list, used with custom wheres.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SetupFilter.Parameters">
            <summary>
            Gets or sets the parameters list, used as input in the stored procedure.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SetupFilter.Wheres">
            <summary>
            Gets or sets side where filters list.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SetupFilter.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Dotmim.Sync.SetupFilter"/> class.
            Creates a filterclause allowing to specify a different DbType.
            If you specify the columnType, Dotmim.Sync will expect that the column does not exist on the table, and the filter is only
            used as a parameter for the selectchanges stored procedure. Thus, IsVirtual would be true.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SetupFilter.AddParameter(System.String,System.Data.DbType,System.Boolean,System.String,System.Int32)">
            <summary>
            Add a parameter as input to stored procedure
            <paramref name="parameterName" /> can be anything and later used to compare to a column of the same type with <see cref="M:Dotmim.Sync.SetupFilter.AddWhere(System.String,System.String,System.String,System.String)"/>
            For SQL Server, parameter will be added as @{parameterName}
            For MySql, parameter will be added as in_{parameterName}.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SetupFilter.AddParameter(System.String,System.String,System.String,System.Boolean,System.String)">
            <summary>
            Add a parameter based on a column.
            <paramref name="columnName" /> refers to both the name of the parameter and column
            For SQL Server, parameter will be added as @{parameterName}
            For MySql, parameter will be added as in_{parameterName}.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SetupFilter.AddParameter(System.String,System.String,System.Boolean,System.String)">
            <summary>
            Add a parameter based on a column.
            <paramref name="columnName" /> refers to both the name of the parameter and column
            For SQL Server, parameter will be added as @{parameterName}
            For MySql, parameter will be added as in_{parameterName}.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SetupFilter.AddJoin(Dotmim.Sync.Join,System.String,System.String)">
            <summary>
            Add a custom filter clause.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SetupFilter.AddWhere(System.String,System.String,System.String,System.String)">
            <summary>
            Add a Where clause.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SetupFilter.AddCustomWhere(System.String)">
            <summary>
            Add a custom Where clause.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SetupFilter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Dotmim.Sync.SetupFilter"/> class.
            For Serializer.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SetupFilter.GetAllNamesProperties">
            <inheritdoc cref="M:Dotmim.Sync.SyncNamedItem`1.GetAllNamesProperties"/>
        </member>
        <member name="M:Dotmim.Sync.SetupFilter.EqualsByProperties(Dotmim.Sync.SetupFilter)">
            <inheritdoc cref="M:Dotmim.Sync.SyncNamedItem`1.EqualsByProperties(`0)"/>
        </member>
        <member name="M:Dotmim.Sync.SetupFilter.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SetupFilter.AddJoin(Dotmim.Sync.SetupFilterJoin)">
            <summary>
            Internal add custom join.
            </summary>
        </member>
        <member name="T:Dotmim.Sync.Join">
            <summary>
            Enum used to define the join type for a filter.
            </summary>
        </member>
        <member name="F:Dotmim.Sync.Join.Inner">
            <summary>
            Inner join.
            </summary>
        </member>
        <member name="F:Dotmim.Sync.Join.Left">
            <summary>
            Left join.
            </summary>
        </member>
        <member name="F:Dotmim.Sync.Join.Right">
            <summary>
            Right join.
            </summary>
        </member>
        <member name="F:Dotmim.Sync.Join.Outer">
            <summary>
            Outer join.
            </summary>
        </member>
        <member name="T:Dotmim.Sync.InnerTable">
            <summary>
            Enum used to define the inner table for a filter.
            </summary>
        </member>
        <member name="F:Dotmim.Sync.InnerTable.Base">
            <summary>
            Base table.
            </summary>
        </member>
        <member name="F:Dotmim.Sync.InnerTable.Side">
            <summary>
            Side table.
            </summary>
        </member>
        <member name="T:Dotmim.Sync.SetupFilterOn">
            <summary>
            Gets the table that is joined to the base table.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SetupFilterOn.#ctor">
            <inheritdoc cref="T:Dotmim.Sync.SetupFilterOn"/>/>
        </member>
        <member name="M:Dotmim.Sync.SetupFilterOn.#ctor(Dotmim.Sync.SetupFilter,Dotmim.Sync.Join,System.String,System.String)">
            <inheritdoc cref="T:Dotmim.Sync.SetupFilterOn"/>/>
        </member>
        <member name="M:Dotmim.Sync.SetupFilterOn.On(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Set the join with the right table.
            </summary>
        </member>
        <member name="T:Dotmim.Sync.SetupFilterJoin">
            <summary>
            Setup filter join.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SetupFilterJoin.JoinEnum">
            <summary>
            Gets or sets the join type.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SetupFilterJoin.TableName">
            <summary>
            Gets or sets the table name.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SetupFilterJoin.LeftTableName">
            <summary>
            Gets or sets the left table name.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SetupFilterJoin.LeftColumnName">
            <summary>
            Gets or sets the left column name.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SetupFilterJoin.RightTableName">
            <summary>
            Gets or sets the right table name.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SetupFilterJoin.RightColumnName">
            <summary>
            Gets or sets the right column name.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SetupFilterJoin.TableSchemaName">
            <summary>
            Gets or sets the schema name.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SetupFilterJoin.LeftTableSchemaName">
            <summary>
            Gets or sets the left table schema name.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SetupFilterJoin.RightTableSchemaName">
            <summary>
            Gets or sets the right table schema name.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SetupFilterJoin.#ctor">
            <inheritdoc cref="T:Dotmim.Sync.SetupFilterJoin"/>
        </member>
        <member name="M:Dotmim.Sync.SetupFilterJoin.#ctor(Dotmim.Sync.Join,System.String,System.String,System.String,System.String,System.String)">
            <inheritdoc cref="T:Dotmim.Sync.SetupFilterJoin"/>
        </member>
        <member name="M:Dotmim.Sync.SetupFilterJoin.#ctor(Dotmim.Sync.Join,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <inheritdoc cref="T:Dotmim.Sync.SetupFilterJoin"/>
        </member>
        <member name="M:Dotmim.Sync.SetupFilterJoin.GetAllNamesProperties">
            <inheritdoc cref="M:Dotmim.Sync.SyncNamedItem`1.GetAllNamesProperties"/>
        </member>
        <member name="T:Dotmim.Sync.Setup.SetupFilterParameter">
            <summary>
            Represents a filter parameters
            For example : @CustomerID int NULL = 12.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.Setup.SetupFilterParameter.Name">
            <summary>
            Gets or sets the name of the parameter.
            for SQL, will be named @{ParamterName}
            for MySql, will be named in_{ParameterName}.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.Setup.SetupFilterParameter.TableName">
            <summary>
            Gets or sets of Sets the table name if parameter is a column.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.Setup.SetupFilterParameter.SchemaName">
            <summary>
            Gets or sets of Sets the table schema name if parameter is a column.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.Setup.SetupFilterParameter.DbType">
            <summary>
            Gets or Sets the parameter db type.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.Setup.SetupFilterParameter.DefaultValue">
            <summary>
            Gets or Sets the parameter default value expression.
            Be careful, must be expresse in data source language.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.Setup.SetupFilterParameter.AllowNull">
            <summary>
            Gets or sets a value indicating whether gets or Sets if the parameter is default null.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.Setup.SetupFilterParameter.MaxLength">
            <summary>
            Gets or Sets the parameter max length (if needed).
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Setup.SetupFilterParameter.GetAllNamesProperties">
            <inheritdoc cref="M:Dotmim.Sync.SyncNamedItem`1.GetAllNamesProperties"/>
        </member>
        <member name="M:Dotmim.Sync.Setup.SetupFilterParameter.EqualsByProperties(Dotmim.Sync.Setup.SetupFilterParameter)">
            <inheritdoc cref="M:Dotmim.Sync.SyncNamedItem`1.EqualsByProperties(`0)"/>
        </member>
        <member name="T:Dotmim.Sync.Setup.SetupFilterWhere">
            <summary>
            Setup filter where clause.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.Setup.SetupFilterWhere.TableName">
            <summary>
            Gets or sets the table name.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.Setup.SetupFilterWhere.SchemaName">
            <summary>
            Gets or sets the schema name.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.Setup.SetupFilterWhere.ColumnName">
            <summary>
            Gets or sets the column name.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.Setup.SetupFilterWhere.ParameterName">
            <summary>
            Gets or sets the parameter name.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.Setup.SetupFilterWhere.GetAllNamesProperties">
            <inheritdoc cref="M:Dotmim.Sync.SyncNamedItem`1.GetAllNamesProperties"/>
        </member>
        <member name="T:Dotmim.Sync.SetupFilters">
            <summary>
            Setup filters for a table.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SetupFilters.InnerCollection">
            <summary>
            Gets or sets exposing the InnerCollection for serialization purpose.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SetupFilters.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Dotmim.Sync.SetupFilters"/> class.
            Create a default collection for SerializersFactory.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SetupFilters.Add(Dotmim.Sync.SetupFilter)">
            <summary>
            Add a new filter.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SetupFilters.Add(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Add a new filter.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SetupFilters.Clear">
            <summary>
            Clear all filters.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SetupFilters.Count">
            <summary>
            Gets the number of elements contained in the collection.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SetupFilters.IsReadOnly">
            <summary>
            Gets a value indicating whether the collection is read-only.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SetupFilters.Item(System.Int32)">
            <summary>
            Gets a filter by its index.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SetupFilters.Insert(System.Int32,Dotmim.Sync.SetupFilter)">
            <summary>
            Insert a filter at a specific index.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SetupFilters.Remove(Dotmim.Sync.SetupFilter)">
            <summary>
            Remove a filter from the collection.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SetupFilters.Contains(Dotmim.Sync.SetupFilter)">
            <summary>
            Check if the collection contains a filter.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SetupFilters.CopyTo(Dotmim.Sync.SetupFilter[],System.Int32)">
            <summary>
            Copy the collection to an array.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SetupFilters.IndexOf(Dotmim.Sync.SetupFilter)">
            <summary>
            Get the index of a filter in the collection.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SetupFilters.RemoveAt(System.Int32)">
            <summary>
            Remove a filter at a specific index.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SetupFilters.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets the enumerator for the collection.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SetupFilters.GetEnumerator">
            <summary>
            Gets the enumerator for the collection.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SetupFilters.ToString">
            <summary>
            Returns a string representation of the number of filters in the collection.
            </summary>
        </member>
        <member name="T:Dotmim.Sync.SetupTable">
            <summary>
            Represents a table to be synchronized.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SetupTable.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Dotmim.Sync.SetupTable"/> class.
            public ctor for serialization purpose.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SetupTable.TableName">
            <summary>
            Gets or Sets the table name.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SetupTable.SchemaName">
            <summary>
            Gets or Sets the schema name.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SetupTable.Columns">
            <summary>
            Gets or Sets the table columns collection.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SetupTable.SyncDirection">
            <summary>
            Gets or Sets the Sync direction (may be Bidirectional, DownloadOnly, UploadOnly)
            Default is Bidirectional.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SetupTable.HasColumns">
            <summary>
            Gets a value indicating whether check if SetupTable has columns. If not columns specified, all the columns from server database are retrieved.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SetupTable.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Dotmim.Sync.SetupTable"/> class.
            Specify a table to add to the sync process
            If you don't specify any columns, all columns in the data source will be imported.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SetupTable.#ctor(System.String,System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Dotmim.Sync.SetupTable"/> class.
            Specify a table and its columns, to add to the sync process
            If you're specifying some columns, all others columns in the data source will be ignored.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SetupTable.ToString">
            <summary>
            ToString override. Gets the full name + columns count.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SetupTable.GetFullName">
            <summary>
            Gets the full name of the table, based on schema name + "." + table name (if schema name exists).
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SetupTable.EqualsByProperties(Dotmim.Sync.SetupTable)">
            <inheritdoc cref="M:Dotmim.Sync.SyncNamedItem`1.EqualsByProperties(`0)"/>
        </member>
        <member name="M:Dotmim.Sync.SetupTable.GetAllNamesProperties">
            <inheritdoc cref="M:Dotmim.Sync.SyncNamedItem`1.GetAllNamesProperties"/>
        </member>
        <member name="T:Dotmim.Sync.SetupTables">
            <summary>
            Represents a list of tables to be added to the sync process.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SetupTables.InnerCollection">
            <summary>
            Gets or sets exposing the InnerCollection for serialization purpose.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SetupTables.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Dotmim.Sync.SetupTables"/> class.
            ctor for serialization purpose.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SetupTables.#ctor(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Dotmim.Sync.SetupTables"/> class.
            Create a list of tables to be added to the sync process.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SetupTables.Add(System.String,System.String)">
            <summary>
            Add a new table to the collection of tables to be added to the sync process.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SetupTables.Add(Dotmim.Sync.SetupTable)">
            <summary>
            Add a new table to the collection of tables to be added to the sync process.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SetupTables.AddRange(System.Collections.Generic.IEnumerable{Dotmim.Sync.SetupTable})">
            <summary>
            Add a collection of tables to be added to the sync process.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SetupTables.AddRange(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Add a collection of tables to be added to the sync process.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SetupTables.Item(System.String)">
            <summary>
            Get a table by its name.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SetupTables.Item(System.String,System.String)">
            <summary>
            Get a table by its name.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SetupTables.HasTables">
            <summary>
            Gets a value indicating whether check if Setup has tables.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SetupTables.HasColumns">
            <summary>
            Gets a value indicating whether check if Setup has at least one table with columns.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SetupTables.Clear">
            <summary>
            Clear all tables.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SetupTables.Count">
            <summary>
            Gets the count of tables.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SetupTables.IsReadOnly">
            <summary>
            Gets a value indicating whether the collection is readonly.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SetupTables.Item(System.Int32)">
            <summary>
            Get a table by its index.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SetupTables.Remove(Dotmim.Sync.SetupTable)">
            <summary>
            Remove a table from the list of tables to be added to the sync.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SetupTables.Contains(Dotmim.Sync.SetupTable)">
            <summary>
            Check if the collection contains a table.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SetupTables.CopyTo(Dotmim.Sync.SetupTable[],System.Int32)">
            <summary>
            Copy the list of tables to an array.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SetupTables.IndexOf(Dotmim.Sync.SetupTable)">
            <summary>
            Get the index of a table in the list of tables to be added to the sync.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SetupTables.RemoveAt(System.Int32)">
            <summary>
            Remove a table from the list of tables to be added to the sync.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SetupTables.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SetupTables.Insert(System.Int32,Dotmim.Sync.SetupTable)">
            <summary>
            Insert a table at a specific index.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SetupTables.GetEnumerator">
            <summary>
            Get the enumerator for the collection.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SetupTables.System#Collections#Generic#IEnumerable{Dotmim#Sync#SetupTable}#GetEnumerator">
            <summary>
            Get the enumerator for the collection.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SetupTables.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Get the enumerator for the collection.
            </summary>
        </member>
        <member name="T:Dotmim.Sync.SyncSetup">
            <summary>
            Represents a list of tables to be added to the sync process.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncSetup.Tables">
            <summary>
            Gets or Sets the tables involved in the sync.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncSetup.Filters">
            <summary>
            Gets or Sets the filters involved in the sync.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncSetup.StoredProceduresPrefix">
            <summary>
            Gets or sets specify a prefix for naming stored procedure. Default is empty string.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncSetup.StoredProceduresSuffix">
            <summary>
            Gets or sets specify a suffix for naming stored procedures. Default is empty string.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncSetup.TriggersPrefix">
            <summary>
            Gets or sets specify a prefix for naming stored procedure. Default is empty string.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncSetup.TriggersSuffix">
            <summary>
            Gets or sets specify a suffix for naming stored procedures. Default is empty string.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncSetup.TrackingTablesPrefix">
            <summary>
            Gets or sets specify a prefix for naming tracking tables. Default is empty string.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncSetup.TrackingTablesSuffix">
            <summary>
            Gets or sets specify a suffix for naming tracking tables.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncSetup.#ctor(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Dotmim.Sync.SyncSetup"/> class.
            Create a list of tables to be added to the sync process.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncSetup.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:Dotmim.Sync.SyncSetup"/> class.
            Create a list of tables to be added to the sync process.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncSetup.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Dotmim.Sync.SyncSetup"/> class.
            ctor.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncSetup.HasTables">
            <summary>
            Gets a value indicating whether check if Setup has tables.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncSetup.HasColumns">
            <summary>
            Gets a value indicating whether check if Setup has at least one table with columns.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncSetup.HasSameOptions(Dotmim.Sync.SyncSetup)">
            <summary>
            Check if two setups have the same local options.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncSetup.HasSameStructure(Dotmim.Sync.SyncSetup)">
            <summary>
            Check if two setups have the same tables / filters structure.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncSetup.EqualsByProperties(Dotmim.Sync.SyncSetup)">
            <inheritdoc cref="M:Dotmim.Sync.SyncNamedItem`1.EqualsByProperties(`0)" />
        </member>
        <member name="M:Dotmim.Sync.SyncSetup.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncSetup.Equals(Dotmim.Sync.SyncSetup)">
            <summary>
            Gets a true boolean if other instance is defined as same based on all properties.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncSetup.Equals(System.Object)">
            <summary>
            Gets a true boolean if other instance is defined as same based on all properties.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncSetup.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
        </member>
        <member name="T:Dotmim.Sync.ContainerSet">
            <summary>
            ContainerSet is a collection of tables and rows to be sent over the wire.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.ContainerSet.Tables">
            <summary>
            Gets or sets list of tables.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.ContainerSet.HasTables">
            <summary>
            Gets a value indicating whether check if we have some tables in the container.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.ContainerSet.HasRows">
            <summary>
            Gets a value indicating whether check if we have at least one table with one row.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.ContainerSet.RowsCount">
            <summary>
            Getting the container rows count.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.ContainerSet.#ctor">
            <inheritdoc cref="T:Dotmim.Sync.ContainerSet"/>
        </member>
        <member name="M:Dotmim.Sync.ContainerSet.Clear">
            <summary>
            Clear all tables and rows in the container.
            </summary>
        </member>
        <member name="T:Dotmim.Sync.ContainerTable">
            <summary>
            ContainerTable is a table with columns and rows to be sent over the wire.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.ContainerTable.TableName">
            <summary>
            Gets or sets the name of the table that the DmTableSurrogate object represents.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.ContainerTable.SchemaName">
            <summary>
            Gets or sets get or Set the schema used for the DmTableSurrogate.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.ContainerTable.Columns">
            <summary>
            Gets or sets get or Set the columns name used for the DmTableSurrogate.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.ContainerTable.Rows">
            <summary>
            Gets or sets list of rows.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.ContainerTable.#ctor">
            <inheritdoc cref="T:Dotmim.Sync.ContainerTable"/>
        </member>
        <member name="M:Dotmim.Sync.ContainerTable.#ctor(Dotmim.Sync.SyncTable)">
            <inheritdoc cref="T:Dotmim.Sync.ContainerTable"/>
        </member>
        <member name="P:Dotmim.Sync.ContainerTable.HasRows">
            <summary>
            Gets a value indicating whether check if we have rows in this container table.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.ContainerTable.Clear">
            <summary>
            Clear all rows in the container table.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.ContainerTable.GetAllNamesProperties">
            <inheritdoc cref="M:Dotmim.Sync.SyncNamedItem`1.GetAllNamesProperties"/>
        </member>
        <member name="T:Dotmim.Sync.ContainerTableColum">
            <summary>
            Represents a column in a container table.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.ContainerTableColum.ColumnName">
            <summary>
            Gets or sets the name of the column.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.ContainerTableColum.TypeName">
            <summary>
            Gets or sets the type of the column.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.ContainerTableColum.IsPrimaryKey">
            <summary>
            Gets or sets a value indicating whether the column is a primary key.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.ContainerTableColum.#ctor">
            <inheritdoc cref="T:Dotmim.Sync.ContainerTableColum"/>
        </member>
        <member name="T:Dotmim.Sync.SyncColumn">
            <summary>
            Represents a column in a table.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncColumn.ColumnName">
            <summary>
            Gets or Sets the column name.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncColumn.DataType">
            <summary>
            Gets or Sets the column data type.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncColumn.AllowDBNull">
            <summary>
            Gets or sets a value indicating whether gets or Sets if the column allows null values.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncColumn.IsUnique">
            <summary>
            Gets or sets a value indicating whether gets or Sets if the column is unique.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncColumn.IsReadOnly">
            <summary>
            Gets or sets a value indicating whether gets or Sets if the column is read only.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncColumn.IsAutoIncrement">
            <summary>
            Gets or sets a value indicating whether gets or Sets if the column is auto increment.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncColumn.AutoIncrementSeed">
            <summary>
            Gets or Sets the seed for the auto increment.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncColumn.AutoIncrementStep">
            <summary>
            Gets or Sets the step for the auto increment.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncColumn.IsUnsigned">
            <summary>
            Gets or sets a value indicating whether gets or Sets if the column is unsigned.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncColumn.IsUnicode">
            <summary>
            Gets or sets a value indicating whether gets or Sets if the column is unicode.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncColumn.IsCompute">
            <summary>
            Gets or sets a value indicating whether gets or sets indicating if the column is a computed.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncColumn.MaxLength">
            <summary>
            Gets or Sets the max length for the column.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncColumn.Ordinal">
            <summary>
            Gets or Sets the column ordinal.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncColumn.PrecisionIsSpecified">
            <summary>
            Gets or sets a value indicating whether gets or Sets if the precision for the column is specified.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncColumn.Precision">
            <summary>
            Gets or Sets the precision for the column.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncColumn.ScaleIsSpecified">
            <summary>
            Gets or sets a value indicating whether gets or Sets if the scale for the column is specified.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncColumn.Scale">
            <summary>
            Gets or Sets the scale for the column.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncColumn.OriginalDbType">
            <summary>
            Gets or Sets the original db type.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncColumn.OriginalTypeName">
            <summary>
            Gets or Sets the original type name.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncColumn.DbType">
            <summary>
            Gets or Sets the db type.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncColumn.DefaultValue">
            <summary>
            Gets or Sets the default value.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncColumn.ExtraProperty1">
            <summary>
            Gets or Sets the extra property 1.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncColumn.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Dotmim.Sync.SyncColumn"/> class.
            Ctor for serialization purpose.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncColumn.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Dotmim.Sync.SyncColumn"/> class.
            Create a new column with the given name.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncColumn.#ctor(System.String,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Dotmim.Sync.SyncColumn"/> class.
            Create a new column with the given name and given type.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncColumn.Create``1(System.String)">
            <summary>
            Create a new SchemaColumn of type T.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncColumn.GetAssemblyQualifiedName(System.Type)">
            <summary>
            Compress string representation of the DataType to be more concise in the serialized stream.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncColumn.SetType(System.Type)">
            <summary>
            Set the SyncColumn Type (if the type was not set with the correct ctor).
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncColumn.Clone">
            <summary>
            Clone a SyncColumn.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncColumn.GetDbType">
            <summary>
            Get the DbType in a normal DbType type.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncColumn.CoerceDbType">
            <summary>
            Evaluate DbType, if needed.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncColumn.GetDataType">
            <summary>
            Get DataType from compressed string type.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncColumn.GetAutoIncrementSeedAndStep">
            <summary>
            Get auto inc values, coercing Step.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncColumn.GetDefaultValue">
            <summary>
            Gets or Sets the default value.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncColumn.IsValueType">
            <summary>
            Gets if the column type is a value type.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncColumn.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncColumn.GetAllNamesProperties">
            <inheritdoc cref="M:Dotmim.Sync.SyncNamedItem`1.GetAllNamesProperties"/>
        </member>
        <member name="M:Dotmim.Sync.SyncColumn.EqualsByProperties(Dotmim.Sync.SyncColumn)">
            <inheritdoc cref="M:Dotmim.Sync.SyncNamedItem`1.EqualsByProperties(`0)"/>
        </member>
        <member name="F:Dotmim.Sync.SyncColumn.StorageClassType">
            <summary>
             Collection of autorized types
             each type is marked as Value type or not.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncColumn.GetTypeFromAssemblyQualifiedName(System.String)">
            <summary>
            Get DataType from a string value.
            </summary>
        </member>
        <member name="T:Dotmim.Sync.SyncColumnIdentifier">
            <summary>
            Represents a column identifier.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncColumnIdentifier.ColumnName">
            <summary>
            Gets or Sets the column name.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncColumnIdentifier.TableName">
            <summary>
            Gets or Sets the table name.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncColumnIdentifier.SchemaName">
            <summary>
            Gets or Sets the schema name.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncColumnIdentifier.#ctor">
            <inheritdoc cref="T:Dotmim.Sync.SyncColumnIdentifier"/>
        </member>
        <member name="M:Dotmim.Sync.SyncColumnIdentifier.#ctor(System.String,System.String,System.String)">
            <inheritdoc cref="T:Dotmim.Sync.SyncColumnIdentifier"/>
        </member>
        <member name="M:Dotmim.Sync.SyncColumnIdentifier.Clone">
            <summary>
            Clone the current SyncColumnIdentifier.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncColumnIdentifier.ToString">
            <summary>
            return the string representation of the SyncColumnIdentifier.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncColumnIdentifier.GetAllNamesProperties">
            <inheritdoc cref="M:Dotmim.Sync.SyncNamedItem`1.GetAllNamesProperties"/>
        </member>
        <member name="T:Dotmim.Sync.SyncColumns">
            <summary>
            Represents a collection of columns.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncColumns.InnerCollection">
            <summary>
            Gets or sets exposing the InnerCollection for serialization purpose.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncColumns.Table">
            <summary>
            Gets column's schema.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncColumns.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Dotmim.Sync.SyncColumns"/> class.
            Create a default collection for SerializersFactory.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncColumns.#ctor(Dotmim.Sync.SyncTable)">
            <summary>
            Initializes a new instance of the <see cref="T:Dotmim.Sync.SyncColumns"/> class.
            Create a new collection of tables for a SyncSchema.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncColumns.EnsureColumns(Dotmim.Sync.SyncTable)">
            <summary>
            Since we don't serializer the reference to the schema, this method will reaffect the correct schema.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncColumns.Item(System.String)">
            <summary>
            Get a Column by its name.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncColumns.HasSyncColumnOfType(System.Type)">
            <summary>
            Returns a bool indicating if the columns contains at least one column of type argument.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncColumns.Add(Dotmim.Sync.SyncColumn)">
            <summary>
            Add a new Column to the Schema Column collection.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncColumns.Add(System.String,System.Type)">
            <summary>
            Add a new Column to the Schema Column collection.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncColumns.AddRange(Dotmim.Sync.SyncColumn[])">
            <summary>
            Add a collection of columns.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncColumns.Reorder(Dotmim.Sync.SyncColumn,System.Int32)">
            <summary>
            Reorganize columns order.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncColumns.Clear">
            <summary>
            Clear all the relations.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncColumns.Count">
            <summary>
            Gets the number of elements contained in the collection.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncColumns.IsReadOnly">
            <summary>
            Gets a value indicating whether the collection is read-only.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncColumns.System#Collections#Generic#IList{Dotmim#Sync#SyncColumn}#Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncColumns.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncColumns.Remove(Dotmim.Sync.SyncColumn)">
            <summary>
            Remove a column from the collection.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncColumns.Contains(Dotmim.Sync.SyncColumn)">
            <summary>
            Check if the collection contains a column.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncColumns.CopyTo(Dotmim.Sync.SyncColumn[],System.Int32)">
            <summary>
            Copy the collection to an array.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncColumns.IndexOf(Dotmim.Sync.SyncColumn)">
            <summary>
            Returns the index of a column in the collection.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncColumns.IndexOf(System.String)">
            <summary>
            Returns the index of a column in the collection.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncColumns.RemoveAt(System.Int32)">
            <summary>
            Remove a column at a specific index.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncColumns.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncColumns.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncColumns.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncColumns.Insert(System.Int32,Dotmim.Sync.SyncColumn)">
            <summary>
            Insert a column at a specific index.
            </summary>
        </member>
        <member name="T:Dotmim.Sync.SyncFilter">
            <summary>
            Design a filter clause on Dmtable.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncFilter.TableName">
            <summary>
            Gets or sets the name of the table where the filter will be applied (and so the _Changes stored proc).
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncFilter.SchemaName">
            <summary>
            Gets or Sets the schema name of the table where the filter will be applied (and so the _Changes stored proc).
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncFilter.Parameters">
            <summary>
            Gets or Sets the parameters list, used as input in the stored procedure.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncFilter.Wheres">
            <summary>
            Gets or Sets side where filters list.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncFilter.Joins">
            <summary>
            Gets or Sets side where filters list.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncFilter.CustomWheres">
            <summary>
            Gets or Sets customs where.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncFilter.Schema">
            <summary>
            Gets or sets the ShemaFilter's SyncSchema.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncFilter.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Dotmim.Sync.SyncFilter"/> class.
            Creates a filterclause allowing to specify a different DbType.
            If you specify the columnType, Dotmim.Sync will expect that the column does not exist on the table, and the filter is only
            used as a parameter for the selectchanges stored procedure. Thus, IsVirtual would be true.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncFilter.Clone">
            <summary>
            Clone the SyncFilter.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncFilter.GetAllNamesProperties">
            <inheritdoc cref="M:Dotmim.Sync.SyncNamedItem`1.GetAllNamesProperties"/>
        </member>
        <member name="M:Dotmim.Sync.SyncFilter.EnsureFilter(Dotmim.Sync.SyncSet)">
            <summary>
            Ensure filter has the correct schema (since the property is not serialized.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncFilter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Dotmim.Sync.SyncFilter"/> class.
            For Serializer.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncFilter.GetFilterName">
            <summary>
            Get unique filter name, composed by all parameters name.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncFilter.EqualsByProperties(Dotmim.Sync.SyncFilter)">
            <inheritdoc cref="M:Dotmim.Sync.SyncNamedItem`1.EqualsByProperties(`0)"/>
        </member>
        <member name="M:Dotmim.Sync.SyncFilter.Clear">
            <summary>
            Clear.
            </summary>
        </member>
        <member name="T:Dotmim.Sync.SyncFilterJoin">
            <summary>
            SyncFilterJoin represents a join between two tables for a filter.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncFilterJoin.EnsureFilterJoin(Dotmim.Sync.SyncSet)">
            <summary>
            Ensure filter parameter as the correct schema (since the property is not serialized).
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncFilterJoin.Schema">
            <summary>
            Gets or sets the ShemaTable's SyncSchema.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncFilterJoin.JoinEnum">
            <summary>
            Gets or sets the join type.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncFilterJoin.TableName">
            <summary>
            Gets or sets the table name.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncFilterJoin.LeftTableName">
            <summary>
            Gets or sets the left table name.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncFilterJoin.LeftColumnName">
            <summary>
            Gets or sets the left column name.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncFilterJoin.RightTableName">
            <summary>
            Gets or sets the right table name.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncFilterJoin.RightColumnName">
            <summary>
            Gets or sets the right column name.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncFilterJoin.TableSchemaName">
            <summary>
            Gets or sets the schema name.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncFilterJoin.LeftTableSchemaName">
            <summary>
            Gets or sets the left table schema name.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncFilterJoin.RightTableSchemaName">
            <summary>
            Gets or sets the right table schema name.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncFilterJoin.#ctor">
            <inheritdoc cref="T:Dotmim.Sync.SyncFilterJoin"/>
        </member>
        <member name="M:Dotmim.Sync.SyncFilterJoin.GetAllNamesProperties">
            <inheritdoc cref="M:Dotmim.Sync.SyncNamedItem`1.GetAllNamesProperties"/>
        </member>
        <member name="T:Dotmim.Sync.SyncFilterJoins">
            <summary>
            Represents a collection of filter joins.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncFilterJoins.InnerCollection">
            <summary>
            Gets or sets exposing the InnerCollection for serialization purpose.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncFilterJoins.Schema">
            <summary>
            Gets filter's schema.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncFilterJoins.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Dotmim.Sync.SyncFilterJoins"/> class.
            Create a default collection for SerializersFactory.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncFilterJoins.#ctor(Dotmim.Sync.SyncSet)">
            <summary>
            Initializes a new instance of the <see cref="T:Dotmim.Sync.SyncFilterJoins"/> class.
            Create a new collection of tables for a SyncSchema.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncFilterJoins.EnsureFilters(Dotmim.Sync.SyncSet)">
            <summary>
            Since we don't serializer the reference to the schema, this method will reaffect the correct schema.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncFilterJoins.Add(Dotmim.Sync.SyncFilterJoin)">
            <summary>
            Add a new filter.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncFilterJoins.Clear">
            <summary>
            Clear.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncFilterJoins.Count">
            <summary>
            Gets get the count of filters.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncFilterJoins.IsReadOnly">
            <summary>
            Gets a value indicating whether the collection is read-only.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncFilterJoins.System#Collections#Generic#IList{Dotmim#Sync#SyncFilterJoin}#Item(System.Int32)">
            <summary>
            Gets or sets the filter at the specified index.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncFilterJoins.Item(System.Int32)">
            <summary>
            Gets or sets the filter at the specified index.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncFilterJoins.Insert(System.Int32,Dotmim.Sync.SyncFilterJoin)">
            <summary>
            Insert a filter at the specified index.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncFilterJoins.Remove(Dotmim.Sync.SyncFilterJoin)">
            <summary>
            Remove a filter.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncFilterJoins.Contains(Dotmim.Sync.SyncFilterJoin)">
            <summary>
            Check if the collection contains a filter.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncFilterJoins.CopyTo(Dotmim.Sync.SyncFilterJoin[],System.Int32)">
            <summary>
            Copy the collection to an array.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncFilterJoins.IndexOf(Dotmim.Sync.SyncFilterJoin)">
            <summary>
            Get the index of a filter.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncFilterJoins.RemoveAt(System.Int32)">
            <summary>
            Remove a filter at the specified index.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncFilterJoins.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Get the enumerator.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncFilterJoins.GetEnumerator">
            <summary>
            Get the enumerator.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncFilterJoins.ToString">
            <summary>
            Get the enumerator.
            </summary>
        </member>
        <member name="T:Dotmim.Sync.SyncFilterParameter">
            <summary>
            Represents a filter parameters
            For example : @CustomerID int NULL = 12.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncFilterParameter.Schema">
            <summary>
            Gets or sets the ShemaTable's SyncSchema.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncFilterParameter.#ctor">
            <inheritdoc cref="T:Dotmim.Sync.SyncFilterParameter"/>/>
        </member>
        <member name="M:Dotmim.Sync.SyncFilterParameter.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Dotmim.Sync.SyncFilterParameter"/> class.
            Create a new filter parameter with the given name.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncFilterParameter.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Dotmim.Sync.SyncFilterParameter"/> class.
            Create a new filter parameter with the given name.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncFilterParameter.EnsureFilterParameter(Dotmim.Sync.SyncSet)">
            <summary>
            Ensure filter parameter as the correct schema (since the property is not serialized).
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncFilterParameter.Name">
            <summary>
            Gets or sets the name of the parameter.
            for SQL, will be named @{ParamterName}
            for MySql, will be named in_{ParameterName}.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncFilterParameter.TableName">
            <summary>
            Gets or Sets table name, if parameter is linked to a table.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncFilterParameter.SchemaName">
            <summary>
            Gets or sets schema name, if parameter is linked to a table.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncFilterParameter.DbType">
            <summary>
            Gets or Sets the parameter db type.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncFilterParameter.DefaultValue">
            <summary>
            Gets or Sets the parameter default value expression.
            Be careful, must be expresse in data source language.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncFilterParameter.AllowNull">
            <summary>
            Gets or sets a value indicating whether gets or Sets if the parameter is default null.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncFilterParameter.MaxLength">
            <summary>
            Gets or Sets the parameter max length (if needed).
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncFilterParameter.ToString">
            <summary>
            Returns the name of the filter parameter.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncFilterParameter.GetAllNamesProperties">
            <inheritdoc cref="M:Dotmim.Sync.SyncNamedItem`1.GetAllNamesProperties"/>
        </member>
        <member name="M:Dotmim.Sync.SyncFilterParameter.EqualsByProperties(Dotmim.Sync.SyncFilterParameter)">
            <inheritdoc cref="M:Dotmim.Sync.SyncNamedItem`1.EqualsByProperties(`0)"/>
        </member>
        <member name="T:Dotmim.Sync.SyncFilterParameters">
            <summary>
            Sync filter parameters collection.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncFilterParameters.InnerCollection">
            <summary>
            Gets or sets exposing the InnerCollection for serialization purpose.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncFilterParameters.Schema">
            <summary>
            Gets filter's schema.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncFilterParameters.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Dotmim.Sync.SyncFilterParameters"/> class.
            Create a default collection for SerializersFactory.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncFilterParameters.#ctor(Dotmim.Sync.SyncSet)">
            <summary>
            Initializes a new instance of the <see cref="T:Dotmim.Sync.SyncFilterParameters"/> class.
            Create a new collection of tables for a SyncSchema.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncFilterParameters.EnsureFilters(Dotmim.Sync.SyncSet)">
            <summary>
            Since we don't serializer the reference to the schema, this method will reaffect the correct schema.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncFilterParameters.Add(Dotmim.Sync.SyncFilterParameter)">
            <summary>
            Add a new filter.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncFilterParameters.Item(System.String)">
            <summary>
            Get a table by its name.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncFilterParameters.Clear">
            <summary>
            Clear.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncFilterParameters.Count">
            <summary>
            Gets get the count of filters.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncFilterParameters.IsReadOnly">
            <summary>
            Gets a value indicating whether the collection is read-only.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncFilterParameters.System#Collections#Generic#IList{Dotmim#Sync#SyncFilterParameter}#Item(System.Int32)">
            <summary>
            Gets or sets the filter at the specified index.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncFilterParameters.Item(System.Int32)">
            <summary>
            Gets or sets the filter at the specified index.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncFilterParameters.Insert(System.Int32,Dotmim.Sync.SyncFilterParameter)">
            <summary>
            Insert a filter at the specified index.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncFilterParameters.Remove(Dotmim.Sync.SyncFilterParameter)">
            <summary>
            Remove a filter.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncFilterParameters.Contains(Dotmim.Sync.SyncFilterParameter)">
            <summary>
            Check if the collection contains a filter.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncFilterParameters.CopyTo(Dotmim.Sync.SyncFilterParameter[],System.Int32)">
            <summary>
            Copy the collection to an array.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncFilterParameters.IndexOf(Dotmim.Sync.SyncFilterParameter)">
            <summary>
            Get the index of a filter.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncFilterParameters.RemoveAt(System.Int32)">
            <summary>
            Remove a filter at the specified index.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncFilterParameters.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Get the enumerator.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncFilterParameters.GetEnumerator">
            <summary>
            Get the enumerator.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncFilterParameters.ToString">
            <summary>
            Returns the name of the filter.
            </summary>
        </member>
        <member name="T:Dotmim.Sync.SyncFilters">
            <summary>
            Sync filters collection.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncFilters.InnerCollection">
            <summary>
            Gets or sets exposing the InnerCollection for serialization purpose.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncFilters.Schema">
            <summary>
            Gets filter's schema.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncFilters.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Dotmim.Sync.SyncFilters"/> class.
            Create a default collection for SerializersFactory.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncFilters.#ctor(Dotmim.Sync.SyncSet)">
            <summary>
            Initializes a new instance of the <see cref="T:Dotmim.Sync.SyncFilters"/> class.
            Create a new collection of tables for a SyncSchema.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncFilters.EnsureFilters(Dotmim.Sync.SyncSet)">
            <summary>
            Since we don't serializer the reference to the schema, this method will reaffect the correct schema.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncFilters.Add(Dotmim.Sync.SyncFilter)">
            <summary>
            Add a new filter.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncFilters.Add(Dotmim.Sync.SetupFilter)">
            <summary>
            Add a new filter.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncFilters.Add(System.String,System.String,System.String)">
            <summary>
            Add a new filter.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncFilters.Clear">
            <summary>
            Clear.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncFilters.Count">
            <summary>
            Gets the count of filters.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncFilters.IsReadOnly">
            <summary>
            Gets a value indicating whether the collection is read-only.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncFilters.Item(System.Int32)">
            <summary>
            Gets or sets the filter at the specified index.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncFilters.Insert(System.Int32,Dotmim.Sync.SyncFilter)">
            <summary>
            Insert a filter at the specified index.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncFilters.Remove(Dotmim.Sync.SyncFilter)">
            <summary>
            Remove a filter.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncFilters.Contains(Dotmim.Sync.SyncFilter)">
            <summary>
            Check if the collection contains a filter.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncFilters.CopyTo(Dotmim.Sync.SyncFilter[],System.Int32)">
            <summary>
            Copy the collection to an array.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncFilters.IndexOf(Dotmim.Sync.SyncFilter)">
            <summary>
            Get the index of a filter.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncFilters.RemoveAt(System.Int32)">
            <summary>
            Remove a filter at the specified index.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncFilters.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets the enumerator.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncFilters.GetEnumerator">
            <summary>
            Gets the enumerator.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncFilters.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
        </member>
        <member name="T:Dotmim.Sync.SyncFilterWhereSideItem">
            <summary>
            SyncFilterWhereSideItem represents a filter where side item.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncFilterWhereSideItem.ColumnName">
            <summary>
            Gets or sets the column name.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncFilterWhereSideItem.TableName">
            <summary>
            Gets or sets the table name.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncFilterWhereSideItem.SchemaName">
            <summary>
            Gets or Sets the schema name.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncFilterWhereSideItem.ParameterName">
            <summary>
            Gets or sets the parameter name.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncFilterWhereSideItem.Schema">
            <summary>
            Gets or sets the ShemaTable's SyncSchema.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncFilterWhereSideItem.EnsureFilterWhereSideItem(Dotmim.Sync.SyncSet)">
            <summary>
            Ensure filter parameter as the correct schema (since the property is not serialized).
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncFilterWhereSideItem.GetAllNamesProperties">
            <inheritdoc cref="M:Dotmim.Sync.SyncNamedItem`1.GetAllNamesProperties"/>
        </member>
        <member name="T:Dotmim.Sync.SyncFilterWhereSideItems">
            <summary>
            Sync filters where side collection.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncFilterWhereSideItems.InnerCollection">
            <summary>
            Gets or sets exposing the InnerCollection for serialization purpose.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncFilterWhereSideItems.Schema">
            <summary>
            Gets filter's schema.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncFilterWhereSideItems.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Dotmim.Sync.SyncFilterWhereSideItems"/> class.
            Create a default collection for SerializersFactory.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncFilterWhereSideItems.#ctor(Dotmim.Sync.SyncSet)">
            <summary>
            Initializes a new instance of the <see cref="T:Dotmim.Sync.SyncFilterWhereSideItems"/> class.
            Create a new collection of tables for a SyncSchema.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncFilterWhereSideItems.EnsureFilters(Dotmim.Sync.SyncSet)">
            <summary>
            Since we don't serializer the reference to the schema, this method will reaffect the correct schema.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncFilterWhereSideItems.Add(Dotmim.Sync.SyncFilterWhereSideItem)">
            <summary>
            Add a new filter.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncFilterWhereSideItems.Clear">
            <summary>
            Clear.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncFilterWhereSideItems.Count">
            <summary>
            Gets get the count of filters.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncFilterWhereSideItems.IsReadOnly">
            <summary>
            Gets a value indicating whether the collection is read-only.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncFilterWhereSideItems.Item(System.Int32)">
            <summary>
            Get a table by its index.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncFilterWhereSideItems.Insert(System.Int32,Dotmim.Sync.SyncFilterWhereSideItem)">
            <summary>
            Insert a new filter at the specified index.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncFilterWhereSideItems.Remove(Dotmim.Sync.SyncFilterWhereSideItem)">
            <summary>
            Remove a filter from the collection.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncFilterWhereSideItems.Contains(Dotmim.Sync.SyncFilterWhereSideItem)">
            <summary>
            Check if the collection contains a filter.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncFilterWhereSideItems.CopyTo(Dotmim.Sync.SyncFilterWhereSideItem[],System.Int32)">
            <summary>
            Copy the collection to an array.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncFilterWhereSideItems.IndexOf(Dotmim.Sync.SyncFilterWhereSideItem)">
            <summary>
            Get the index of a filter.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncFilterWhereSideItems.RemoveAt(System.Int32)">
            <summary>
            Remove a filter at the specified index.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncFilterWhereSideItems.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets the enumerator.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncFilterWhereSideItems.GetEnumerator">
            <summary>
            Gets the enumerator.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncFilterWhereSideItems.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
        </member>
        <member name="T:Dotmim.Sync.SyncNamedItem`1">
            <summary>
            Based object that can be compared by name or by properties.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncNamedItem`1.GetAllNamesProperties">
            <summary>
            Get all comparable names properties to determine if two instances are identifed as "same" based on their name properties.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncNamedItem`1.EqualsByName(`0)">
            <summary>
            Gets a true boolean if other instance has the same name, defined by properties marked as names.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncNamedItem`1.EqualsByProperties(`0)">
            <summary>
            Gets a true boolean if other instance is defined as same based on all properties
            By default, if not overriden, check the names properties.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncNamedItem`1.Equals(`0)">
            <summary>
            Gets a true boolean if other instance is defined as same based on all properties.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncNamedItem`1.Equals(System.Object)">
            <summary>
            Gets a true boolean if other instance is defined as same based on all properties.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncNamedItem`1.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
        </member>
        <member name="T:Dotmim.Sync.SyncRelation">
            <summary>
            Represents a relation between two tables.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncRelation.RelationName">
            <summary>
            Gets or Sets the relation name.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncRelation.ParentKeys">
            <summary>
            Gets or Sets a list of columns that represent the parent key.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncRelation.Keys">
            <summary>
            Gets or Sets a list of columns that represent the parent key.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncRelation.Schema">
            <summary>
            Gets or sets the ShemaFilter's SyncSchema.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncRelation.#ctor">
            <inheritdoc cref="T:Dotmim.Sync.SyncRelation"/>
        </member>
        <member name="M:Dotmim.Sync.SyncRelation.#ctor(System.String,Dotmim.Sync.SyncSet)">
            <inheritdoc cref="T:Dotmim.Sync.SyncRelation"/>
        </member>
        <member name="M:Dotmim.Sync.SyncRelation.#ctor(System.String,System.Collections.Generic.IList{Dotmim.Sync.SyncColumnIdentifier},System.Collections.Generic.IList{Dotmim.Sync.SyncColumnIdentifier},Dotmim.Sync.SyncSet)">
            <inheritdoc cref="T:Dotmim.Sync.SyncRelation"/>
        </member>
        <member name="M:Dotmim.Sync.SyncRelation.Clone">
            <summary>
            Return a clone of this relation.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncRelation.Clear">
            <summary>
            Clear.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncRelation.EnsureRelation(Dotmim.Sync.SyncSet)">
            <summary>
            Ensure this relation has correct Schema reference.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncRelation.GetParentTable">
            <summary>
            Get parent table.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncRelation.GetTable">
            <summary>
            Get child table.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncRelation.GetAllNamesProperties">
            <inheritdoc cref="M:Dotmim.Sync.SyncNamedItem`1.GetAllNamesProperties"/>
        </member>
        <member name="M:Dotmim.Sync.SyncRelation.EqualsByProperties(Dotmim.Sync.SyncRelation)">
            <inheritdoc cref="M:Dotmim.Sync.SyncNamedItem`1.EqualsByProperties(`0)"/>
        </member>
        <member name="T:Dotmim.Sync.SyncRelations">
            <summary>
            Sync relations collection.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncRelations.InnerCollection">
            <summary>
            Gets or sets exposing the InnerCollection for serialization purpose.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncRelations.Schema">
            <summary>
            Gets relation's schema.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncRelations.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Dotmim.Sync.SyncRelations"/> class.
            Create a default collection for SerializersFactory.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncRelations.#ctor(Dotmim.Sync.SyncSet)">
            <summary>
            Initializes a new instance of the <see cref="T:Dotmim.Sync.SyncRelations"/> class.
            Create a new collection of tables for a SyncSchema.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncRelations.EnsureRelations(Dotmim.Sync.SyncSet)">
            <summary>
            Since we don't serializer the reference to the schema, this method will reaffect the correct schema.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncRelations.Add(Dotmim.Sync.SyncRelation)">
            <summary>
            Add a new table to the Schema table collection.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncRelations.Clear">
            <summary>
            Clear all the relations.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncRelations.Count">
            <summary>
            Gets the count of relations.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncRelations.IsReadOnly">
            <summary>
            Gets a value indicating whether the collection is read-only.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncRelations.Remove(Dotmim.Sync.SyncRelation)">
            <summary>
            Remove a relation from the collection.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncRelations.Contains(Dotmim.Sync.SyncRelation)">
            <summary>
            Check if the collection contains a relation.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncRelations.CopyTo(Dotmim.Sync.SyncRelation[],System.Int32)">
            <summary>
            Copy the collection to an array.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncRelations.IndexOf(Dotmim.Sync.SyncRelation)">
            <summary>
            Get the index of a relation.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncRelations.RemoveAt(System.Int32)">
            <summary>
            Remove a relation at the specified index.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncRelations.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Get the enumerator.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncRelations.GetEnumerator">
            <summary>
            Get the enumerator.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncRelations.Item(System.Int32)">
            <summary>
            Gets or sets the relation at the specified index.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncRelations.Insert(System.Int32,Dotmim.Sync.SyncRelation)">
            <summary>
            Insert a relation at the specified index.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncRelations.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
        </member>
        <member name="T:Dotmim.Sync.SyncRow">
            <summary>
            Represents a row in a table.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncRow.SchemaTable">
            <summary>
            Gets or Sets the row's table.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncRow.#ctor">
            <inheritdoc cref="T:Dotmim.Sync.SyncRow" />/>
        </member>
        <member name="M:Dotmim.Sync.SyncRow.#ctor(Dotmim.Sync.SyncTable,Dotmim.Sync.Enumerations.SyncRowState)">
            <inheritdoc cref="T:Dotmim.Sync.SyncRow" />/>
        </member>
        <member name="M:Dotmim.Sync.SyncRow.#ctor(Dotmim.Sync.SyncTable,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Dotmim.Sync.SyncRow"/> class.
            Add a new buffer row. This ctor does not make a copy.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncRow.RowState">
            <summary>
            Gets or sets the state of the row.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncRow.Length">
            <summary>
            Gets the row Length.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncRow.Item(System.Int32)">
            <summary>
            Get the value in the array that correspond to the column index given.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncRow.Item(System.String)">
            <summary>
            Get the value in the array that correspond to the column name given.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncRow.ToArray">
            <summary>
            Get the inner copy array.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncRow.Clear">
            <summary>
            Clear the data in the buffer.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncRow.ToString">
            <summary>
            ToString().
            </summary>
        </member>
        <member name="T:Dotmim.Sync.SyncRows">
            <summary>
            Represents a collection of rows.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncRows.#ctor(Dotmim.Sync.SyncTable)">
            <inheritdoc cref="T:Dotmim.Sync.SyncRows"/>
        </member>
        <member name="P:Dotmim.Sync.SyncRows.Table">
            <summary>
            Gets or sets the table associated with the rows.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncRows.GetRowByPrimaryKeys(Dotmim.Sync.SyncRow,System.Collections.Generic.IList{Dotmim.Sync.SyncRow},Dotmim.Sync.SyncTable)">
            <summary>
            Make a filter on primary keys.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncRows.GetConverter(System.Type)">
            <summary>
            Get type converter.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncRows.EnsureRows(Dotmim.Sync.SyncTable)">
            <summary>
            Since we don't serializer the reference to the schema, this method will reaffect the correct schema.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncRows.Add(System.Object[])">
            <summary>
            Add a new buffer row. Be careful, row should include state in first index.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncRows.AddRange(System.Collections.Generic.IEnumerable{System.Object[]})">
            <summary>
            Add rows. Be careful, row should include state in first index.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncRows.AddRange(System.Collections.Generic.IEnumerable{Dotmim.Sync.SyncRow})">
            <summary>
            Add syncrows. Be careful, row should include state in first index.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncRows.Add(Dotmim.Sync.SyncRow)">
            <summary>
            Add a new row to the collection.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncRows.Clear">
            <summary>
            Clear all rows.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncRows.Count">
            <summary>
            Gets the count of rows.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncRows.IsReadOnly">
            <summary>
            Gets a value indicating whether the collection is read-only.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncRows.Item(System.Int32)">
            <summary>
            Get a row by its index.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncRows.Remove(Dotmim.Sync.SyncRow)">
            <summary>
            Remove a row from the collection.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncRows.Contains(Dotmim.Sync.SyncRow)">
            <summary>
            Check if the collection contains a row.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncRows.CopyTo(Dotmim.Sync.SyncRow[],System.Int32)">
            <summary>
            Copy the collection to an array.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncRows.IndexOf(Dotmim.Sync.SyncRow)">
            <summary>
            Gets the index of a row.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncRows.RemoveAt(System.Int32)">
            <summary>
            Remove a row at the specified index.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncRows.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncRows.Insert(System.Int32,Dotmim.Sync.SyncRow)">
            <summary>
            Insert a row at the specified index.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncRows.GetEnumerator">
            <summary>
            Gets the enumerator.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncRows.System#Collections#Generic#IEnumerable{Dotmim#Sync#SyncRow}#GetEnumerator">
            <summary>
            Gets the enumerator.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncRows.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets the enumerator.
            </summary>
        </member>
        <member name="T:Dotmim.Sync.SyncSet">
            <summary>
            Represents a Sync Set.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncSet.Tables">
            <summary>
            Gets or Sets the sync set tables.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncSet.Relations">
            <summary>
            Gets or Sets an array of every SchemaRelation belong to this Schema.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncSet.Filters">
            <summary>
            Gets or sets filters applied on tables.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncSet.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Dotmim.Sync.SyncSet"/> class.
            Create a new SyncSet, empty.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncSet.#ctor(Dotmim.Sync.SyncSetup)">
            <summary>
            Initializes a new instance of the <see cref="T:Dotmim.Sync.SyncSet"/> class.
            Creates a new SyncSet based on a Sync setup (containing tables).
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncSet.EnsureSchema">
            <summary>
            Ensure all tables, filters and relations has the correct reference to this schema.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncSet.Clone(System.Boolean)">
            <summary>
            Clone the SyncSet schema (without data).
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncSet.Clear">
            <summary>
            Clear the SyncSet.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncSet.EqualsByProperties(Dotmim.Sync.SyncSet)">
            <inheritdoc cref="M:Dotmim.Sync.SyncNamedItem`1.EqualsByProperties(`0)"/>
        </member>
        <member name="M:Dotmim.Sync.SyncSet.ToString">
            <summary>
            Returns a string that represents the current SyncSet.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncSet.HasTables">
            <summary>
            Gets a value indicating whether check if Schema has tables.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncSet.HasColumns">
            <summary>
            Gets a value indicating whether check if Schema has at least one table with columns.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncSet.HasRows">
            <summary>
            Gets a value indicating whether gets if at least one table as at least one row.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncSet.Equals(Dotmim.Sync.SyncSet)">
            <summary>
            Gets a true boolean if other instance is defined as same based on all properties.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncSet.Equals(System.Object)">
            <summary>
            Gets a true boolean if other instance is defined as same based on all properties.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncSet.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
        </member>
        <member name="T:Dotmim.Sync.SyncTable">
            <summary>
            Represents a table schema.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncTable.TableName">
            <summary>
            Gets or sets the name of the table that the DmTableSurrogate object represents.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncTable.SchemaName">
            <summary>
            Gets or sets get or Set the schema used for the DmTableSurrogate.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncTable.OriginalProvider">
            <summary>
            Gets or Sets the original provider (SqlServer, MySql, Sqlite, Oracle, PostgreSQL).
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncTable.Columns">
            <summary>
            Gets or Sets the table columns.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncTable.PrimaryKeys">
            <summary>
            Gets or Sets the table primary keys.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncTable.Rows">
            <summary>
            Gets the ShemaTable's rows.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncTable.Schema">
            <summary>
            Gets or sets the ShemaTable's SyncSchema.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncTable.#ctor">
            <inheritdoc cref="T:Dotmim.Sync.SyncTable"/>
        </member>
        <member name="M:Dotmim.Sync.SyncTable.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Dotmim.Sync.SyncTable"/> class.
            Create a new sync table with the given name.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncTable.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Dotmim.Sync.SyncTable"/> class.
            Create a new sync table with the given name.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncTable.EnsureTable(Dotmim.Sync.SyncSet)">
            <summary>
            Ensure table as the correct schema (since the property is not serialized.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncTable.Clear">
            <summary>
            Clear the Table's rows.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncTable.Clone">
            <summary>
            Clone the table structure (without rows).
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncTable.NewRow(Dotmim.Sync.Enumerations.SyncRowState)">
            <summary>
            Create a new row.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncTable.GetRelations">
            <summary>
            Returns all the relations where the current table is the child table.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncTable.GetFullName">
            <summary>
            Gets the full name of the table, based on schema name + "." + table name (if schema name exists).
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncTable.GetMutableColumns(System.Boolean,System.Boolean)">
            <summary>
            Get all columns that can be updated.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncTable.GetPrimaryKeysColumns">
            <summary>
            Get all columns that are Primary keys, based on the names we have in PrimariKeys property.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncTable.IsPrimaryKey(Dotmim.Sync.SyncColumn)">
            <summary>
            Returns a value indicating whether the column is a primary key.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncTable.GetFilter">
            <summary>
            Get all filters for a selected sync table.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncTable.Load(System.Data.Common.DbDataReader)">
            <summary>
            Load rows in the sync table from a DbDataReader.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncTable.IsPrimaryKey(System.String)">
            <summary>
            Check if a column name is a primary key.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncTable.HasAutoIncrementColumns">
            <summary>
            Gets a value indicating whether gets a value returning if the SchemaTable contains an auto increment column.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncTable.HasRows">
            <summary>
            Gets a value indicating whether gets a value indicating if the synctable has rows.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncTable.ToString">
            <summary>
            Returns a string that represents the current SyncTable.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncTable.GetAllNamesProperties">
            <inheritdoc cref="M:Dotmim.Sync.SyncNamedItem`1.GetAllNamesProperties"/>
        </member>
        <member name="M:Dotmim.Sync.SyncTable.EqualsByProperties(Dotmim.Sync.SyncTable)">
            <inheritdoc cref="M:Dotmim.Sync.SyncNamedItem`1.EqualsByProperties(`0)"/>
        </member>
        <member name="T:Dotmim.Sync.SyncTables">
            <summary>
            Represents a collection of tables used by the SyncSet.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncTables.InnerCollection">
            <summary>
            Gets or sets exposing the InnerCollection for serialization purpose.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncTables.Schema">
            <summary>
            Gets table's schema.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncTables.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Dotmim.Sync.SyncTables"/> class.
            Create a default collection for SerializersFactory.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncTables.#ctor(Dotmim.Sync.SyncSet)">
            <summary>
            Initializes a new instance of the <see cref="T:Dotmim.Sync.SyncTables"/> class.
            Create a new collection of tables for a SyncSchema.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncTables.EnsureTables(Dotmim.Sync.SyncSet)">
            <summary>
            Since we don't serializer the reference to the schema, this method will reaffect the correct schema.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncTables.Item(System.String)">
            <summary>
            Get a table by its name.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncTables.Item(System.String,System.String)">
            <summary>
            Get a table by its name.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncTables.Add(Dotmim.Sync.SyncTable)">
            <summary>
            Add a new table to the Schema table collection.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncTables.Add(System.String)">
            <summary>
            Add a table, by its name. Be careful, can contains schema name.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncTables.Add(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Add some tables to ContainerSet Tables property.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncTables.Clear">
            <summary>
            Clear all the Tables.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncTables.Count">
            <summary>
            Gets get the count of tables in the collection.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncTables.IsReadOnly">
            <summary>
            Gets a value indicating whether gets if the collection is readonly.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncTables.Item(System.Int32)">
            <summary>
            Get the index of a table in the collection.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncTables.Remove(Dotmim.Sync.SyncTable)">
            <summary>
            Remove a table from the collection.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncTables.Contains(Dotmim.Sync.SyncTable)">
            <summary>
            Check if the collection contains a table.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncTables.CopyTo(Dotmim.Sync.SyncTable[],System.Int32)">
            <summary>
            Copy the collection to an array.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncTables.IndexOf(Dotmim.Sync.SyncTable)">
            <summary>
            Get the index of a table in the collection.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncTables.RemoveAt(System.Int32)">
            <summary>
            Remove a table at a specific index.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncTables.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Get the enumerator for the collection.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncTables.GetEnumerator">
            <summary>
            Get the enumerator for the collection.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncTables.Insert(System.Int32,Dotmim.Sync.SyncTable)">
            <summary>
            Insert a table at a specific index.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncTables.ToString">
            <summary>
            Return the collection as a string representing the tables count.
            </summary>
        </member>
        <member name="T:Dotmim.Sync.SyncAgent">
            <summary>
            Sync agent. It's the sync orchestrator
            Knows both the Sync Server provider and the Sync Client provider.
            </summary>
            <summary>
            Sync agent. It's the sync orchestrator
            Knows both the Sync Server provider and the Sync Client provider.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncAgent.#ctor(Dotmim.Sync.CoreProvider,Dotmim.Sync.CoreProvider,Dotmim.Sync.SyncOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Dotmim.Sync.SyncAgent"/> class.
            Creates a synchronization agent that will handle a full synchronization between a client and a server.
            </summary>
            <param name="clientProvider">Local Provider connecting to your client database.</param>
            <param name="serverProvider">Local Provider connecting to your server database.</param>
            <param name="options">Sync Options defining options used by your local and remote provider.</param>
        </member>
        <member name="M:Dotmim.Sync.SyncAgent.#ctor(Dotmim.Sync.CoreProvider,Dotmim.Sync.RemoteOrchestrator,Dotmim.Sync.SyncOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Dotmim.Sync.SyncAgent"/> class.
            Creates a synchronization agent that will handle a full synchronization between a client and a server.
            </summary>
            <param name="clientProvider">local provider to your client database.</param>
            <param name="remoteOrchestrator">Remote Orchestrator already configured with a SyncProvider.</param>
            <param name="options">Sync Options defining options used by your local provider (and remote provider if type of remoteOrchestrator is not a WebRemoteOrchestrator).</param>
        </member>
        <member name="M:Dotmim.Sync.SyncAgent.#ctor(Dotmim.Sync.LocalOrchestrator,Dotmim.Sync.RemoteOrchestrator)">
            <summary>
            Initializes a new instance of the <see cref="T:Dotmim.Sync.SyncAgent"/> class.
            Creates a synchronization agent that will handle a full synchronization between a client and a server.
            </summary>
            <param name="localOrchestrator">Local Orchestrator already configured with a SyncProvider.</param>
            <param name="remoteOrchestrator">Remote Orchestrator already configured with a SyncProvider.</param>
        </member>
        <member name="M:Dotmim.Sync.SyncAgent.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Dotmim.Sync.SyncAgent"/> class.
            </summary>
        </member>
        <member name="E:Dotmim.Sync.SyncAgent.SessionStateChanged">
            <summary>
            Occurs when sync is starting, ending
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncAgent.SessionState">
            <summary>
            Gets or sets defines the state that a synchronization session is in.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncAgent.LocalOrchestrator">
            <summary>
            Gets or Sets the local orchestrator.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncAgent.RemoteOrchestrator">
            <summary>
            Gets or sets get or Sets the remote orchestrator.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncAgent.Options">
            <summary>
            Gets the options used on this sync process.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncAgent.OnApplyChangesConflictOccured(System.Action{Dotmim.Sync.ApplyChangesConflictOccuredArgs})">
            <summary>
            Shortcut to Apply changed conflict occured if remote orchestrator supports it.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncAgent.OnApplyChangesConflictOccured(System.Func{Dotmim.Sync.ApplyChangesConflictOccuredArgs,System.Threading.Tasks.Task})">
            <summary>
            Shortcut to Apply changed conflict occured if remote orchestrator supports it.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncAgent.SynchronizeAsync(System.String,Dotmim.Sync.SyncSetup,Dotmim.Sync.Enumerations.SyncType,Dotmim.Sync.SyncParameters,System.IProgress{Dotmim.Sync.ProgressArgs},System.Threading.CancellationToken)">
            <summary>
            Launch a synchronization with the specified mode.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncAgent.ToString">
            <summary>
            Gets the string representation of the SyncAgent, by outputing the local and remote orchestrator names.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncAgent.EnsureOptionsAndSetupInstances">
            <summary>
            Ensure Options and Setup instances are the same on local orchestrator and remote orchestrator.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncAgent.LockSync">
            <summary>
            Lock sync to prevent multi call to sync at the same time.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncAgent.UnlockSync">
            <summary>
            Unlock sync to be able to launch a new sync.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncAgent.SynchronizeAsync(System.IProgress{Dotmim.Sync.ProgressArgs})">
            <summary>
            Launch a Synchronization based on scope DefaultScope.
            </summary>
            <param name="progress">IProgress instance to get a progression status during sync.</param>
            <returns>Computed sync results.</returns>
        </member>
        <member name="M:Dotmim.Sync.SyncAgent.SynchronizeAsync(Dotmim.Sync.SyncParameters,System.IProgress{Dotmim.Sync.ProgressArgs})">
            <summary>
            Launch a Synchronization based on scope DefaultScope.
            </summary>
            <param name="parameters">Parameters values for each of your setup filters.</param>
            <param name="progress">IProgress instance to get a progression status during sync.</param>
            <returns>Computed sync results.</returns>
        </member>
        <member name="M:Dotmim.Sync.SyncAgent.SynchronizeAsync(Dotmim.Sync.Enumerations.SyncType,System.IProgress{Dotmim.Sync.ProgressArgs})">
            <summary>
            Launch a Synchronization based on scope DefaultScope.
            </summary>
            <param name="syncType">Synchronization mode: Normal, Reinitialize or ReinitializeWithUpload.</param>
            <param name="progress">IProgress instance to get a progression status during sync.</param>
            <returns>Computed sync results.</returns>
        </member>
        <member name="M:Dotmim.Sync.SyncAgent.SynchronizeAsync(Dotmim.Sync.Enumerations.SyncType,Dotmim.Sync.SyncParameters,System.IProgress{Dotmim.Sync.ProgressArgs})">
            <summary>
            Launch a Synchronization based on scope DefaultScope.
            </summary>
            <param name="syncType">Synchronization mode: Normal, Reinitialize or ReinitializeWithUpload.</param>
            <param name="parameters">Parameters values for each of your setup filters.</param>
            <param name="progress">IProgress instance to get a progression status during sync.</param>
            <returns>Computed sync results.</returns>
        </member>
        <member name="M:Dotmim.Sync.SyncAgent.SynchronizeAsync(System.String,System.IProgress{Dotmim.Sync.ProgressArgs})">
            <summary>
            Launch a Synchronization based on a named scope.
            </summary>
            <param name="scopeName">Named scope.</param>
            <param name="progress">IProgress instance to get a progression status during sync.</param>
            <returns>Computed sync results.</returns>
        </member>
        <member name="M:Dotmim.Sync.SyncAgent.SynchronizeAsync(System.String,Dotmim.Sync.SyncParameters,System.IProgress{Dotmim.Sync.ProgressArgs})">
            <summary>
            Launch a Synchronization based on a named scope.
            </summary>
            <param name="scopeName">Named scope.</param>
            <param name="parameters">Parameters values for each of your setup filters.</param>
            <param name="progress">IProgress instance to get a progression status during sync.</param>
            <returns>Computed sync results.</returns>
        </member>
        <member name="M:Dotmim.Sync.SyncAgent.SynchronizeAsync(System.String,Dotmim.Sync.Enumerations.SyncType,System.IProgress{Dotmim.Sync.ProgressArgs})">
            <summary>
            Launch a Synchronization based on a named scope.
            </summary>
            <param name="scopeName">Named scope.</param>
            <param name="syncType">Synchronization mode: Normal, Reinitialize or ReinitializeWithUpload.</param>
            <param name="progress">IProgress instance to get a progression status during sync.</param>
            <returns>Computed sync results.</returns>
        </member>
        <member name="M:Dotmim.Sync.SyncAgent.SynchronizeAsync(System.String,Dotmim.Sync.Enumerations.SyncType,Dotmim.Sync.SyncParameters,System.IProgress{Dotmim.Sync.ProgressArgs})">
            <summary>
            Launch a Synchronization based on a named scope.
            </summary>
            <param name="scopeName">Named scope.</param>
            <param name="syncType">Synchronization mode: Normal, Reinitialize or ReinitializeWithUpload.</param>
            <param name="parameters">Parameters values for each of your setup filters.</param>
            <param name="progress">IProgress instance to get a progression status during sync.</param>
            <returns>Computed sync results.</returns>
        </member>
        <member name="M:Dotmim.Sync.SyncAgent.SynchronizeAsync(System.String[],System.IProgress{Dotmim.Sync.ProgressArgs})">
            <summary>
            Launch a Synchronization based on scope DefaultScope.
            </summary>
            <param name="tables">Tables list to synchronize.</param>
            <param name="progress">IProgress instance to get a progression status during sync.</param>
            <returns>Computed sync results.</returns>
        </member>
        <member name="M:Dotmim.Sync.SyncAgent.SynchronizeAsync(System.String[],Dotmim.Sync.SyncParameters,System.IProgress{Dotmim.Sync.ProgressArgs})">
            <summary>
            Launch a Synchronization based on scope DefaultScope.
            </summary>
            <param name="tables">Tables list to synchronize.</param>
            <param name="parameters">Parameters values for each of your setup filters.</param>
            <param name="progress">IProgress instance to get a progression status during sync.</param>
            <returns>Computed sync results.</returns>
        </member>
        <member name="M:Dotmim.Sync.SyncAgent.SynchronizeAsync(System.String[],Dotmim.Sync.Enumerations.SyncType,System.IProgress{Dotmim.Sync.ProgressArgs})">
            <summary>
            Launch a Synchronization based on scope DefaultScope.
            </summary>
            <param name="tables">Tables list to synchronize.</param>
            <param name="syncType">Synchronization mode: Normal, Reinitialize or ReinitializeWithUpload.</param>
            <param name="progress">IProgress instance to get a progression status during sync.</param>
            <returns>Computed sync results.</returns>
        </member>
        <member name="M:Dotmim.Sync.SyncAgent.SynchronizeAsync(System.String[],Dotmim.Sync.Enumerations.SyncType,Dotmim.Sync.SyncParameters,System.IProgress{Dotmim.Sync.ProgressArgs})">
            <summary>
            Launch a Synchronization based on scope DefaultScope.
            </summary>
            <param name="tables">Tables list to synchronize.</param>
            <param name="syncType">Synchronization mode: Normal, Reinitialize or ReinitializeWithUpload.</param>
            <param name="parameters">Parameters values for each of your setup filters.</param>
            <param name="progress">IProgress instance to get a progression status during sync.</param>
            <returns>Computed sync results.</returns>
        </member>
        <member name="M:Dotmim.Sync.SyncAgent.SynchronizeAsync(System.String,System.String[],System.IProgress{Dotmim.Sync.ProgressArgs})">
            <summary>
            Launch a Synchronization based on a named scope.
            </summary>
            <param name="scopeName">Named scope.</param>
            <param name="tables">Tables list to synchronize.</param>
            <param name="progress">IProgress instance to get a progression status during sync.</param>
            <returns>Computed sync results.</returns>
        </member>
        <member name="M:Dotmim.Sync.SyncAgent.SynchronizeAsync(System.String,System.String[],Dotmim.Sync.SyncParameters,System.IProgress{Dotmim.Sync.ProgressArgs})">
            <summary>
            Launch a Synchronization based on a named scope.
            </summary>
            <param name="scopeName">Named scope.</param>
            <param name="tables">Tables list to synchronize.</param>
            <param name="parameters">Parameters values for each of your setup filters.</param>
            <param name="progress">IProgress instance to get a progression status during sync.</param>
            <returns>Computed sync results.</returns>
        </member>
        <member name="M:Dotmim.Sync.SyncAgent.SynchronizeAsync(System.String,System.String[],Dotmim.Sync.Enumerations.SyncType,System.IProgress{Dotmim.Sync.ProgressArgs})">
            <summary>
            Launch a Synchronization based on a named scope.
            </summary>
            <param name="scopeName">Named scope.</param>
            <param name="tables">Tables list to synchronize.</param>
            <param name="syncType">Synchronization mode: Normal, Reinitialize or ReinitializeWithUpload.</param>
            <param name="progress">IProgress instance to get a progression status during sync.</param>
            <returns>Computed sync results.</returns>
        </member>
        <member name="M:Dotmim.Sync.SyncAgent.SynchronizeAsync(System.String,System.String[],Dotmim.Sync.Enumerations.SyncType,Dotmim.Sync.SyncParameters,System.IProgress{Dotmim.Sync.ProgressArgs})">
            <summary>
            Launch a Synchronization based on a named scope.
            </summary>
            <param name="scopeName">Named scope.</param>
            <param name="tables">Tables list to synchronize.</param>
            <param name="syncType">Synchronization mode: Normal, Reinitialize or ReinitializeWithUpload.</param>
            <param name="parameters">Parameters values for each of your setup filters.</param>
            <param name="progress">IProgress instance to get a progression status during sync.</param>
            <returns>Computed sync results.</returns>
        </member>
        <member name="M:Dotmim.Sync.SyncAgent.SynchronizeAsync(Dotmim.Sync.SyncSetup,System.IProgress{Dotmim.Sync.ProgressArgs})">
            <summary>
            Launch a Synchronization based on scope DefaultScope.
            </summary>
            <param name="setup">Setup instance containing the table list and optionnally columns.</param>
            <param name="progress">IProgress instance to get a progression status during sync.</param>
            <returns>Computed sync results.</returns>
        </member>
        <member name="M:Dotmim.Sync.SyncAgent.SynchronizeAsync(Dotmim.Sync.SyncSetup,Dotmim.Sync.SyncParameters,System.IProgress{Dotmim.Sync.ProgressArgs})">
            <summary>
            Launch a Synchronization based on scope DefaultScope.
            </summary>
            <param name="setup">Setup instance containing the table list and optionnally columns.</param>
            <param name="parameters">Parameters values for each of your setup filters.</param>
            <param name="progress">IProgress instance to get a progression status during sync.</param>
            <returns>Computed sync results.</returns>
        </member>
        <member name="M:Dotmim.Sync.SyncAgent.SynchronizeAsync(Dotmim.Sync.SyncSetup,Dotmim.Sync.Enumerations.SyncType,System.IProgress{Dotmim.Sync.ProgressArgs})">
            <summary>
            Launch a Synchronization based on scope DefaultScope.
            </summary>
            <param name="setup">Setup instance containing the table list and optionnally columns.</param>
            <param name="syncType">Synchronization mode: Normal, Reinitialize or ReinitializeWithUpload.</param>
            <param name="progress">IProgress instance to get a progression status during sync.</param>
            <returns>Computed sync results.</returns>
        </member>
        <member name="M:Dotmim.Sync.SyncAgent.SynchronizeAsync(Dotmim.Sync.SyncSetup,Dotmim.Sync.Enumerations.SyncType,Dotmim.Sync.SyncParameters,System.IProgress{Dotmim.Sync.ProgressArgs})">
            <summary>
            Launch a Synchronization based on scope DefaultScope.
            </summary>
            <param name="setup">Setup instance containing the table list and optionnally columns.</param>
            <param name="syncType">Synchronization mode: Normal, Reinitialize or ReinitializeWithUpload.</param>
            <param name="parameters">Parameters values for each of your setup filters.</param>
            <param name="progress">IProgress instance to get a progression status during sync.</param>
            <returns>Computed sync results.</returns>
        </member>
        <member name="M:Dotmim.Sync.SyncAgent.SynchronizeAsync(System.String,Dotmim.Sync.SyncSetup,System.IProgress{Dotmim.Sync.ProgressArgs})">
            <summary>
            Launch a Synchronization based on a named scope.
            </summary>
            <param name="scopeName">Named scope.</param>
            <param name="setup">Setup instance containing the table list and optionnally columns.</param>
            <param name="progress">IProgress instance to get a progression status during sync.</param>
            <returns>Computed sync results.</returns>
        </member>
        <member name="M:Dotmim.Sync.SyncAgent.SynchronizeAsync(System.String,Dotmim.Sync.SyncSetup,Dotmim.Sync.SyncParameters,System.IProgress{Dotmim.Sync.ProgressArgs})">
            <summary>
            Launch a Synchronization based on a named scope.
            </summary>
            <param name="scopeName">Named scope.</param>
            <param name="setup">Setup instance containing the table list and optionnally columns.</param>
            <param name="parameters">Parameters values for each of your setup filters.</param>
            <param name="progress">IProgress instance to get a progression status during sync.</param>
            <returns>Computed sync results.</returns>
        </member>
        <member name="M:Dotmim.Sync.SyncAgent.SynchronizeAsync(System.String,Dotmim.Sync.SyncSetup,Dotmim.Sync.Enumerations.SyncType,System.IProgress{Dotmim.Sync.ProgressArgs})">
            <summary>
            Launch a Synchronization based on a named scope.
            </summary>
            <param name="scopeName">Named scope.</param>
            <param name="setup">Setup instance containing the table list and optionnally columns.</param>
            <param name="syncType">Synchronization mode: Normal, Reinitialize or ReinitializeWithUpload.</param>
            <param name="progress">IProgress instance to get a progression status during sync.</param>
            <returns>Computed sync results.</returns>
        </member>
        <member name="M:Dotmim.Sync.SyncAgent.SynchronizeAsync(System.String,Dotmim.Sync.SyncSetup,Dotmim.Sync.Enumerations.SyncType,Dotmim.Sync.SyncParameters,System.IProgress{Dotmim.Sync.ProgressArgs})">
            <summary>
            Launch a Synchronization based on a named scope.
            </summary>
            <param name="scopeName">Named scope.</param>
            <param name="setup">Setup instance containing the table list and optionnally columns.</param>
            <param name="syncType">Synchronization mode: Normal, Reinitialize or ReinitializeWithUpload.</param>
            <param name="parameters">Parameters values for each of your setup filters.</param>
            <param name="progress">IProgress instance to get a progression status during sync.</param>
            <returns>Computed sync results.</returns>
        </member>
        <member name="T:Dotmim.Sync.ClientSyncChanges">
            <summary>
            Client changes selected and server changes applied on client + stats.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.ClientSyncChanges.#ctor(System.Int64,Dotmim.Sync.Batch.BatchInfo,Dotmim.Sync.DatabaseChangesSelected,Dotmim.Sync.DatabaseChangesApplied)">
            <summary>
            Initializes a new instance of the <see cref="T:Dotmim.Sync.ClientSyncChanges"/> class.
            Client changes selected and server changes applied on client + stats.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.ClientSyncChanges.ClientTimestamp">
            <summary>
            Gets or sets the timestamp limit used to get the changes.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.ClientSyncChanges.ClientBatchInfo">
            <summary>
            Gets or sets the batches serialized locally with all changes. Is ThrowIfNull if called from GetEstimatedChanges.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.ClientSyncChanges.ClientChangesSelected">
            <summary>
            Gets or sets statistics about changes selected.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.ClientSyncChanges.ClientChangesApplied">
            <summary>
            Gets or sets the changes applied on client, plus failed rows.
            </summary>
        </member>
        <member name="T:Dotmim.Sync.ServerSyncChanges">
            <summary>
            Server changes selected and client changes applied on server + stats.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.ServerSyncChanges.#ctor(System.Int64,Dotmim.Sync.Batch.BatchInfo,Dotmim.Sync.DatabaseChangesSelected,Dotmim.Sync.DatabaseChangesApplied)">
            <summary>
            Initializes a new instance of the <see cref="T:Dotmim.Sync.ServerSyncChanges"/> class.
            Server changes selected and client changes applied on server + stats.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.ServerSyncChanges.RemoteClientTimestamp">
            <summary>
            Gets or sets the timestamp limit used to get the changes.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.ServerSyncChanges.ServerBatchInfo">
            <summary>
            Gets or sets the batches serialized locally with all changes.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.ServerSyncChanges.ServerChangesSelected">
            <summary>
            Gets or sets statistics about changes selected.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.ServerSyncChanges.ServerChangesApplied">
            <summary>
            Gets or sets server changes applied + failed applied rows.
            </summary>
        </member>
        <member name="T:Dotmim.Sync.SyncConflict">
            <summary>
            Represents a synchronization conflict at the row level.
            Conflict rule resolution is set on the server side.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncConflict.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Dotmim.Sync.SyncConflict"/> class by using default values.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncConflict.#ctor(Dotmim.Sync.Enumerations.ConflictType)">
            <summary>
            Initializes a new instance of the <see cref="T:Dotmim.Sync.SyncConflict"/> class by using conflict type and conflict stage parameters.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncConflict.LocalRow">
            <summary>
            Gets or sets the row that contains the conflicting row from the local database.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncConflict.RemoteRow">
            <summary>
            Gets or sets the row that contains the conflicting row from the remote database.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncConflict.Type">
            <summary>
            Gets or sets the ConflictType enumeration value that represents the type of synchronization conflict.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncConflict.AddLocalRow(Dotmim.Sync.SyncRow)">
            <summary>
            add a local row.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncConflict.AddRemoteRow(Dotmim.Sync.SyncRow)">
            <summary>
            add a remote row.
            </summary>
        </member>
        <member name="T:Dotmim.Sync.SyncContext">
            <summary>
            Context of the current Sync session
            Encapsulates data changes and metadata for a synchronization session.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncContext.#ctor(System.Guid,System.String,Dotmim.Sync.SyncParameters)">
            <summary>
            Initializes a new instance of the <see cref="T:Dotmim.Sync.SyncContext"/> class.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncContext.#ctor(System.Guid,Dotmim.Sync.ScopeInfoClient)">
            <summary>
            Initializes a new instance of the <see cref="T:Dotmim.Sync.SyncContext"/> class using scope name, parameters and client id from the scope info client.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncContext.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Dotmim.Sync.SyncContext"/> class.
            Used for serialization purpose.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncContext.SessionId">
            <summary>
            Gets or sets get or sets the current Session id, in progress.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncContext.ClientId">
            <summary>
            Gets or sets current Scope Info Id, in progress.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncContext.ScopeName">
            <summary>
            Gets or Sets the ScopeName for this sync session.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncContext.StartTime">
            <summary>
            Gets the time when a sync session started.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncContext.SyncType">
            <summary>
            Gets or sets the sync type used during this session. Can be : Normal, Reinitialize, ReinitializeWithUpload.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncContext.SyncWay">
            <summary>
            Gets or Sets the current Sync direction.
            When locally GetChanges and remote ApplyChanges, we are in Upload direction
            When remote GetChanges and locally ApplyChanges, we are in Download direction
            this Property is used to check SyncDirection on each table.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncContext.SyncStage">
            <summary>
            Gets or sets actual sync stage.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncContext.Parameters">
            <summary>
            Gets or sets get or Sets the Sync parameter to pass to Remote provider for filtering rows.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncContext.Hash">
            <summary>
            Gets get or Sets the Sync parameter to pass to Remote provider for filtering rows.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncContext.AdditionalProperties">
            <summary>
            Gets or sets get or Sets additional properties you want to use.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncContext.ProgressPercentage">
            <summary>
            Gets or Sets the current percentage progress overall.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncContext.CopyTo(Dotmim.Sync.SyncContext)">
            <summary>
            Copy local properties to another syncContext instance.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncContext.ToString">
            <summary>
            Get the result if sync session is ended.
            </summary>
        </member>
        <member name="T:Dotmim.Sync.SyncException">
            <summary>
            Exception.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Dotmim.Sync.SyncException"/> class.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Dotmim.Sync.SyncException"/>  class with a specified error message.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Dotmim.Sync.SyncException"/>  class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncException.#ctor(System.String,Dotmim.Sync.Enumerations.SyncStage)">
            <summary>
            Initializes a new instance of the <see cref="T:Dotmim.Sync.SyncException"/>  class with a specified error message and a reference to current sync stage.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncException.#ctor(System.Exception,Dotmim.Sync.Enumerations.SyncStage)">
            <summary>
            Initializes a new instance of the <see cref="T:Dotmim.Sync.SyncException"/>  class with a reference to the inner exception that is the cause of this exception and the current sync stage.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncException.#ctor(System.Exception,System.String,Dotmim.Sync.Enumerations.SyncStage)">
            <summary>
            Initializes a new instance of the <see cref="T:Dotmim.Sync.SyncException"/>  class with a specified error message, a reference to the inner exception that is the cause of this exception and the current sync stage.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncException.BaseMessage">
            <summary>
            Gets or sets base message.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncException.TypeName">
            <summary>
            Gets or Sets type name of exception.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncException.SyncStage">
            <summary>
            Gets or sets sync stage when exception occured.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncException.Number">
            <summary>
            Gets or sets data source error number if available.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncException.DataSource">
            <summary>
            Gets or Sets data source if available.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncException.InitialCatalog">
            <summary>
            Gets or Sets initial catalog if available.
            </summary>
        </member>
        <member name="T:Dotmim.Sync.UnknownException">
            <summary>
            Unknown Exception.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.UnknownException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Dotmim.Sync.UnknownException"/> class.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.UnknownException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Dotmim.Sync.UnknownException"/> class.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.UnknownException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Dotmim.Sync.UnknownException"/> class.
            </summary>
        </member>
        <member name="T:Dotmim.Sync.RollbackException">
            <summary>
            Rollback Exception.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.RollbackException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Dotmim.Sync.RollbackException"/> class.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.RollbackException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Dotmim.Sync.RollbackException"/> class.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.RollbackException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Dotmim.Sync.RollbackException"/> class.
            </summary>
        </member>
        <member name="T:Dotmim.Sync.AlreadyInProgressException">
            <summary>
            Occurs when trying to launch another sync during an in progress sync.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.AlreadyInProgressException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Dotmim.Sync.AlreadyInProgressException"/> class.
            </summary>
        </member>
        <member name="T:Dotmim.Sync.ConnectionClosedException">
            <summary>
            Occurs when trying to use a closed connection.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.ConnectionClosedException.#ctor(System.Data.Common.DbConnection)">
            <summary>
            Initializes a new instance of the <see cref="T:Dotmim.Sync.ConnectionClosedException"/> class.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.ConnectionClosedException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Dotmim.Sync.ConnectionClosedException"/> class.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.ConnectionClosedException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Dotmim.Sync.ConnectionClosedException"/> class.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.ConnectionClosedException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Dotmim.Sync.ConnectionClosedException"/> class.
            </summary>
        </member>
        <member name="T:Dotmim.Sync.FormatTypeException">
            <summary>
            Occurs when a type is not supported.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.FormatTypeException.#ctor(System.Type)">
            <inheritdoc cref="T:Dotmim.Sync.FormatTypeException"/>/>
        </member>
        <member name="M:Dotmim.Sync.FormatTypeException.#ctor">
            <inheritdoc cref="T:Dotmim.Sync.FormatTypeException"/>/>
        </member>
        <member name="M:Dotmim.Sync.FormatTypeException.#ctor(System.String)">
            <inheritdoc cref="T:Dotmim.Sync.FormatTypeException"/>/>
        </member>
        <member name="M:Dotmim.Sync.FormatTypeException.#ctor(System.String,System.Exception)">
            <inheritdoc cref="T:Dotmim.Sync.FormatTypeException"/>/>
        </member>
        <member name="T:Dotmim.Sync.FormatDbTypeException">
            <summary>
            Occurs when a DbType is not supported.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.FormatDbTypeException.#ctor(System.Data.DbType)">
            <inheritdoc cref="T:Dotmim.Sync.FormatDbTypeException"/>
        </member>
        <member name="M:Dotmim.Sync.FormatDbTypeException.#ctor">
            <inheritdoc cref="T:Dotmim.Sync.FormatDbTypeException"/>
        </member>
        <member name="M:Dotmim.Sync.FormatDbTypeException.#ctor(System.String)">
            <inheritdoc cref="T:Dotmim.Sync.FormatDbTypeException"/>
        </member>
        <member name="T:Dotmim.Sync.InvalidRemoteOrchestratorException">
            <summary>
            Occurs when a bad SyncProvision is provided to a local orchestrator.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InvalidRemoteOrchestratorException.#ctor">
            <inheritdoc cref="T:Dotmim.Sync.InvalidRemoteOrchestratorException"/>
        </member>
        <member name="M:Dotmim.Sync.InvalidRemoteOrchestratorException.#ctor(System.String)">
            <inheritdoc cref="T:Dotmim.Sync.InvalidRemoteOrchestratorException"/>
        </member>
        <member name="M:Dotmim.Sync.InvalidRemoteOrchestratorException.#ctor(System.String,System.Exception)">
            <inheritdoc cref="T:Dotmim.Sync.InvalidRemoteOrchestratorException"/>
        </member>
        <member name="T:Dotmim.Sync.InvalidProvisionForLocalOrchestratorException">
            <summary>
            Occurs when a bad SyncProvision is provided to a local orchestrator.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InvalidProvisionForLocalOrchestratorException.#ctor">
            <inheritdoc cref="T:Dotmim.Sync.InvalidProvisionForLocalOrchestratorException"/>
        </member>
        <member name="M:Dotmim.Sync.InvalidProvisionForLocalOrchestratorException.#ctor(System.String)">
            <inheritdoc cref="T:Dotmim.Sync.InvalidProvisionForLocalOrchestratorException"/>
        </member>
        <member name="M:Dotmim.Sync.InvalidProvisionForLocalOrchestratorException.#ctor(System.String,System.Exception)">
            <inheritdoc cref="T:Dotmim.Sync.InvalidProvisionForLocalOrchestratorException"/>
        </member>
        <member name="T:Dotmim.Sync.InvalidProvisionForRemoteOrchestratorException">
            <summary>
            Occurs when a bad SyncProvision is provided to a remote orchestrator.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InvalidProvisionForRemoteOrchestratorException.#ctor">
            <inheritdoc cref="T:Dotmim.Sync.InvalidProvisionForRemoteOrchestratorException"/>
        </member>
        <member name="M:Dotmim.Sync.InvalidProvisionForRemoteOrchestratorException.#ctor(System.String)">
            <inheritdoc cref="T:Dotmim.Sync.InvalidProvisionForRemoteOrchestratorException"/>
        </member>
        <member name="M:Dotmim.Sync.InvalidProvisionForRemoteOrchestratorException.#ctor(System.String,System.Exception)">
            <inheritdoc cref="T:Dotmim.Sync.InvalidProvisionForRemoteOrchestratorException"/>
        </member>
        <member name="T:Dotmim.Sync.MissingConnectionException">
            <summary>
            Occurs when a connection is missing.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.MissingConnectionException.#ctor">
            <inheritdoc cref="T:Dotmim.Sync.MissingConnectionException"/>
        </member>
        <member name="M:Dotmim.Sync.MissingConnectionException.#ctor(System.String)">
            <inheritdoc cref="T:Dotmim.Sync.MissingConnectionException"/>
        </member>
        <member name="M:Dotmim.Sync.MissingConnectionException.#ctor(System.String,System.Exception)">
            <inheritdoc cref="T:Dotmim.Sync.MissingConnectionException"/>
        </member>
        <member name="T:Dotmim.Sync.MissingLocalOrchestratorSchemaException">
            <summary>
            Occurs when a schema is needed, but does not exists.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.MissingLocalOrchestratorSchemaException.#ctor">
            <inheritdoc cref="T:Dotmim.Sync.MissingLocalOrchestratorSchemaException"/>
        </member>
        <member name="M:Dotmim.Sync.MissingLocalOrchestratorSchemaException.#ctor(System.String)">
            <inheritdoc cref="T:Dotmim.Sync.MissingLocalOrchestratorSchemaException"/>
        </member>
        <member name="M:Dotmim.Sync.MissingLocalOrchestratorSchemaException.#ctor(System.String,System.Exception)">
            <inheritdoc cref="T:Dotmim.Sync.MissingLocalOrchestratorSchemaException"/>
        </member>
        <member name="T:Dotmim.Sync.MissingRemoteOrchestratorSchemaException">
            <summary>
            Occurs when a schema is needed, but does not exists.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.MissingRemoteOrchestratorSchemaException.#ctor">
            <inheritdoc cref="T:Dotmim.Sync.MissingRemoteOrchestratorSchemaException"/>
        </member>
        <member name="M:Dotmim.Sync.MissingRemoteOrchestratorSchemaException.#ctor(System.String)">
            <inheritdoc cref="T:Dotmim.Sync.MissingRemoteOrchestratorSchemaException"/>
        </member>
        <member name="M:Dotmim.Sync.MissingRemoteOrchestratorSchemaException.#ctor(System.String,System.Exception)">
            <inheritdoc cref="T:Dotmim.Sync.MissingRemoteOrchestratorSchemaException"/>
        </member>
        <member name="T:Dotmim.Sync.MissingClientScopeInfoException">
            <summary>
            Occurs when a scope info is needed, but does not exists.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.MissingClientScopeInfoException.#ctor">
            <inheritdoc cref="T:Dotmim.Sync.MissingClientScopeInfoException"/>
        </member>
        <member name="M:Dotmim.Sync.MissingClientScopeInfoException.#ctor(System.String)">
            <inheritdoc cref="T:Dotmim.Sync.MissingClientScopeInfoException"/>
        </member>
        <member name="M:Dotmim.Sync.MissingClientScopeInfoException.#ctor(System.String,System.Exception)">
            <inheritdoc cref="T:Dotmim.Sync.MissingClientScopeInfoException"/>
        </member>
        <member name="T:Dotmim.Sync.MissingServerScopeInfoException">
            <summary>
            Occurs when a scope info is needed, but does not exists.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.MissingServerScopeInfoException.#ctor">
            <inheritdoc cref="T:Dotmim.Sync.MissingServerScopeInfoException"/>
        </member>
        <member name="M:Dotmim.Sync.MissingServerScopeInfoException.#ctor(System.String)">
            <inheritdoc cref="T:Dotmim.Sync.MissingServerScopeInfoException"/>
        </member>
        <member name="M:Dotmim.Sync.MissingServerScopeInfoException.#ctor(System.String,System.Exception)">
            <inheritdoc cref="T:Dotmim.Sync.MissingServerScopeInfoException"/>
        </member>
        <member name="T:Dotmim.Sync.InvalidScopeInfoException">
            <summary>
            Occurs when a scope info is not good, conflicting with the one from the orchestrator.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InvalidScopeInfoException.#ctor">
            <inheritdoc cref="T:Dotmim.Sync.InvalidScopeInfoException"/>
        </member>
        <member name="M:Dotmim.Sync.InvalidScopeInfoException.#ctor(System.String)">
            <inheritdoc cref="T:Dotmim.Sync.InvalidScopeInfoException"/>
        </member>
        <member name="M:Dotmim.Sync.InvalidScopeInfoException.#ctor(System.String,System.Exception)">
            <inheritdoc cref="T:Dotmim.Sync.InvalidScopeInfoException"/>
        </member>
        <member name="T:Dotmim.Sync.InvalidColumnAutoIncrementException">
            <summary>
            Occurs when a scope info is not good, conflicting with the one from the orchestrator.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InvalidColumnAutoIncrementException.#ctor(System.String,System.String)">
            <inheritdoc cref="T:Dotmim.Sync.InvalidColumnAutoIncrementException"/>
        </member>
        <member name="M:Dotmim.Sync.InvalidColumnAutoIncrementException.#ctor">
            <inheritdoc cref="T:Dotmim.Sync.InvalidColumnAutoIncrementException"/>
        </member>
        <member name="M:Dotmim.Sync.InvalidColumnAutoIncrementException.#ctor(System.String)">
            <inheritdoc cref="T:Dotmim.Sync.InvalidColumnAutoIncrementException"/>
        </member>
        <member name="T:Dotmim.Sync.MissingPrimaryKeyException">
            <summary>
            Occurs when primary key is missing in the table schema.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.MissingPrimaryKeyException.#ctor(System.String)">
            <inheritdoc cref="T:Dotmim.Sync.MissingPrimaryKeyException"/>
        </member>
        <member name="M:Dotmim.Sync.MissingPrimaryKeyException.#ctor">
            <inheritdoc cref="T:Dotmim.Sync.MissingPrimaryKeyException"/>
        </member>
        <member name="M:Dotmim.Sync.MissingPrimaryKeyException.#ctor(System.String,System.Exception)">
            <inheritdoc cref="T:Dotmim.Sync.MissingPrimaryKeyException"/>
        </member>
        <member name="T:Dotmim.Sync.MissingTableException">
            <summary>
            Setup table exception. Used when a setup table is defined that does not exist in the data source.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.MissingTableException.#ctor(System.String,System.String,System.String)">
            <inheritdoc cref="T:Dotmim.Sync.MissingTableException"/>
        </member>
        <member name="M:Dotmim.Sync.MissingTableException.#ctor">
            <inheritdoc cref="T:Dotmim.Sync.MissingTableException"/>
        </member>
        <member name="M:Dotmim.Sync.MissingTableException.#ctor(System.String)">
            <inheritdoc cref="T:Dotmim.Sync.MissingTableException"/>
        </member>
        <member name="T:Dotmim.Sync.SetupConflictOnClientException">
            <summary>
            Setup Conflict, when setup provided by the user in code is different from the one in database.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SetupConflictOnClientException.#ctor(Dotmim.Sync.SyncSetup,Dotmim.Sync.SyncSetup)">
            <inheritdoc cref="T:Dotmim.Sync.SetupConflictOnClientException"/>
        </member>
        <member name="M:Dotmim.Sync.SetupConflictOnClientException.#ctor">
            <inheritdoc cref="T:Dotmim.Sync.SetupConflictOnClientException"/>
        </member>
        <member name="M:Dotmim.Sync.SetupConflictOnClientException.#ctor(System.String)">
            <inheritdoc cref="T:Dotmim.Sync.SetupConflictOnClientException"/>
        </member>
        <member name="T:Dotmim.Sync.SetupConflictOnServerException">
            <summary>
            Setup Conflict, when setup provided by the user in code is different from the one in database.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SetupConflictOnServerException.#ctor(Dotmim.Sync.SyncSetup,Dotmim.Sync.SyncSetup)">
            <inheritdoc cref="T:Dotmim.Sync.SetupConflictOnServerException"/>
        </member>
        <member name="M:Dotmim.Sync.SetupConflictOnServerException.#ctor">
            <inheritdoc cref="T:Dotmim.Sync.SetupConflictOnServerException"/>
        </member>
        <member name="M:Dotmim.Sync.SetupConflictOnServerException.#ctor(System.String)">
            <inheritdoc cref="T:Dotmim.Sync.SetupConflictOnServerException"/>
        </member>
        <member name="T:Dotmim.Sync.MissingColumnException">
            <summary>
            Setup column exception. Used when a setup column  is defined that does not exist in the data source table.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.MissingColumnException.#ctor(System.String,System.String)">
            <inheritdoc cref="T:Dotmim.Sync.MissingColumnException"/>
        </member>
        <member name="M:Dotmim.Sync.MissingColumnException.#ctor">
            <inheritdoc cref="T:Dotmim.Sync.MissingColumnException"/>
        </member>
        <member name="M:Dotmim.Sync.MissingColumnException.#ctor(System.String)">
            <inheritdoc cref="T:Dotmim.Sync.MissingColumnException"/>
        </member>
        <member name="T:Dotmim.Sync.MissingsColumnException">
            <summary>
            Setup columns exception. Used when a setup table has no columns during provisioning.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.MissingsColumnException.#ctor(System.String)">
            <inheritdoc cref="T:Dotmim.Sync.MissingsColumnException"/>
        </member>
        <member name="M:Dotmim.Sync.MissingsColumnException.#ctor">
            <inheritdoc cref="T:Dotmim.Sync.MissingsColumnException"/>
        </member>
        <member name="M:Dotmim.Sync.MissingsColumnException.#ctor(System.String,System.Exception)">
            <inheritdoc cref="T:Dotmim.Sync.MissingsColumnException"/>
        </member>
        <member name="T:Dotmim.Sync.MissingPrimaryKeyColumnException">
            <summary>
            Setup column exception. Used when a setup column  is defined that does not exist in the data source table.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.MissingPrimaryKeyColumnException.#ctor(System.String,System.String)">
            <inheritdoc cref="T:Dotmim.Sync.MissingPrimaryKeyColumnException"/>
        </member>
        <member name="M:Dotmim.Sync.MissingPrimaryKeyColumnException.#ctor">
            <inheritdoc cref="T:Dotmim.Sync.MissingPrimaryKeyColumnException"/>
        </member>
        <member name="M:Dotmim.Sync.MissingPrimaryKeyColumnException.#ctor(System.String)">
            <inheritdoc cref="T:Dotmim.Sync.MissingPrimaryKeyColumnException"/>
        </member>
        <member name="T:Dotmim.Sync.MissingProviderException">
            <summary>
            Setup table exception. Used when a your setup does not contains any table.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.MissingProviderException.#ctor(System.String)">
            <inheritdoc cref="T:Dotmim.Sync.MissingProviderException"/>
        </member>
        <member name="M:Dotmim.Sync.MissingProviderException.#ctor">
            <inheritdoc cref="T:Dotmim.Sync.MissingProviderException"/>
        </member>
        <member name="M:Dotmim.Sync.MissingProviderException.#ctor(System.String,System.Exception)">
            <inheritdoc cref="T:Dotmim.Sync.MissingProviderException"/>
        </member>
        <member name="T:Dotmim.Sync.MissingTablesException">
            <summary>
            Setup table exception. Used when a your setup does not contains any table.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.MissingTablesException.#ctor">
            <inheritdoc cref="T:Dotmim.Sync.MissingTablesException"/>
        </member>
        <member name="M:Dotmim.Sync.MissingTablesException.#ctor(System.String)">
            <inheritdoc cref="T:Dotmim.Sync.MissingTablesException"/>
        </member>
        <member name="M:Dotmim.Sync.MissingTablesException.#ctor(System.String,System.Exception)">
            <inheritdoc cref="T:Dotmim.Sync.MissingTablesException"/>
        </member>
        <member name="T:Dotmim.Sync.MissingServerScopeTablesException">
            <summary>
            Setup table exception. Used when a your setup does not contains any table.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.MissingServerScopeTablesException.#ctor(System.String)">
            <inheritdoc cref="T:Dotmim.Sync.MissingServerScopeTablesException"/>
        </member>
        <member name="M:Dotmim.Sync.MissingServerScopeTablesException.#ctor">
            <inheritdoc cref="T:Dotmim.Sync.MissingServerScopeTablesException"/>
        </member>
        <member name="M:Dotmim.Sync.MissingServerScopeTablesException.#ctor(System.String,System.Exception)">
            <inheritdoc cref="T:Dotmim.Sync.MissingServerScopeTablesException"/>
        </member>
        <member name="T:Dotmim.Sync.MissingSchemaInScopeException">
            <summary>
            No schema in the scope.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.MissingSchemaInScopeException.#ctor">
            <inheritdoc cref="T:Dotmim.Sync.MissingSchemaInScopeException"/>
        </member>
        <member name="M:Dotmim.Sync.MissingSchemaInScopeException.#ctor(System.String)">
            <inheritdoc cref="T:Dotmim.Sync.MissingSchemaInScopeException"/>
        </member>
        <member name="M:Dotmim.Sync.MissingSchemaInScopeException.#ctor(System.String,System.Exception)">
            <inheritdoc cref="T:Dotmim.Sync.MissingSchemaInScopeException"/>
        </member>
        <member name="T:Dotmim.Sync.MissingColumnsException">
            <summary>
            Setup table exception. Used when a your setup does not contains any columns in table.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.MissingColumnsException.#ctor">
            <inheritdoc cref="T:Dotmim.Sync.MissingColumnsException"/>
        </member>
        <member name="M:Dotmim.Sync.MissingColumnsException.#ctor(System.String)">
            <inheritdoc cref="T:Dotmim.Sync.MissingColumnsException"/>
        </member>
        <member name="M:Dotmim.Sync.MissingColumnsException.#ctor(System.String,System.Exception)">
            <inheritdoc cref="T:Dotmim.Sync.MissingColumnsException"/>
        </member>
        <member name="T:Dotmim.Sync.MigrationTableDropNotAllowedException">
            <summary>
            During a migration, droping a table is not allowed.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.MigrationTableDropNotAllowedException.#ctor">
            <inheritdoc cref="T:Dotmim.Sync.MigrationTableDropNotAllowedException"/>
        </member>
        <member name="M:Dotmim.Sync.MigrationTableDropNotAllowedException.#ctor(System.String)">
            <inheritdoc cref="T:Dotmim.Sync.MigrationTableDropNotAllowedException"/>
        </member>
        <member name="M:Dotmim.Sync.MigrationTableDropNotAllowedException.#ctor(System.String,System.Exception)">
            <inheritdoc cref="T:Dotmim.Sync.MigrationTableDropNotAllowedException"/>
        </member>
        <member name="T:Dotmim.Sync.MetadataException">
            <summary>
            Metadata exception.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.MetadataException.#ctor(System.String)">
            <inheritdoc cref="T:Dotmim.Sync.MetadataException"/>
        </member>
        <member name="M:Dotmim.Sync.MetadataException.#ctor">
            <inheritdoc cref="T:Dotmim.Sync.MetadataException"/>
        </member>
        <member name="M:Dotmim.Sync.MetadataException.#ctor(System.String,System.Exception)">
            <inheritdoc cref="T:Dotmim.Sync.MetadataException"/>
        </member>
        <member name="T:Dotmim.Sync.RowOverSizedException">
            <summary>
            Occurs when a row is too big for download batch size.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.RowOverSizedException.#ctor(System.String)">
            <inheritdoc cref="T:Dotmim.Sync.RowOverSizedException"/>
        </member>
        <member name="M:Dotmim.Sync.RowOverSizedException.#ctor">
            <inheritdoc cref="T:Dotmim.Sync.RowOverSizedException"/>
        </member>
        <member name="M:Dotmim.Sync.RowOverSizedException.#ctor(System.String,System.Exception)">
            <inheritdoc cref="T:Dotmim.Sync.RowOverSizedException"/>
        </member>
        <member name="T:Dotmim.Sync.MissingCommandException">
            <summary>
            Occurs when a command is missing.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.MissingCommandException.#ctor(System.String)">
            <inheritdoc cref="T:Dotmim.Sync.MissingCommandException"/>
        </member>
        <member name="M:Dotmim.Sync.MissingCommandException.#ctor">
            <inheritdoc cref="T:Dotmim.Sync.MissingCommandException"/>
        </member>
        <member name="M:Dotmim.Sync.MissingCommandException.#ctor(System.String,System.Exception)">
            <inheritdoc cref="T:Dotmim.Sync.MissingCommandException"/>
        </member>
        <member name="T:Dotmim.Sync.MissingChangeTrackingException">
            <summary>
            Occurs when we use change tracking and it's not enabled on the source database.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.MissingChangeTrackingException.#ctor(System.String)">
            <inheritdoc cref="T:Dotmim.Sync.MissingChangeTrackingException"/>
        </member>
        <member name="M:Dotmim.Sync.MissingChangeTrackingException.#ctor">
            <inheritdoc cref="T:Dotmim.Sync.MissingChangeTrackingException"/>
        </member>
        <member name="M:Dotmim.Sync.MissingChangeTrackingException.#ctor(System.String,System.Exception)">
            <inheritdoc cref="T:Dotmim.Sync.MissingChangeTrackingException"/>
        </member>
        <member name="T:Dotmim.Sync.MissingTrackingTableException">
            <summary>
            Occurs when we local orchestrator tries to update untracked rows, but no tracking table exists.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.MissingTrackingTableException.#ctor(System.String)">
            <inheritdoc cref="T:Dotmim.Sync.MissingTrackingTableException"/>
        </member>
        <member name="M:Dotmim.Sync.MissingTrackingTableException.#ctor">
            <inheritdoc cref="T:Dotmim.Sync.MissingTrackingTableException"/>
        </member>
        <member name="M:Dotmim.Sync.MissingTrackingTableException.#ctor(System.String,System.Exception)">
            <inheritdoc cref="T:Dotmim.Sync.MissingTrackingTableException"/>
        </member>
        <member name="T:Dotmim.Sync.MissingDatabaseException">
            <summary>
            Occurs when we check database existence.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.MissingDatabaseException.#ctor(System.String)">
            <inheritdoc cref="T:Dotmim.Sync.MissingDatabaseException"/>
        </member>
        <member name="M:Dotmim.Sync.MissingDatabaseException.#ctor">
            <inheritdoc cref="T:Dotmim.Sync.MissingDatabaseException"/>
        </member>
        <member name="M:Dotmim.Sync.MissingDatabaseException.#ctor(System.String,System.Exception)">
            <inheritdoc cref="T:Dotmim.Sync.MissingDatabaseException"/>
        </member>
        <member name="T:Dotmim.Sync.InvalidDatabaseVersionException">
            <summary>
            Occurs when we check database existence.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.InvalidDatabaseVersionException.#ctor(System.String,System.String)">
            <inheritdoc cref="T:Dotmim.Sync.InvalidDatabaseVersionException"/>
        </member>
        <member name="M:Dotmim.Sync.InvalidDatabaseVersionException.#ctor">
            <inheritdoc cref="T:Dotmim.Sync.InvalidDatabaseVersionException"/>
        </member>
        <member name="M:Dotmim.Sync.InvalidDatabaseVersionException.#ctor(System.String)">
            <inheritdoc cref="T:Dotmim.Sync.InvalidDatabaseVersionException"/>
        </member>
        <member name="T:Dotmim.Sync.UnsupportedColumnTypeException">
            <summary>
            Occurs when a column is not supported by the Dotmim.Sync framework.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.UnsupportedColumnTypeException.#ctor(System.String,System.String,System.String,System.String)">
            <inheritdoc cref="T:Dotmim.Sync.UnsupportedColumnTypeException"/>
        </member>
        <member name="M:Dotmim.Sync.UnsupportedColumnTypeException.#ctor">
            <inheritdoc cref="T:Dotmim.Sync.UnsupportedColumnTypeException"/>
        </member>
        <member name="M:Dotmim.Sync.UnsupportedColumnTypeException.#ctor(System.String)">
            <inheritdoc cref="T:Dotmim.Sync.UnsupportedColumnTypeException"/>
        </member>
        <member name="T:Dotmim.Sync.UnsupportedColumnNameException">
            <summary>
            Occurs when a column name is not supported by the Dotmim.Sync framework.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.UnsupportedColumnNameException.#ctor(System.String,System.String,System.String,System.String)">
            <inheritdoc cref="T:Dotmim.Sync.UnsupportedColumnNameException"/>
        </member>
        <member name="M:Dotmim.Sync.UnsupportedColumnNameException.#ctor">
            <inheritdoc cref="T:Dotmim.Sync.UnsupportedColumnNameException"/>
        </member>
        <member name="M:Dotmim.Sync.UnsupportedColumnNameException.#ctor(System.String)">
            <inheritdoc cref="T:Dotmim.Sync.UnsupportedColumnNameException"/>
        </member>
        <member name="T:Dotmim.Sync.UnsupportedPrimaryKeyColumnNameException">
            <summary>
            Occurs when a column name is not supported by the Dotmim.Sync framework for a primary key.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.UnsupportedPrimaryKeyColumnNameException.#ctor(System.String,System.String,System.String,System.String)">
            <inheritdoc cref="T:Dotmim.Sync.UnsupportedPrimaryKeyColumnNameException"/>
        </member>
        <member name="M:Dotmim.Sync.UnsupportedPrimaryKeyColumnNameException.#ctor">
            <inheritdoc cref="T:Dotmim.Sync.UnsupportedPrimaryKeyColumnNameException"/>
        </member>
        <member name="M:Dotmim.Sync.UnsupportedPrimaryKeyColumnNameException.#ctor(System.String)">
            <inheritdoc cref="T:Dotmim.Sync.UnsupportedPrimaryKeyColumnNameException"/>
        </member>
        <member name="T:Dotmim.Sync.UnsupportedServerProviderException">
            <summary>
            Occurs when a provider not supported as a server provider is used with a RemoteOrchestrator.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.UnsupportedServerProviderException.#ctor(System.String)">
            <inheritdoc cref="T:Dotmim.Sync.UnsupportedServerProviderException"/>
        </member>
        <member name="M:Dotmim.Sync.UnsupportedServerProviderException.#ctor">
            <inheritdoc cref="T:Dotmim.Sync.UnsupportedServerProviderException"/>
        </member>
        <member name="M:Dotmim.Sync.UnsupportedServerProviderException.#ctor(System.String,System.Exception)">
            <inheritdoc cref="T:Dotmim.Sync.UnsupportedServerProviderException"/>
        </member>
        <member name="T:Dotmim.Sync.OutOfDateException">
            <summary>
            Occurs when sync metadatas are out of date.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.OutOfDateException.#ctor(System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <inheritdoc cref="T:Dotmim.Sync.OutOfDateException"/>
        </member>
        <member name="M:Dotmim.Sync.OutOfDateException.#ctor">
            <inheritdoc cref="T:Dotmim.Sync.OutOfDateException"/>
        </member>
        <member name="M:Dotmim.Sync.OutOfDateException.#ctor(System.String)">
            <inheritdoc cref="T:Dotmim.Sync.OutOfDateException"/>
        </member>
        <member name="T:Dotmim.Sync.HttpEmptyResponseContentException">
            <summary>
            Http empty response exception.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.HttpEmptyResponseContentException.#ctor">
            <inheritdoc cref="T:Dotmim.Sync.HttpEmptyResponseContentException"/>
        </member>
        <member name="M:Dotmim.Sync.HttpEmptyResponseContentException.#ctor(System.String)">
            <inheritdoc cref="T:Dotmim.Sync.HttpEmptyResponseContentException"/>
        </member>
        <member name="M:Dotmim.Sync.HttpEmptyResponseContentException.#ctor(System.String,System.Exception)">
            <inheritdoc cref="T:Dotmim.Sync.HttpEmptyResponseContentException"/>
        </member>
        <member name="T:Dotmim.Sync.HttpHeaderMissingException">
            <summary>
            Occurs when a header is missing in the http request.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.HttpHeaderMissingException.#ctor(System.String)">
            <inheritdoc cref="T:Dotmim.Sync.HttpHeaderMissingException"/>
        </member>
        <member name="M:Dotmim.Sync.HttpHeaderMissingException.#ctor">
            <inheritdoc cref="T:Dotmim.Sync.HttpHeaderMissingException"/>
        </member>
        <member name="M:Dotmim.Sync.HttpHeaderMissingException.#ctor(System.String,System.Exception)">
            <inheritdoc cref="T:Dotmim.Sync.HttpHeaderMissingException"/>
        </member>
        <member name="T:Dotmim.Sync.HttpCacheNotConfiguredException">
            <summary>
            Occurs when a cache is not set on the server.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.HttpCacheNotConfiguredException.#ctor">
            <inheritdoc cref="T:Dotmim.Sync.HttpCacheNotConfiguredException"/>
        </member>
        <member name="M:Dotmim.Sync.HttpCacheNotConfiguredException.#ctor(System.String)">
            <inheritdoc cref="T:Dotmim.Sync.HttpCacheNotConfiguredException"/>
        </member>
        <member name="M:Dotmim.Sync.HttpCacheNotConfiguredException.#ctor(System.String,System.Exception)">
            <inheritdoc cref="T:Dotmim.Sync.HttpCacheNotConfiguredException"/>
        </member>
        <member name="T:Dotmim.Sync.HttpSerializerNotConfiguredException">
            <summary>
            Occurs when a Serializer is not available on the server side.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.HttpSerializerNotConfiguredException.#ctor(System.Collections.Generic.IEnumerable{System.String})">
            <inheritdoc cref="T:Dotmim.Sync.HttpSerializerNotConfiguredException"/>
        </member>
        <member name="M:Dotmim.Sync.HttpSerializerNotConfiguredException.#ctor">
            <inheritdoc cref="T:Dotmim.Sync.HttpSerializerNotConfiguredException"/>
        </member>
        <member name="M:Dotmim.Sync.HttpSerializerNotConfiguredException.#ctor(System.String)">
            <inheritdoc cref="T:Dotmim.Sync.HttpSerializerNotConfiguredException"/>
        </member>
        <member name="T:Dotmim.Sync.HttpConverterNotConfiguredException">
            <summary>
            Occurs when a Converter is not available.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.HttpConverterNotConfiguredException.#ctor(System.Collections.Generic.IEnumerable{System.String})">
            <inheritdoc cref="T:Dotmim.Sync.HttpConverterNotConfiguredException"/>
        </member>
        <member name="M:Dotmim.Sync.HttpConverterNotConfiguredException.#ctor">
            <inheritdoc cref="T:Dotmim.Sync.HttpConverterNotConfiguredException"/>
        </member>
        <member name="M:Dotmim.Sync.HttpConverterNotConfiguredException.#ctor(System.String)">
            <inheritdoc cref="T:Dotmim.Sync.HttpConverterNotConfiguredException"/>
        </member>
        <member name="T:Dotmim.Sync.HttpScopeNameInvalidException">
            <summary>
            Occurs when a parameter has been already added in a filter parameter list.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.HttpScopeNameInvalidException.#ctor(System.String)">
            <inheritdoc cref="T:Dotmim.Sync.HttpScopeNameInvalidException"/>
        </member>
        <member name="M:Dotmim.Sync.HttpScopeNameInvalidException.#ctor">
            <inheritdoc cref="T:Dotmim.Sync.HttpScopeNameInvalidException"/>
        </member>
        <member name="M:Dotmim.Sync.HttpScopeNameInvalidException.#ctor(System.String,System.Exception)">
            <inheritdoc cref="T:Dotmim.Sync.HttpScopeNameInvalidException"/>
        </member>
        <member name="T:Dotmim.Sync.HttpScopeNameFromClientIsInvalidException">
            <summary>
            Occurs when a parameter has been already added in a filter parameter list.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.HttpScopeNameFromClientIsInvalidException.#ctor(System.String,System.String)">
            <inheritdoc cref="T:Dotmim.Sync.HttpScopeNameFromClientIsInvalidException"/>
        </member>
        <member name="M:Dotmim.Sync.HttpScopeNameFromClientIsInvalidException.#ctor">
            <inheritdoc cref="T:Dotmim.Sync.HttpScopeNameFromClientIsInvalidException"/>
        </member>
        <member name="M:Dotmim.Sync.HttpScopeNameFromClientIsInvalidException.#ctor(System.String)">
            <inheritdoc cref="T:Dotmim.Sync.HttpScopeNameFromClientIsInvalidException"/>
        </member>
        <member name="T:Dotmim.Sync.HttpSessionLostException">
            <summary>
            Occurs when a session is lost during a sync session.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.HttpSessionLostException.#ctor(System.String)">
            <inheritdoc cref="T:Dotmim.Sync.HttpSessionLostException"/>
        </member>
        <member name="M:Dotmim.Sync.HttpSessionLostException.#ctor">
            <inheritdoc cref="T:Dotmim.Sync.HttpSessionLostException"/>
        </member>
        <member name="M:Dotmim.Sync.HttpSessionLostException.#ctor(System.String,System.Exception)">
            <inheritdoc cref="T:Dotmim.Sync.HttpSessionLostException"/>
        </member>
        <member name="T:Dotmim.Sync.FilterParameterAlreadyExistsException">
            <summary>
            Occurs when a parameter has been already added in a filter parameter list.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.FilterParameterAlreadyExistsException.#ctor(System.String,System.String)">
            <inheritdoc cref="T:Dotmim.Sync.FilterParameterAlreadyExistsException"/>
        </member>
        <member name="M:Dotmim.Sync.FilterParameterAlreadyExistsException.#ctor">
            <inheritdoc cref="T:Dotmim.Sync.FilterParameterAlreadyExistsException"/>
        </member>
        <member name="M:Dotmim.Sync.FilterParameterAlreadyExistsException.#ctor(System.String)">
            <inheritdoc cref="T:Dotmim.Sync.FilterParameterAlreadyExistsException"/>
        </member>
        <member name="T:Dotmim.Sync.FilterAlreadyExistsException">
            <summary>
            Occurs when a filter already exists for a named table.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.FilterAlreadyExistsException.#ctor(System.String)">
            <inheritdoc cref="T:Dotmim.Sync.FilterAlreadyExistsException"/>
        </member>
        <member name="M:Dotmim.Sync.FilterAlreadyExistsException.#ctor">
            <inheritdoc cref="T:Dotmim.Sync.FilterAlreadyExistsException"/>
        </member>
        <member name="M:Dotmim.Sync.FilterAlreadyExistsException.#ctor(System.String,System.Exception)">
            <inheritdoc cref="T:Dotmim.Sync.FilterAlreadyExistsException"/>
        </member>
        <member name="T:Dotmim.Sync.FilterTrackingWhereException">
            <summary>
            Occurs when a filter column used as a filter for a tracking table, has not been added to the column parameters list.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.FilterTrackingWhereException.#ctor(System.String)">
            <inheritdoc cref="T:Dotmim.Sync.FilterTrackingWhereException"/>
        </member>
        <member name="M:Dotmim.Sync.FilterTrackingWhereException.#ctor">
            <inheritdoc cref="T:Dotmim.Sync.FilterTrackingWhereException"/>
        </member>
        <member name="M:Dotmim.Sync.FilterTrackingWhereException.#ctor(System.String,System.Exception)">
            <inheritdoc cref="T:Dotmim.Sync.FilterTrackingWhereException"/>
        </member>
        <member name="T:Dotmim.Sync.FilterParamColumnNotExistsException">
            <summary>
            Occurs when a filter column used as a filter for a tracking table, but not exists.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.FilterParamColumnNotExistsException.#ctor(System.String,System.String)">
            <inheritdoc cref="T:Dotmim.Sync.FilterParamColumnNotExistsException"/>
        </member>
        <member name="M:Dotmim.Sync.FilterParamColumnNotExistsException.#ctor">
            <inheritdoc cref="T:Dotmim.Sync.FilterParamColumnNotExistsException"/>
        </member>
        <member name="M:Dotmim.Sync.FilterParamColumnNotExistsException.#ctor(System.String)">
            <inheritdoc cref="T:Dotmim.Sync.FilterParamColumnNotExistsException"/>
        </member>
        <member name="T:Dotmim.Sync.FilterParamTableNotExistsException">
            <summary>
            Occurs when a filter column used as a filter for a tracking table, but not exists.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.FilterParamTableNotExistsException.#ctor(System.String)">
            <inheritdoc cref="T:Dotmim.Sync.FilterParamTableNotExistsException"/>
        </member>
        <member name="M:Dotmim.Sync.FilterParamTableNotExistsException.#ctor">
            <inheritdoc cref="T:Dotmim.Sync.FilterParamTableNotExistsException"/>
        </member>
        <member name="M:Dotmim.Sync.FilterParamTableNotExistsException.#ctor(System.String,System.Exception)">
            <inheritdoc cref="T:Dotmim.Sync.FilterParamTableNotExistsException"/>
        </member>
        <member name="T:Dotmim.Sync.SyncParameterAlreadyExistsException">
            <summary>
            Occurs when a parameter has been already added to the parameter collection.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncParameterAlreadyExistsException.#ctor(System.String)">
            <inheritdoc cref="T:Dotmim.Sync.SyncParameterAlreadyExistsException"/>
        </member>
        <member name="M:Dotmim.Sync.SyncParameterAlreadyExistsException.#ctor">
            <inheritdoc cref="T:Dotmim.Sync.SyncParameterAlreadyExistsException"/>
        </member>
        <member name="M:Dotmim.Sync.SyncParameterAlreadyExistsException.#ctor(System.String,System.Exception)">
            <inheritdoc cref="T:Dotmim.Sync.SyncParameterAlreadyExistsException"/>
        </member>
        <member name="T:Dotmim.Sync.SnapshotNotExistsException">
            <summary>
            Occurs when trying to apply a snapshot that does not exists.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SnapshotNotExistsException.#ctor(System.String)">
            <inheritdoc cref="T:Dotmim.Sync.SnapshotNotExistsException"/>
        </member>
        <member name="M:Dotmim.Sync.SnapshotNotExistsException.#ctor">
            <inheritdoc cref="T:Dotmim.Sync.SnapshotNotExistsException"/>
        </member>
        <member name="M:Dotmim.Sync.SnapshotNotExistsException.#ctor(System.String,System.Exception)">
            <inheritdoc cref="T:Dotmim.Sync.SnapshotNotExistsException"/>
        </member>
        <member name="T:Dotmim.Sync.SnapshotMissingMandatariesOptionsException">
            <summary>
            Occurs when trying to create a snapshot but no directory and size have been set in the options.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SnapshotMissingMandatariesOptionsException.#ctor">
            <inheritdoc cref="T:Dotmim.Sync.SnapshotMissingMandatariesOptionsException"/>
        </member>
        <member name="M:Dotmim.Sync.SnapshotMissingMandatariesOptionsException.#ctor(System.String)">
            <inheritdoc cref="T:Dotmim.Sync.SnapshotMissingMandatariesOptionsException"/>
        </member>
        <member name="M:Dotmim.Sync.SnapshotMissingMandatariesOptionsException.#ctor(System.String,System.Exception)">
            <inheritdoc cref="T:Dotmim.Sync.SnapshotMissingMandatariesOptionsException"/>
        </member>
        <member name="T:Dotmim.Sync.OptionsReferencesAreNotSameExecption">
            <summary>
            Occurs when options references are not the same.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.OptionsReferencesAreNotSameExecption.#ctor">
            <inheritdoc cref="T:Dotmim.Sync.OptionsReferencesAreNotSameExecption"/>
        </member>
        <member name="M:Dotmim.Sync.OptionsReferencesAreNotSameExecption.#ctor(System.String)">
            <inheritdoc cref="T:Dotmim.Sync.OptionsReferencesAreNotSameExecption"/>
        </member>
        <member name="M:Dotmim.Sync.OptionsReferencesAreNotSameExecption.#ctor(System.String,System.Exception)">
            <inheritdoc cref="T:Dotmim.Sync.OptionsReferencesAreNotSameExecption"/>
        </member>
        <member name="T:Dotmim.Sync.SetupReferencesAreNotSameExecption">
            <summary>
            Occurs when setup references are not the same.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SetupReferencesAreNotSameExecption.#ctor">
            <inheritdoc cref="T:Dotmim.Sync.SetupReferencesAreNotSameExecption"/>
        </member>
        <member name="M:Dotmim.Sync.SetupReferencesAreNotSameExecption.#ctor(System.String)">
            <inheritdoc cref="T:Dotmim.Sync.SetupReferencesAreNotSameExecption"/>
        </member>
        <member name="M:Dotmim.Sync.SetupReferencesAreNotSameExecption.#ctor(System.String,System.Exception)">
            <inheritdoc cref="T:Dotmim.Sync.SetupReferencesAreNotSameExecption"/>
        </member>
        <member name="T:Dotmim.Sync.SyncHashException">
            <summary>
            Occurs when a hash from client or server is different from the hash recalculated from server or client.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncHashException.#ctor(System.String,System.String)">
            <inheritdoc cref="T:Dotmim.Sync.SyncHashException"/>
        </member>
        <member name="M:Dotmim.Sync.SyncHashException.#ctor">
            <inheritdoc cref="T:Dotmim.Sync.SyncHashException"/>
        </member>
        <member name="M:Dotmim.Sync.SyncHashException.#ctor(System.String)">
            <inheritdoc cref="T:Dotmim.Sync.SyncHashException"/>
        </member>
        <member name="T:Dotmim.Sync.ApplyChangesException">
            <summary>
            Apply changes exception.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.ApplyChangesException.#ctor(Dotmim.Sync.SyncRow,Dotmim.Sync.SyncTable,Dotmim.Sync.Enumerations.SyncRowState,System.Exception)">
            <inheritdoc cref="T:Dotmim.Sync.ApplyChangesException"/>
        </member>
        <member name="M:Dotmim.Sync.ApplyChangesException.#ctor">
            <inheritdoc cref="T:Dotmim.Sync.ApplyChangesException"/>
        </member>
        <member name="M:Dotmim.Sync.ApplyChangesException.#ctor(System.String)">
            <inheritdoc cref="T:Dotmim.Sync.ApplyChangesException"/>
        </member>
        <member name="T:Dotmim.Sync.SyncExtensions">
            <summary>
            Enumerable extensions.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncExtensions.SortByDependencies``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``0}},System.Boolean,System.Int32)">
            <summary>
            Sorts an enumeration based on dependency.
            </summary>
            <param name="source">source enumeration.</param>
            <param name="dependencies">dependencies.</param>
            <param name="throwOnCycle">if <see langword="true"/> throw exception if Cyclic dependency found.</param>
            <param name="defaultCapacity">default capacity of sorterd buffer.</param>
        </member>
        <member name="M:Dotmim.Sync.SyncExtensions.CompareWith``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,System.Boolean})">
            <summary>
            Compare two IEnumerable of T. If both are null, return true. If one is null and not the other, return false.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncExtensions.CompareWith``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Compare two IEnumerable of T. If both are null, return true. If one is null and not the other, return false.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncExtensions.ForEachAsync``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Threading.Tasks.Task},System.Int32,System.Threading.Tasks.TaskScheduler)">
            <summary>
            For each async method.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncExtensions.Forget(System.Threading.Tasks.Task)">
            <summary>
            Observes the task to avoid the UnobservedTaskException event to be raised.
            </summary>
        </member>
        <member name="T:Dotmim.Sync.SyncGlobalization">
            <summary>
            Contains global settings for Sync.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncGlobalization.DataSourceStringComparison">
            <summary>
            Gets or Sets the string comparison used when comparing string from data source.
            Default is Invariant Ignore Case.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncGlobalization.DataSourceNumberDecimalSeparator">
            <summary>
            Gets or Sets the number decimal separator used to parse decimal float and double from data source.
            Default is Invariant Number Decimal Separator (".").
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncGlobalization.IsCaseSensitive">
            <summary>
            Gets a boolean indicating if the StringComparison is case sensitive.
            </summary>
        </member>
        <member name="T:Dotmim.Sync.SyncOptions">
            <summary>
            This class determines all the options you can set on Client and Server, that could potentially be different.
            </summary>
        </member>
        <member name="F:Dotmim.Sync.SyncOptions.DefaultScopeInfoTableName">
            <summary>
            Default name if nothing is specified for the scope info table and scope info client table, stored on both side.
            </summary>
        </member>
        <member name="F:Dotmim.Sync.SyncOptions.DefaultScopeName">
            <summary>
            Default scope name if not specified.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncOptions.BatchDirectory">
            <summary>
            Gets or Sets the directory used for batch mode.
            Default value is [User Temp Path]/[DotmimSync].
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncOptions.SnapshotsDirectory">
            <summary>
            Gets or Sets the directory where snapshots are stored.
            This value could be overwritten by server is used in an http mode.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncOptions.BatchSize">
            <summary>
            Gets or Sets the size used (approximatively in kb, depending on the serializer) for each batch file, in batch mode.
            Default is 5000
            Min value is 100.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncOptions.UseVerboseErrors">
            <summary>
            Gets or sets a value indicating whether gets or Sets the log level for sync operations. Default value is false.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncOptions.CleanMetadatas">
            <summary>
            Gets or sets a value indicating whether gets or Sets if we should clean tracking table metadatas.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncOptions.CleanFolder">
            <summary>
            Gets or sets a value indicating whether gets or Sets if we should cleaning tmp dir files after sync.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncOptions.DisableConstraintsOnApplyChanges">
            <summary>
            Gets or sets a value indicating whether gets or Sets if we should disable constraints before making apply changes
            Default value is false.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncOptions.ScopeInfoTableName">
            <summary>
            Gets or Sets the scope_info table name. Default is scope_info.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncOptions.ConflictResolutionPolicy">
            <summary>
            Gets or Sets the default conflict resolution policy. This value could potentially be ovewritten and replaced by the server.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncOptions.ErrorResolutionPolicy">
            <summary>
            Gets or Sets the default error resolution policy when an error occurs locally.
            The error policy can be different on server / clients.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncOptions.Logger">
            <summary>
            Gets or Sets the default logger used for logging purpose.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncOptions.ProgressLevel">
            <summary>
            Gets or sets the Progress Level.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncOptions.DbCommandTimeout">
            <summary>
            Gets or Sets the sql commands timeout in the sync. 30 sec by default.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncOptions.TransactionMode">
            <summary>
            Gets or Sets the transaction mode for applying changes.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncOptions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Dotmim.Sync.SyncOptions"/> class.
            Create a new instance of options with default values.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncOptions.GetDefaultUserBatchDirectory">
            <summary>
            Get the default Batch directory full path ([User Temp Path]/[DotmimSync]).
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncOptions.GetDefaultUserTempPath">
            <summary>
            Get the default user tmp folder.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncOptions.GetDefaultUserBatchDirectoryName">
            <summary>
            Get the default sync tmp folder name.
            </summary>
        </member>
        <member name="T:Dotmim.Sync.SyncPolicy">
            <summary>
            Simulate a Polly Policy. You're defining a policy, then you're executing a code that could potentially be retried a number of times, based on your policy.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncPolicy.RetryCount">
            <summary>
            Gets or Sets the max retry iteration count.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncPolicy.SleepDuration">
            <summary>
            Gets or Sets the Function that will define the duration to wait for the retry iteration N.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncPolicy.RetryForever">
            <summary>
            Gets a policy retrying forever with no delay.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncPolicy.RetryForever(System.Func{System.Exception,System.Object,System.Boolean},System.Func{System.Exception,System.Int32,System.TimeSpan,System.Object,System.Threading.Tasks.Task})">
            <summary>
            Gets a policy retrying forever with no delay and a predicate used to define whether a policy handles a given exception.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncPolicy.Retry(System.Int32)">
            <summary>
            Gets a policy retrying for a defined number of iterations, with no delay.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncPolicy.Retry(System.Int32,System.Func{System.Exception,System.Object,System.Boolean},System.Func{System.Exception,System.Int32,System.TimeSpan,System.Object,System.Threading.Tasks.Task})">
            <summary>
            Gets a policy retrying for a defined number of iterations, with no delay, and a predicate used to define whether a policy handles a given exception.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncPolicy.WaitAndRetryForever(System.TimeSpan)">
            <summary>
            Gets a policy retrying forever with a specified constant delay between each iteration.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncPolicy.WaitAndRetryForever(System.Func{System.Int32,System.TimeSpan},System.Func{System.Exception,System.Object,System.Boolean},System.Func{System.Exception,System.Int32,System.TimeSpan,System.Object,System.Threading.Tasks.Task})">
            <summary>
            Gets a policy retrying forever with a predicate defining a delay between each iteration, based on the iteration index, and a predicate used to define whether a policy handles a given exception.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncPolicy.WaitAndRetry(System.Int32,System.TimeSpan)">
            <summary>
            Gets a policy retrying for a defined number of iterations, a specified constant delay between each iteration.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncPolicy.WaitAndRetry(System.Int32,System.TimeSpan,System.Func{System.Exception,System.Object,System.Boolean},System.Func{System.Exception,System.Int32,System.TimeSpan,System.Object,System.Threading.Tasks.Task})">
            <summary>
            Gets a policy retrying for a defined number of iterations, a specified constant delay between each iteration, and a predicate used to define whether a policy handles a given exception.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncPolicy.WaitAndRetry(System.Int32,System.Func{System.Int32,System.TimeSpan},System.Func{System.Exception,System.Object,System.Boolean},System.Func{System.Exception,System.Int32,System.TimeSpan,System.Object,System.Threading.Tasks.Task})">
            <summary>
            Gets a policy retrying for a defined number of iterations, with a predicate defining a delay between each iteration, based on the iteration index, and a predicate used to define whether a policy handles a given exception.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncPolicy.Execute``1(System.Func{``0})">
            <summary>
            Execute an operation based on a retry policy, synchronously.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncPolicy.ExecuteAsync(System.Func{System.Threading.Tasks.Task},System.Threading.CancellationToken)">
            <summary>
            Execute an operation based on a retry policy, asynchronously.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncPolicy.ExecuteAsync(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task},System.Threading.CancellationToken)">
            <summary>
            Execute an operation based on a retry policy, asynchronously.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncPolicy.ExecuteAsync``1(System.Func{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)">
            <summary>
            Execute an operation based on a retry policy, asynchronously, and return the result.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncPolicy.ExecuteAsync``1(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task{``0}},System.Object,System.Threading.CancellationToken)">
            <summary>
            Execute an operation based on a retry policy, asynchronously, and return the result.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncPolicy.InternalExecuteAsync``1(System.Func{System.Threading.Tasks.Task{``0}},System.Object,System.Threading.CancellationToken)">
            <summary>
            Execute an operation based on a retry policy, asynchronously, and return the result.
            </summary>
        </member>
        <member name="T:Dotmim.Sync.SyncPreparedCommand">
            <summary>
            Represents a synchronization command that is prepared (or not).
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncPreparedCommand.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Dotmim.Sync.SyncPreparedCommand"/> class, using a command code name. By default, the command is not prepared.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncPreparedCommand.IsPrepared">
            <summary>
            Gets or sets a value indicating whether gets or Sets if the command is prepared.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncPreparedCommand.CommandCodeName">
            <summary>
            Gets the command code name.
            </summary>
        </member>
        <member name="T:Dotmim.Sync.SyncResult">
            <summary>
            Compute all the results after a successfull sync.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncResult.#ctor">
            <inheritdoc cref="T:Dotmim.Sync.SyncResult" />
        </member>
        <member name="M:Dotmim.Sync.SyncResult.#ctor(System.Guid)">
            <inheritdoc cref="T:Dotmim.Sync.SyncResult" />
        </member>
        <member name="P:Dotmim.Sync.SyncResult.SessionId">
            <summary>
            Gets or Sets the current Session id, for an in progress sync.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncResult.StartTime">
            <summary>Gets or sets the time when a sync sessionn started.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncResult.ScopeName">
            <summary>
            Gets or Sets the ScopeName for this sync session.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncResult.CompleteTime">
            <summary>
            Gets or sets the time when a sync session ended.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncResult.TotalChangesAppliedOnClient">
            <summary>
            Gets the number of changes applied on the client.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncResult.TotalChangesAppliedOnServer">
            <summary>
            Gets the number of changes applied on the server.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncResult.TotalChangesDownloadedFromServer">
            <summary>
            Gets total number of changes downloaded from server.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncResult.TotalChangesUploadedToServer">
            <summary>
            Gets the number of change uploaded to the server.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncResult.TotalResolvedConflicts">
            <summary>
            Gets the number of conflicts resolved.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncResult.TotalChangesFailedToApplyOnClient">
            <summary>
            Gets the number of row failed to apply on client.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncResult.TotalChangesFailedToApplyOnServer">
            <summary>
            Gets the number of sync errors.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncResult.ChangesAppliedOnServer">
            <summary>
            Gets or Sets the summary of client changes that where applied on the server.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncResult.ChangesAppliedOnClient">
            <summary>
            Gets or Sets the summary of server changes that where applied on the client.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncResult.SnapshotChangesAppliedOnClient">
            <summary>
            Gets or Sets the summary of snapshot changes that where applied on the client.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncResult.ClientChangesSelected">
            <summary>
            Gets or Sets the summary of client changes to be applied on the server.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncResult.ServerChangesSelected">
            <summary>
            Gets or Sets the summary of server changes selected to be applied on the client.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncResult.ToString">
            <summary>
            Get the result if sync session is ended.
            </summary>
        </member>
        <member name="T:Dotmim.Sync.SyncTypeConverter">
            <summary>
            Sync Type Converter: Convert a value to another type.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncTypeConverter.TryConvertTo``1(System.Object,System.Globalization.CultureInfo)">
            <summary>
            Try to convert a value to another type.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncTypeConverter.TryConvertTo(System.Object,System.Type,System.Globalization.CultureInfo)">
            <summary>
            Try to convert a value to another type.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncTypeConverter.TryConvertFromDbType(System.Object,System.Data.DbType,System.Globalization.CultureInfo)">
            <summary>
            Try to convert a value from DbType to another type.
            </summary>
        </member>
        <member name="T:Dotmim.Sync.SyncVersion">
            <summary>
            Contains the current version of the library.
            </summary>
        </member>
        <member name="P:Dotmim.Sync.SyncVersion.Current">
            <summary>
            Gets the current version of the library.
            </summary>
        </member>
        <member name="M:Dotmim.Sync.SyncVersion.EnsureVersion(System.String)">
            <summary>
            Ensure the version is correct.
            </summary>
        </member>
        <member name="T:System.Text.Json.Serialization.Metadata.DataContractResolver">
            <summary>
            Data contract resolver used to create JsonTypeInfo for types with DataContractAttribute.
            </summary>
        </member>
        <member name="M:System.Text.Json.Serialization.Metadata.DataContractResolver.GetTypeInfo(System.Text.Json.Serialization.Metadata.JsonTypeInfo,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Gets the JsonTypeInfo for the specified type.
            </summary>
        </member>
        <member name="M:System.Text.Json.Serialization.Metadata.DataContractResolver.GetTypeInfo(System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Gets the JsonTypeInfo for the specified type.
            </summary>
        </member>
    </members>
</doc>
